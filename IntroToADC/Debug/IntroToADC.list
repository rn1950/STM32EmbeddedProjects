
IntroToADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055d8  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08005870  08005870  00015870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005880  08005880  00015880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005884  08005884  00015884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08005888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000008c  20000014  0800589c  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000a0  0800589c  000200a0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001543b  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000236d  00000000  00000000  0003547d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000b08  00000000  00000000  000377f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000a40  00000000  00000000  000382f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000365bd  00000000  00000000  00038d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000ccb7  00000000  00000000  0006f2f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00161d0b  00000000  00000000  0007bfac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001ddcb7  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002d94  00000000  00000000  001ddd0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000014 	.word	0x20000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005858 	.word	0x08005858

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000018 	.word	0x20000018
 80002d4:	08005858 	.word	0x08005858

080002d8 <main>:
uint16_t raw_val;
float y_last = 0;
float alpha = .5;

int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all periï¿¼pherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002de:	f000 fadd 	bl	800089c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e2:	f000 f849 	bl	8000378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e6:	f000 f933 	bl	8000550 <MX_GPIO_Init>
  MX_ADC1_Init();
 80002ea:	f000 f8b9 	bl	8000460 <MX_ADC1_Init>


  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_Start(&hadc1);
 80002ee:	481e      	ldr	r0, [pc, #120]	; (8000368 <main+0x90>)
 80002f0:	f000 fef4 	bl	80010dc <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 80002f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80002f8:	481b      	ldr	r0, [pc, #108]	; (8000368 <main+0x90>)
 80002fa:	f000 ffb9 	bl	8001270 <HAL_ADC_PollForConversion>
	  raw_val = HAL_ADC_GetValue(&hadc1);
 80002fe:	481a      	ldr	r0, [pc, #104]	; (8000368 <main+0x90>)
 8000300:	f001 f8aa 	bl	8001458 <HAL_ADC_GetValue>
 8000304:	4603      	mov	r3, r0
 8000306:	b29a      	uxth	r2, r3
 8000308:	4b18      	ldr	r3, [pc, #96]	; (800036c <main+0x94>)
 800030a:	801a      	strh	r2, [r3, #0]
	  float x_scaled = raw_val / 65535.0;
 800030c:	4b17      	ldr	r3, [pc, #92]	; (800036c <main+0x94>)
 800030e:	881b      	ldrh	r3, [r3, #0]
 8000310:	ee07 3a90 	vmov	s15, r3
 8000314:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000318:	ed9f 5b11 	vldr	d5, [pc, #68]	; 8000360 <main+0x88>
 800031c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000320:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000324:	edc7 7a01 	vstr	s15, [r7, #4]
	  float output = ((1-alpha) * x_scaled) + (alpha * y_last);
 8000328:	4b11      	ldr	r3, [pc, #68]	; (8000370 <main+0x98>)
 800032a:	edd3 7a00 	vldr	s15, [r3]
 800032e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000332:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000336:	edd7 7a01 	vldr	s15, [r7, #4]
 800033a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800033e:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <main+0x98>)
 8000340:	edd3 6a00 	vldr	s13, [r3]
 8000344:	4b0b      	ldr	r3, [pc, #44]	; (8000374 <main+0x9c>)
 8000346:	edd3 7a00 	vldr	s15, [r3]
 800034a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800034e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000352:	edc7 7a00 	vstr	s15, [r7]
	  y_last = output;
 8000356:	4a07      	ldr	r2, [pc, #28]	; (8000374 <main+0x9c>)
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	6013      	str	r3, [r2, #0]
  {
 800035c:	e7c7      	b.n	80002ee <main+0x16>
 800035e:	bf00      	nop
 8000360:	00000000 	.word	0x00000000
 8000364:	40efffe0 	.word	0x40efffe0
 8000368:	20000034 	.word	0x20000034
 800036c:	20000098 	.word	0x20000098
 8000370:	20000000 	.word	0x20000000
 8000374:	20000030 	.word	0x20000030

08000378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b09c      	sub	sp, #112	; 0x70
 800037c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000382:	224c      	movs	r2, #76	; 0x4c
 8000384:	2100      	movs	r1, #0
 8000386:	4618      	mov	r0, r3
 8000388:	f005 fa5e 	bl	8005848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	2220      	movs	r2, #32
 8000390:	2100      	movs	r1, #0
 8000392:	4618      	mov	r0, r3
 8000394:	f005 fa58 	bl	8005848 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000398:	2002      	movs	r0, #2
 800039a:	f002 f901 	bl	80025a0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800039e:	2300      	movs	r3, #0
 80003a0:	603b      	str	r3, [r7, #0]
 80003a2:	4b2c      	ldr	r3, [pc, #176]	; (8000454 <SystemClock_Config+0xdc>)
 80003a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003a6:	4a2b      	ldr	r2, [pc, #172]	; (8000454 <SystemClock_Config+0xdc>)
 80003a8:	f023 0301 	bic.w	r3, r3, #1
 80003ac:	62d3      	str	r3, [r2, #44]	; 0x2c
 80003ae:	4b29      	ldr	r3, [pc, #164]	; (8000454 <SystemClock_Config+0xdc>)
 80003b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003b2:	f003 0301 	and.w	r3, r3, #1
 80003b6:	603b      	str	r3, [r7, #0]
 80003b8:	4b27      	ldr	r3, [pc, #156]	; (8000458 <SystemClock_Config+0xe0>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80003c0:	4a25      	ldr	r2, [pc, #148]	; (8000458 <SystemClock_Config+0xe0>)
 80003c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003c6:	6193      	str	r3, [r2, #24]
 80003c8:	4b23      	ldr	r3, [pc, #140]	; (8000458 <SystemClock_Config+0xe0>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80003d0:	603b      	str	r3, [r7, #0]
 80003d2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003d4:	bf00      	nop
 80003d6:	4b20      	ldr	r3, [pc, #128]	; (8000458 <SystemClock_Config+0xe0>)
 80003d8:	699b      	ldr	r3, [r3, #24]
 80003da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003e2:	d1f8      	bne.n	80003d6 <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80003e4:	4b1d      	ldr	r3, [pc, #116]	; (800045c <SystemClock_Config+0xe4>)
 80003e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003e8:	4a1c      	ldr	r2, [pc, #112]	; (800045c <SystemClock_Config+0xe4>)
 80003ea:	f023 0303 	bic.w	r3, r3, #3
 80003ee:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003f0:	2302      	movs	r3, #2
 80003f2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80003f4:	2301      	movs	r3, #1
 80003f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003f8:	2340      	movs	r3, #64	; 0x40
 80003fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003fc:	2300      	movs	r3, #0
 80003fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000400:	2300      	movs	r3, #0
 8000402:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000408:	4618      	mov	r0, r3
 800040a:	f002 f903 	bl	8002614 <HAL_RCC_OscConfig>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000414:	f000 f8d2 	bl	80005bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000418:	233f      	movs	r3, #63	; 0x3f
 800041a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800041c:	2300      	movs	r3, #0
 800041e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000420:	2300      	movs	r3, #0
 8000422:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000424:	2300      	movs	r3, #0
 8000426:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000428:	2300      	movs	r3, #0
 800042a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800042c:	2300      	movs	r3, #0
 800042e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000430:	2300      	movs	r3, #0
 8000432:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000434:	2300      	movs	r3, #0
 8000436:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	2101      	movs	r1, #1
 800043c:	4618      	mov	r0, r3
 800043e:	f002 fcf9 	bl	8002e34 <HAL_RCC_ClockConfig>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000448:	f000 f8b8 	bl	80005bc <Error_Handler>
  }
}
 800044c:	bf00      	nop
 800044e:	3770      	adds	r7, #112	; 0x70
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	58000400 	.word	0x58000400
 8000458:	58024800 	.word	0x58024800
 800045c:	58024400 	.word	0x58024400

08000460 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b08a      	sub	sp, #40	; 0x28
 8000464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000466:	f107 031c 	add.w	r3, r7, #28
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000472:	463b      	mov	r3, r7
 8000474:	2200      	movs	r2, #0
 8000476:	601a      	str	r2, [r3, #0]
 8000478:	605a      	str	r2, [r3, #4]
 800047a:	609a      	str	r2, [r3, #8]
 800047c:	60da      	str	r2, [r3, #12]
 800047e:	611a      	str	r2, [r3, #16]
 8000480:	615a      	str	r2, [r3, #20]
 8000482:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000484:	4b2f      	ldr	r3, [pc, #188]	; (8000544 <MX_ADC1_Init+0xe4>)
 8000486:	4a30      	ldr	r2, [pc, #192]	; (8000548 <MX_ADC1_Init+0xe8>)
 8000488:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800048a:	4b2e      	ldr	r3, [pc, #184]	; (8000544 <MX_ADC1_Init+0xe4>)
 800048c:	2200      	movs	r2, #0
 800048e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000490:	4b2c      	ldr	r3, [pc, #176]	; (8000544 <MX_ADC1_Init+0xe4>)
 8000492:	2200      	movs	r2, #0
 8000494:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000496:	4b2b      	ldr	r3, [pc, #172]	; (8000544 <MX_ADC1_Init+0xe4>)
 8000498:	2200      	movs	r2, #0
 800049a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800049c:	4b29      	ldr	r3, [pc, #164]	; (8000544 <MX_ADC1_Init+0xe4>)
 800049e:	2204      	movs	r2, #4
 80004a0:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004a2:	4b28      	ldr	r3, [pc, #160]	; (8000544 <MX_ADC1_Init+0xe4>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004a8:	4b26      	ldr	r3, [pc, #152]	; (8000544 <MX_ADC1_Init+0xe4>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80004ae:	4b25      	ldr	r3, [pc, #148]	; (8000544 <MX_ADC1_Init+0xe4>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004b4:	4b23      	ldr	r3, [pc, #140]	; (8000544 <MX_ADC1_Init+0xe4>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004ba:	4b22      	ldr	r3, [pc, #136]	; (8000544 <MX_ADC1_Init+0xe4>)
 80004bc:	2200      	movs	r2, #0
 80004be:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004c0:	4b20      	ldr	r3, [pc, #128]	; (8000544 <MX_ADC1_Init+0xe4>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80004c6:	4b1f      	ldr	r3, [pc, #124]	; (8000544 <MX_ADC1_Init+0xe4>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004cc:	4b1d      	ldr	r3, [pc, #116]	; (8000544 <MX_ADC1_Init+0xe4>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80004d2:	4b1c      	ldr	r3, [pc, #112]	; (8000544 <MX_ADC1_Init+0xe4>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80004d8:	4b1a      	ldr	r3, [pc, #104]	; (8000544 <MX_ADC1_Init+0xe4>)
 80004da:	2200      	movs	r2, #0
 80004dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004e0:	4818      	ldr	r0, [pc, #96]	; (8000544 <MX_ADC1_Init+0xe4>)
 80004e2:	f000 fc5b 	bl	8000d9c <HAL_ADC_Init>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80004ec:	f000 f866 	bl	80005bc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80004f0:	2300      	movs	r3, #0
 80004f2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80004f4:	f107 031c 	add.w	r3, r7, #28
 80004f8:	4619      	mov	r1, r3
 80004fa:	4812      	ldr	r0, [pc, #72]	; (8000544 <MX_ADC1_Init+0xe4>)
 80004fc:	f001 fcc4 	bl	8001e88 <HAL_ADCEx_MultiModeConfigChannel>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000506:	f000 f859 	bl	80005bc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800050a:	4b10      	ldr	r3, [pc, #64]	; (800054c <MX_ADC1_Init+0xec>)
 800050c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800050e:	2306      	movs	r3, #6
 8000510:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000512:	2300      	movs	r3, #0
 8000514:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000516:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800051a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800051c:	2304      	movs	r3, #4
 800051e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000520:	2300      	movs	r3, #0
 8000522:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000524:	2300      	movs	r3, #0
 8000526:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000528:	463b      	mov	r3, r7
 800052a:	4619      	mov	r1, r3
 800052c:	4805      	ldr	r0, [pc, #20]	; (8000544 <MX_ADC1_Init+0xe4>)
 800052e:	f000 ffa1 	bl	8001474 <HAL_ADC_ConfigChannel>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000538:	f000 f840 	bl	80005bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800053c:	bf00      	nop
 800053e:	3728      	adds	r7, #40	; 0x28
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20000034 	.word	0x20000034
 8000548:	40022000 	.word	0x40022000
 800054c:	3ef08000 	.word	0x3ef08000

08000550 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000564:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <MX_GPIO_Init+0x64>)
 8000566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800056a:	4a12      	ldr	r2, [pc, #72]	; (80005b4 <MX_GPIO_Init+0x64>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000574:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <MX_GPIO_Init+0x64>)
 8000576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	603b      	str	r3, [r7, #0]
 8000580:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000588:	480b      	ldr	r0, [pc, #44]	; (80005b8 <MX_GPIO_Init+0x68>)
 800058a:	f001 ffef 	bl	800256c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800058e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000592:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000594:	2301      	movs	r3, #1
 8000596:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059c:	2300      	movs	r3, #0
 800059e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	4619      	mov	r1, r3
 80005a4:	4804      	ldr	r0, [pc, #16]	; (80005b8 <MX_GPIO_Init+0x68>)
 80005a6:	f001 fe31 	bl	800220c <HAL_GPIO_Init>

}
 80005aa:	bf00      	nop
 80005ac:	3718      	adds	r7, #24
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	58024400 	.word	0x58024400
 80005b8:	58020000 	.word	0x58020000

080005bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c0:	b672      	cpsid	i
}
 80005c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c4:	e7fe      	b.n	80005c4 <Error_Handler+0x8>
	...

080005c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ce:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <HAL_MspInit+0x30>)
 80005d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80005d4:	4a08      	ldr	r2, [pc, #32]	; (80005f8 <HAL_MspInit+0x30>)
 80005d6:	f043 0302 	orr.w	r3, r3, #2
 80005da:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <HAL_MspInit+0x30>)
 80005e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80005e4:	f003 0302 	and.w	r3, r3, #2
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	58024400 	.word	0x58024400

080005fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b0b8      	sub	sp, #224	; 0xe0
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000604:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000614:	f107 0310 	add.w	r3, r7, #16
 8000618:	22bc      	movs	r2, #188	; 0xbc
 800061a:	2100      	movs	r1, #0
 800061c:	4618      	mov	r0, r3
 800061e:	f005 f913 	bl	8005848 <memset>
  if(hadc->Instance==ADC1)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a2a      	ldr	r2, [pc, #168]	; (80006d0 <HAL_ADC_MspInit+0xd4>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d14d      	bne.n	80006c8 <HAL_ADC_MspInit+0xcc>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800062c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000630:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000632:	2304      	movs	r3, #4
 8000634:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 8000636:	2309      	movs	r3, #9
 8000638:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 800063a:	2304      	movs	r3, #4
 800063c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800063e:	2302      	movs	r3, #2
 8000640:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000642:	2302      	movs	r3, #2
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000646:	23c0      	movs	r3, #192	; 0xc0
 8000648:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800064a:	2320      	movs	r3, #32
 800064c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 3072.0;
 800064e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000652:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000654:	2300      	movs	r3, #0
 8000656:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800065a:	f107 0310 	add.w	r3, r7, #16
 800065e:	4618      	mov	r0, r3
 8000660:	f002 ff48 	bl	80034f4 <HAL_RCCEx_PeriphCLKConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 800066a:	f7ff ffa7 	bl	80005bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800066e:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <HAL_ADC_MspInit+0xd8>)
 8000670:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000674:	4a17      	ldr	r2, [pc, #92]	; (80006d4 <HAL_ADC_MspInit+0xd8>)
 8000676:	f043 0320 	orr.w	r3, r3, #32
 800067a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800067e:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <HAL_ADC_MspInit+0xd8>)
 8000680:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000684:	f003 0320 	and.w	r3, r3, #32
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <HAL_ADC_MspInit+0xd8>)
 800068e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000692:	4a10      	ldr	r2, [pc, #64]	; (80006d4 <HAL_ADC_MspInit+0xd8>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800069c:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <HAL_ADC_MspInit+0xd8>)
 800069e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006aa:	2308      	movs	r3, #8
 80006ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006b0:	2303      	movs	r3, #3
 80006b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80006c0:	4619      	mov	r1, r3
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <HAL_ADC_MspInit+0xdc>)
 80006c4:	f001 fda2 	bl	800220c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006c8:	bf00      	nop
 80006ca:	37e0      	adds	r7, #224	; 0xe0
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40022000 	.word	0x40022000
 80006d4:	58024400 	.word	0x58024400
 80006d8:	58020000 	.word	0x58020000

080006dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <NMI_Handler+0x4>

080006e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <HardFault_Handler+0x4>

080006e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <MemManage_Handler+0x4>

080006ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <BusFault_Handler+0x4>

080006f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <UsageFault_Handler+0x4>

080006fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr

08000716 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800071a:	bf00      	nop
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000728:	f000 f92a 	bl	8000980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}

08000730 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000734:	4b39      	ldr	r3, [pc, #228]	; (800081c <SystemInit+0xec>)
 8000736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800073a:	4a38      	ldr	r2, [pc, #224]	; (800081c <SystemInit+0xec>)
 800073c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000740:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000744:	4b36      	ldr	r3, [pc, #216]	; (8000820 <SystemInit+0xf0>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f003 030f 	and.w	r3, r3, #15
 800074c:	2b06      	cmp	r3, #6
 800074e:	d807      	bhi.n	8000760 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000750:	4b33      	ldr	r3, [pc, #204]	; (8000820 <SystemInit+0xf0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f023 030f 	bic.w	r3, r3, #15
 8000758:	4a31      	ldr	r2, [pc, #196]	; (8000820 <SystemInit+0xf0>)
 800075a:	f043 0307 	orr.w	r3, r3, #7
 800075e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000760:	4b30      	ldr	r3, [pc, #192]	; (8000824 <SystemInit+0xf4>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a2f      	ldr	r2, [pc, #188]	; (8000824 <SystemInit+0xf4>)
 8000766:	f043 0301 	orr.w	r3, r3, #1
 800076a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800076c:	4b2d      	ldr	r3, [pc, #180]	; (8000824 <SystemInit+0xf4>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000772:	4b2c      	ldr	r3, [pc, #176]	; (8000824 <SystemInit+0xf4>)
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	492b      	ldr	r1, [pc, #172]	; (8000824 <SystemInit+0xf4>)
 8000778:	4b2b      	ldr	r3, [pc, #172]	; (8000828 <SystemInit+0xf8>)
 800077a:	4013      	ands	r3, r2
 800077c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800077e:	4b28      	ldr	r3, [pc, #160]	; (8000820 <SystemInit+0xf0>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f003 0308 	and.w	r3, r3, #8
 8000786:	2b00      	cmp	r3, #0
 8000788:	d007      	beq.n	800079a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800078a:	4b25      	ldr	r3, [pc, #148]	; (8000820 <SystemInit+0xf0>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f023 030f 	bic.w	r3, r3, #15
 8000792:	4a23      	ldr	r2, [pc, #140]	; (8000820 <SystemInit+0xf0>)
 8000794:	f043 0307 	orr.w	r3, r3, #7
 8000798:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800079a:	4b22      	ldr	r3, [pc, #136]	; (8000824 <SystemInit+0xf4>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80007a0:	4b20      	ldr	r3, [pc, #128]	; (8000824 <SystemInit+0xf4>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80007a6:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <SystemInit+0xf4>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80007ac:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <SystemInit+0xf4>)
 80007ae:	4a1f      	ldr	r2, [pc, #124]	; (800082c <SystemInit+0xfc>)
 80007b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80007b2:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <SystemInit+0xf4>)
 80007b4:	4a1e      	ldr	r2, [pc, #120]	; (8000830 <SystemInit+0x100>)
 80007b6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80007b8:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <SystemInit+0xf4>)
 80007ba:	4a1e      	ldr	r2, [pc, #120]	; (8000834 <SystemInit+0x104>)
 80007bc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80007be:	4b19      	ldr	r3, [pc, #100]	; (8000824 <SystemInit+0xf4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80007c4:	4b17      	ldr	r3, [pc, #92]	; (8000824 <SystemInit+0xf4>)
 80007c6:	4a1b      	ldr	r2, [pc, #108]	; (8000834 <SystemInit+0x104>)
 80007c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80007ca:	4b16      	ldr	r3, [pc, #88]	; (8000824 <SystemInit+0xf4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <SystemInit+0xf4>)
 80007d2:	4a18      	ldr	r2, [pc, #96]	; (8000834 <SystemInit+0x104>)
 80007d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80007d6:	4b13      	ldr	r3, [pc, #76]	; (8000824 <SystemInit+0xf4>)
 80007d8:	2200      	movs	r2, #0
 80007da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <SystemInit+0xf4>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a10      	ldr	r2, [pc, #64]	; (8000824 <SystemInit+0xf4>)
 80007e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007e8:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <SystemInit+0xf4>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80007ee:	4b12      	ldr	r3, [pc, #72]	; (8000838 <SystemInit+0x108>)
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	4b12      	ldr	r3, [pc, #72]	; (800083c <SystemInit+0x10c>)
 80007f4:	4013      	ands	r3, r2
 80007f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80007fa:	d202      	bcs.n	8000802 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80007fc:	4b10      	ldr	r3, [pc, #64]	; (8000840 <SystemInit+0x110>)
 80007fe:	2201      	movs	r2, #1
 8000800:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000802:	4b10      	ldr	r3, [pc, #64]	; (8000844 <SystemInit+0x114>)
 8000804:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000808:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800080a:	4b04      	ldr	r3, [pc, #16]	; (800081c <SystemInit+0xec>)
 800080c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000810:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000812:	bf00      	nop
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	e000ed00 	.word	0xe000ed00
 8000820:	52002000 	.word	0x52002000
 8000824:	58024400 	.word	0x58024400
 8000828:	eaf6ed7f 	.word	0xeaf6ed7f
 800082c:	02020200 	.word	0x02020200
 8000830:	01ff0000 	.word	0x01ff0000
 8000834:	01010280 	.word	0x01010280
 8000838:	5c001000 	.word	0x5c001000
 800083c:	ffff0000 	.word	0xffff0000
 8000840:	51008108 	.word	0x51008108
 8000844:	52004000 	.word	0x52004000

08000848 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000848:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000880 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800084c:	f7ff ff70 	bl	8000730 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000850:	480c      	ldr	r0, [pc, #48]	; (8000884 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000852:	490d      	ldr	r1, [pc, #52]	; (8000888 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000854:	4a0d      	ldr	r2, [pc, #52]	; (800088c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000858:	e002      	b.n	8000860 <LoopCopyDataInit>

0800085a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800085c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085e:	3304      	adds	r3, #4

08000860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000864:	d3f9      	bcc.n	800085a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000866:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000868:	4c0a      	ldr	r4, [pc, #40]	; (8000894 <LoopFillZerobss+0x22>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800086c:	e001      	b.n	8000872 <LoopFillZerobss>

0800086e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000870:	3204      	adds	r2, #4

08000872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000874:	d3fb      	bcc.n	800086e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000876:	f004 ffc3 	bl	8005800 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800087a:	f7ff fd2d 	bl	80002d8 <main>
  bx  lr
 800087e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000880:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000888:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800088c:	08005888 	.word	0x08005888
  ldr r2, =_sbss
 8000890:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000894:	200000a0 	.word	0x200000a0

08000898 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000898:	e7fe      	b.n	8000898 <ADC3_IRQHandler>
	...

0800089c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a2:	2003      	movs	r0, #3
 80008a4:	f001 fc80 	bl	80021a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80008a8:	f002 fc7a 	bl	80031a0 <HAL_RCC_GetSysClockFreq>
 80008ac:	4602      	mov	r2, r0
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <HAL_Init+0x68>)
 80008b0:	699b      	ldr	r3, [r3, #24]
 80008b2:	0a1b      	lsrs	r3, r3, #8
 80008b4:	f003 030f 	and.w	r3, r3, #15
 80008b8:	4913      	ldr	r1, [pc, #76]	; (8000908 <HAL_Init+0x6c>)
 80008ba:	5ccb      	ldrb	r3, [r1, r3]
 80008bc:	f003 031f 	and.w	r3, r3, #31
 80008c0:	fa22 f303 	lsr.w	r3, r2, r3
 80008c4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <HAL_Init+0x68>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	f003 030f 	and.w	r3, r3, #15
 80008ce:	4a0e      	ldr	r2, [pc, #56]	; (8000908 <HAL_Init+0x6c>)
 80008d0:	5cd3      	ldrb	r3, [r2, r3]
 80008d2:	f003 031f 	and.w	r3, r3, #31
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	fa22 f303 	lsr.w	r3, r2, r3
 80008dc:	4a0b      	ldr	r2, [pc, #44]	; (800090c <HAL_Init+0x70>)
 80008de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80008e0:	4a0b      	ldr	r2, [pc, #44]	; (8000910 <HAL_Init+0x74>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008e6:	2000      	movs	r0, #0
 80008e8:	f000 f814 	bl	8000914 <HAL_InitTick>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
 80008f4:	e002      	b.n	80008fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80008f6:	f7ff fe67 	bl	80005c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008fa:	2300      	movs	r3, #0
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	58024400 	.word	0x58024400
 8000908:	08005870 	.word	0x08005870
 800090c:	20000008 	.word	0x20000008
 8000910:	20000004 	.word	0x20000004

08000914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800091c:	4b15      	ldr	r3, [pc, #84]	; (8000974 <HAL_InitTick+0x60>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d101      	bne.n	8000928 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000924:	2301      	movs	r3, #1
 8000926:	e021      	b.n	800096c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <HAL_InitTick+0x64>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <HAL_InitTick+0x60>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	4619      	mov	r1, r3
 8000932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000936:	fbb3 f3f1 	udiv	r3, r3, r1
 800093a:	fbb2 f3f3 	udiv	r3, r2, r3
 800093e:	4618      	mov	r0, r3
 8000940:	f001 fc57 	bl	80021f2 <HAL_SYSTICK_Config>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
 800094c:	e00e      	b.n	800096c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2b0f      	cmp	r3, #15
 8000952:	d80a      	bhi.n	800096a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000954:	2200      	movs	r2, #0
 8000956:	6879      	ldr	r1, [r7, #4]
 8000958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800095c:	f001 fc2f 	bl	80021be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000960:	4a06      	ldr	r2, [pc, #24]	; (800097c <HAL_InitTick+0x68>)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000966:	2300      	movs	r3, #0
 8000968:	e000      	b.n	800096c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
}
 800096c:	4618      	mov	r0, r3
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000010 	.word	0x20000010
 8000978:	20000004 	.word	0x20000004
 800097c:	2000000c 	.word	0x2000000c

08000980 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_IncTick+0x20>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	461a      	mov	r2, r3
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_IncTick+0x24>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4413      	add	r3, r2
 8000990:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <HAL_IncTick+0x24>)
 8000992:	6013      	str	r3, [r2, #0]
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	20000010 	.word	0x20000010
 80009a4:	2000009c 	.word	0x2000009c

080009a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  return uwTick;
 80009ac:	4b03      	ldr	r3, [pc, #12]	; (80009bc <HAL_GetTick+0x14>)
 80009ae:	681b      	ldr	r3, [r3, #0]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	2000009c 	.word	0x2000009c

080009c0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80009c4:	4b03      	ldr	r3, [pc, #12]	; (80009d4 <HAL_GetREVID+0x14>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	0c1b      	lsrs	r3, r3, #16
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	5c001000 	.word	0x5c001000

080009d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	689b      	ldr	r3, [r3, #8]
 80009e6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	431a      	orrs	r2, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	609a      	str	r2, [r3, #8]
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80009fe:	b480      	push	{r7}
 8000a00:	b083      	sub	sp, #12
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
 8000a06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	431a      	orrs	r2, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	609a      	str	r2, [r3, #8]
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b087      	sub	sp, #28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
 8000a4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	3360      	adds	r3, #96	; 0x60
 8000a52:	461a      	mov	r2, r3
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	4413      	add	r3, r2
 8000a5a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	430b      	orrs	r3, r1
 8000a6e:	431a      	orrs	r2, r3
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8000a74:	bf00      	nop
 8000a76:	371c      	adds	r7, #28
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	691b      	ldr	r3, [r3, #16]
 8000a90:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	f003 031f 	and.w	r3, r3, #31
 8000a9a:	6879      	ldr	r1, [r7, #4]
 8000a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa0:	431a      	orrs	r2, r3
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	611a      	str	r2, [r3, #16]
}
 8000aa6:	bf00      	nop
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	b087      	sub	sp, #28
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	60f8      	str	r0, [r7, #12]
 8000aba:	60b9      	str	r1, [r7, #8]
 8000abc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	3360      	adds	r3, #96	; 0x60
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	4413      	add	r3, r2
 8000aca:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	431a      	orrs	r2, r3
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	601a      	str	r2, [r3, #0]
  }
}
 8000adc:	bf00      	nop
 8000ade:	371c      	adds	r7, #28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d101      	bne.n	8000b00 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000afc:	2301      	movs	r3, #1
 8000afe:	e000      	b.n	8000b02 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	b087      	sub	sp, #28
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	60f8      	str	r0, [r7, #12]
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	3330      	adds	r3, #48	; 0x30
 8000b1e:	461a      	mov	r2, r3
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	0a1b      	lsrs	r3, r3, #8
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	f003 030c 	and.w	r3, r3, #12
 8000b2a:	4413      	add	r3, r2
 8000b2c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	f003 031f 	and.w	r3, r3, #31
 8000b38:	211f      	movs	r1, #31
 8000b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	401a      	ands	r2, r3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	0e9b      	lsrs	r3, r3, #26
 8000b46:	f003 011f 	and.w	r1, r3, #31
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	f003 031f 	and.w	r3, r3, #31
 8000b50:	fa01 f303 	lsl.w	r3, r1, r3
 8000b54:	431a      	orrs	r2, r3
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000b5a:	bf00      	nop
 8000b5c:	371c      	adds	r7, #28
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b087      	sub	sp, #28
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	60f8      	str	r0, [r7, #12]
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	3314      	adds	r3, #20
 8000b76:	461a      	mov	r2, r3
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	0e5b      	lsrs	r3, r3, #25
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	f003 0304 	and.w	r3, r3, #4
 8000b82:	4413      	add	r3, r2
 8000b84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	0d1b      	lsrs	r3, r3, #20
 8000b8e:	f003 031f 	and.w	r3, r3, #31
 8000b92:	2107      	movs	r1, #7
 8000b94:	fa01 f303 	lsl.w	r3, r1, r3
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	401a      	ands	r2, r3
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	0d1b      	lsrs	r3, r3, #20
 8000ba0:	f003 031f 	and.w	r3, r3, #31
 8000ba4:	6879      	ldr	r1, [r7, #4]
 8000ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8000baa:	431a      	orrs	r2, r3
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000bb0:	bf00      	nop
 8000bb2:	371c      	adds	r7, #28
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	401a      	ands	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f003 0318 	and.w	r3, r3, #24
 8000bde:	4908      	ldr	r1, [pc, #32]	; (8000c00 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000be0:	40d9      	lsrs	r1, r3
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	400b      	ands	r3, r1
 8000be6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000bea:	431a      	orrs	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8000bf2:	bf00      	nop
 8000bf4:	3714      	adds	r7, #20
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	000fffff 	.word	0x000fffff

08000c04 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	f003 031f 	and.w	r3, r3, #31
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689a      	ldr	r2, [r3, #8]
 8000c48:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <LL_ADC_DisableDeepPowerDown+0x20>)
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	6093      	str	r3, [r2, #8]
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	5fffffc0 	.word	0x5fffffc0

08000c60 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c74:	d101      	bne.n	8000c7a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000c76:	2301      	movs	r3, #1
 8000c78:	e000      	b.n	8000c7c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000c7a:	2300      	movs	r3, #0
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	689a      	ldr	r2, [r3, #8]
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <LL_ADC_EnableInternalRegulator+0x24>)
 8000c96:	4013      	ands	r3, r2
 8000c98:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	6fffffc0 	.word	0x6fffffc0

08000cb0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000cc4:	d101      	bne.n	8000cca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e000      	b.n	8000ccc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000cca:	2300      	movs	r3, #0
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	689a      	ldr	r2, [r3, #8]
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <LL_ADC_Enable+0x24>)
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	f043 0201 	orr.w	r2, r3, #1
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	7fffffc0 	.word	0x7fffffc0

08000d00 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d101      	bne.n	8000d18 <LL_ADC_IsEnabled+0x18>
 8000d14:	2301      	movs	r3, #1
 8000d16:	e000      	b.n	8000d1a <LL_ADC_IsEnabled+0x1a>
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
	...

08000d28 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	689a      	ldr	r2, [r3, #8]
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <LL_ADC_REG_StartConversion+0x24>)
 8000d36:	4013      	ands	r3, r2
 8000d38:	f043 0204 	orr.w	r2, r3, #4
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	7fffffc0 	.word	0x7fffffc0

08000d50 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	f003 0304 	and.w	r3, r3, #4
 8000d60:	2b04      	cmp	r3, #4
 8000d62:	d101      	bne.n	8000d68 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000d64:	2301      	movs	r3, #1
 8000d66:	e000      	b.n	8000d6a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	f003 0308 	and.w	r3, r3, #8
 8000d86:	2b08      	cmp	r3, #8
 8000d88:	d101      	bne.n	8000d8e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e000      	b.n	8000d90 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000d8e:	2300      	movs	r3, #0
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b089      	sub	sp, #36	; 0x24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000da4:	2300      	movs	r3, #0
 8000da6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d101      	bne.n	8000db6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e18e      	b.n	80010d4 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	68db      	ldr	r3, [r3, #12]
 8000dba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d109      	bne.n	8000dd8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff fc19 	bl	80005fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff ff3f 	bl	8000c60 <LL_ADC_IsDeepPowerDownEnabled>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d004      	beq.n	8000df2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff25 	bl	8000c3c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ff5a 	bl	8000cb0 <LL_ADC_IsInternalRegulatorEnabled>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d114      	bne.n	8000e2c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff ff3e 	bl	8000c88 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000e0c:	4b9a      	ldr	r3, [pc, #616]	; (8001078 <HAL_ADC_Init+0x2dc>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	099b      	lsrs	r3, r3, #6
 8000e12:	4a9a      	ldr	r2, [pc, #616]	; (800107c <HAL_ADC_Init+0x2e0>)
 8000e14:	fba2 2303 	umull	r2, r3, r2, r3
 8000e18:	099b      	lsrs	r3, r3, #6
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000e1e:	e002      	b.n	8000e26 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d1f9      	bne.n	8000e20 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff3d 	bl	8000cb0 <LL_ADC_IsInternalRegulatorEnabled>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d10d      	bne.n	8000e58 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e40:	f043 0210 	orr.w	r2, r3, #16
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4c:	f043 0201 	orr.w	r2, r3, #1
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff77 	bl	8000d50 <LL_ADC_REG_IsConversionOngoing>
 8000e62:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e68:	f003 0310 	and.w	r3, r3, #16
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	f040 8128 	bne.w	80010c2 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	f040 8124 	bne.w	80010c2 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e7e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000e82:	f043 0202 	orr.w	r2, r3, #2
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff ff36 	bl	8000d00 <LL_ADC_IsEnabled>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d136      	bne.n	8000f08 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a78      	ldr	r2, [pc, #480]	; (8001080 <HAL_ADC_Init+0x2e4>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d004      	beq.n	8000eae <HAL_ADC_Init+0x112>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a76      	ldr	r2, [pc, #472]	; (8001084 <HAL_ADC_Init+0x2e8>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d10e      	bne.n	8000ecc <HAL_ADC_Init+0x130>
 8000eae:	4874      	ldr	r0, [pc, #464]	; (8001080 <HAL_ADC_Init+0x2e4>)
 8000eb0:	f7ff ff26 	bl	8000d00 <LL_ADC_IsEnabled>
 8000eb4:	4604      	mov	r4, r0
 8000eb6:	4873      	ldr	r0, [pc, #460]	; (8001084 <HAL_ADC_Init+0x2e8>)
 8000eb8:	f7ff ff22 	bl	8000d00 <LL_ADC_IsEnabled>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	4323      	orrs	r3, r4
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	bf0c      	ite	eq
 8000ec4:	2301      	moveq	r3, #1
 8000ec6:	2300      	movne	r3, #0
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	e008      	b.n	8000ede <HAL_ADC_Init+0x142>
 8000ecc:	486e      	ldr	r0, [pc, #440]	; (8001088 <HAL_ADC_Init+0x2ec>)
 8000ece:	f7ff ff17 	bl	8000d00 <LL_ADC_IsEnabled>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	bf0c      	ite	eq
 8000ed8:	2301      	moveq	r3, #1
 8000eda:	2300      	movne	r3, #0
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d012      	beq.n	8000f08 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a66      	ldr	r2, [pc, #408]	; (8001080 <HAL_ADC_Init+0x2e4>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d004      	beq.n	8000ef6 <HAL_ADC_Init+0x15a>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a64      	ldr	r2, [pc, #400]	; (8001084 <HAL_ADC_Init+0x2e8>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d101      	bne.n	8000efa <HAL_ADC_Init+0x15e>
 8000ef6:	4a65      	ldr	r2, [pc, #404]	; (800108c <HAL_ADC_Init+0x2f0>)
 8000ef8:	e000      	b.n	8000efc <HAL_ADC_Init+0x160>
 8000efa:	4a65      	ldr	r2, [pc, #404]	; (8001090 <HAL_ADC_Init+0x2f4>)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	4619      	mov	r1, r3
 8000f02:	4610      	mov	r0, r2
 8000f04:	f7ff fd68 	bl	80009d8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8000f08:	f7ff fd5a 	bl	80009c0 <HAL_GetREVID>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	f241 0203 	movw	r2, #4099	; 0x1003
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d914      	bls.n	8000f40 <HAL_ADC_Init+0x1a4>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	2b10      	cmp	r3, #16
 8000f1c:	d110      	bne.n	8000f40 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	7d5b      	ldrb	r3, [r3, #21]
 8000f22:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000f28:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000f2e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	7f1b      	ldrb	r3, [r3, #28]
 8000f34:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8000f36:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000f38:	f043 030c 	orr.w	r3, r3, #12
 8000f3c:	61bb      	str	r3, [r7, #24]
 8000f3e:	e00d      	b.n	8000f5c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	7d5b      	ldrb	r3, [r3, #21]
 8000f44:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000f4a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8000f50:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	7f1b      	ldrb	r3, [r3, #28]
 8000f56:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	7f1b      	ldrb	r3, [r3, #28]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d106      	bne.n	8000f72 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a1b      	ldr	r3, [r3, #32]
 8000f68:	3b01      	subs	r3, #1
 8000f6a:	045b      	lsls	r3, r3, #17
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d009      	beq.n	8000f8e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f86:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	68da      	ldr	r2, [r3, #12]
 8000f94:	4b3f      	ldr	r3, [pc, #252]	; (8001094 <HAL_ADC_Init+0x2f8>)
 8000f96:	4013      	ands	r3, r2
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	6812      	ldr	r2, [r2, #0]
 8000f9c:	69b9      	ldr	r1, [r7, #24]
 8000f9e:	430b      	orrs	r3, r1
 8000fa0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fed2 	bl	8000d50 <LL_ADC_REG_IsConversionOngoing>
 8000fac:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fedf 	bl	8000d76 <LL_ADC_INJ_IsConversionOngoing>
 8000fb8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d14a      	bne.n	8001056 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d147      	bne.n	8001056 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	7d1b      	ldrb	r3, [r3, #20]
 8000fca:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	68da      	ldr	r2, [r3, #12]
 8000fda:	4b2f      	ldr	r3, [pc, #188]	; (8001098 <HAL_ADC_Init+0x2fc>)
 8000fdc:	4013      	ands	r3, r2
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	6812      	ldr	r2, [r2, #0]
 8000fe2:	69b9      	ldr	r1, [r7, #24]
 8000fe4:	430b      	orrs	r3, r1
 8000fe6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d11b      	bne.n	800102a <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	691a      	ldr	r2, [r3, #16]
 8000ffe:	4b27      	ldr	r3, [pc, #156]	; (800109c <HAL_ADC_Init+0x300>)
 8001000:	4013      	ands	r3, r2
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001006:	3a01      	subs	r2, #1
 8001008:	0411      	lsls	r1, r2, #16
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800100e:	4311      	orrs	r1, r2
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001014:	4311      	orrs	r1, r2
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800101a:	430a      	orrs	r2, r1
 800101c:	431a      	orrs	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f042 0201 	orr.w	r2, r2, #1
 8001026:	611a      	str	r2, [r3, #16]
 8001028:	e007      	b.n	800103a <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	691a      	ldr	r2, [r3, #16]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f022 0201 	bic.w	r2, r2, #1
 8001038:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	691b      	ldr	r3, [r3, #16]
 8001040:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	430a      	orrs	r2, r1
 800104e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f000 fde9 	bl	8001c28 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d120      	bne.n	80010a0 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001064:	f023 010f 	bic.w	r1, r3, #15
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	1e5a      	subs	r2, r3, #1
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	430a      	orrs	r2, r1
 8001074:	631a      	str	r2, [r3, #48]	; 0x30
 8001076:	e01b      	b.n	80010b0 <HAL_ADC_Init+0x314>
 8001078:	20000004 	.word	0x20000004
 800107c:	053e2d63 	.word	0x053e2d63
 8001080:	40022000 	.word	0x40022000
 8001084:	40022100 	.word	0x40022100
 8001088:	58026000 	.word	0x58026000
 800108c:	40022300 	.word	0x40022300
 8001090:	58026300 	.word	0x58026300
 8001094:	fff0c003 	.word	0xfff0c003
 8001098:	ffffbffc 	.word	0xffffbffc
 800109c:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f022 020f 	bic.w	r2, r2, #15
 80010ae:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010b4:	f023 0303 	bic.w	r3, r3, #3
 80010b8:	f043 0201 	orr.w	r2, r3, #1
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	655a      	str	r2, [r3, #84]	; 0x54
 80010c0:	e007      	b.n	80010d2 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010c6:	f043 0210 	orr.w	r2, r3, #16
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80010d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3724      	adds	r7, #36	; 0x24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd90      	pop	{r4, r7, pc}

080010dc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a5c      	ldr	r2, [pc, #368]	; (800125c <HAL_ADC_Start+0x180>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d004      	beq.n	80010f8 <HAL_ADC_Start+0x1c>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a5b      	ldr	r2, [pc, #364]	; (8001260 <HAL_ADC_Start+0x184>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d101      	bne.n	80010fc <HAL_ADC_Start+0x20>
 80010f8:	4b5a      	ldr	r3, [pc, #360]	; (8001264 <HAL_ADC_Start+0x188>)
 80010fa:	e000      	b.n	80010fe <HAL_ADC_Start+0x22>
 80010fc:	4b5a      	ldr	r3, [pc, #360]	; (8001268 <HAL_ADC_Start+0x18c>)
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fd80 	bl	8000c04 <LL_ADC_GetMultimode>
 8001104:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fe20 	bl	8000d50 <LL_ADC_REG_IsConversionOngoing>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	f040 809a 	bne.w	800124c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800111e:	2b01      	cmp	r3, #1
 8001120:	d101      	bne.n	8001126 <HAL_ADC_Start+0x4a>
 8001122:	2302      	movs	r3, #2
 8001124:	e095      	b.n	8001252 <HAL_ADC_Start+0x176>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2201      	movs	r2, #1
 800112a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f000 fcf0 	bl	8001b14 <ADC_Enable>
 8001134:	4603      	mov	r3, r0
 8001136:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001138:	7dfb      	ldrb	r3, [r7, #23]
 800113a:	2b00      	cmp	r3, #0
 800113c:	f040 8081 	bne.w	8001242 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001144:	4b49      	ldr	r3, [pc, #292]	; (800126c <HAL_ADC_Start+0x190>)
 8001146:	4013      	ands	r3, r2
 8001148:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a42      	ldr	r2, [pc, #264]	; (8001260 <HAL_ADC_Start+0x184>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d002      	beq.n	8001160 <HAL_ADC_Start+0x84>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	e000      	b.n	8001162 <HAL_ADC_Start+0x86>
 8001160:	4b3e      	ldr	r3, [pc, #248]	; (800125c <HAL_ADC_Start+0x180>)
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	6812      	ldr	r2, [r2, #0]
 8001166:	4293      	cmp	r3, r2
 8001168:	d002      	beq.n	8001170 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d105      	bne.n	800117c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001174:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001180:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001184:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001188:	d106      	bne.n	8001198 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118e:	f023 0206 	bic.w	r2, r3, #6
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	659a      	str	r2, [r3, #88]	; 0x58
 8001196:	e002      	b.n	800119e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	221c      	movs	r2, #28
 80011a4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a2b      	ldr	r2, [pc, #172]	; (8001260 <HAL_ADC_Start+0x184>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d002      	beq.n	80011be <HAL_ADC_Start+0xe2>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	e000      	b.n	80011c0 <HAL_ADC_Start+0xe4>
 80011be:	4b27      	ldr	r3, [pc, #156]	; (800125c <HAL_ADC_Start+0x180>)
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	6812      	ldr	r2, [r2, #0]
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d008      	beq.n	80011da <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d005      	beq.n	80011da <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	2b05      	cmp	r3, #5
 80011d2:	d002      	beq.n	80011da <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	2b09      	cmp	r3, #9
 80011d8:	d114      	bne.n	8001204 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d007      	beq.n	80011f8 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011f0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fd93 	bl	8000d28 <LL_ADC_REG_StartConversion>
 8001202:	e025      	b.n	8001250 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001208:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a12      	ldr	r2, [pc, #72]	; (8001260 <HAL_ADC_Start+0x184>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d002      	beq.n	8001220 <HAL_ADC_Start+0x144>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	e000      	b.n	8001222 <HAL_ADC_Start+0x146>
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <HAL_ADC_Start+0x180>)
 8001222:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d00f      	beq.n	8001250 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001234:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001238:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	655a      	str	r2, [r3, #84]	; 0x54
 8001240:	e006      	b.n	8001250 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800124a:	e001      	b.n	8001250 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800124c:	2302      	movs	r3, #2
 800124e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001250:	7dfb      	ldrb	r3, [r7, #23]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40022000 	.word	0x40022000
 8001260:	40022100 	.word	0x40022100
 8001264:	40022300 	.word	0x40022300
 8001268:	58026300 	.word	0x58026300
 800126c:	fffff0fe 	.word	0xfffff0fe

08001270 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a72      	ldr	r2, [pc, #456]	; (8001448 <HAL_ADC_PollForConversion+0x1d8>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d004      	beq.n	800128e <HAL_ADC_PollForConversion+0x1e>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a70      	ldr	r2, [pc, #448]	; (800144c <HAL_ADC_PollForConversion+0x1dc>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d101      	bne.n	8001292 <HAL_ADC_PollForConversion+0x22>
 800128e:	4b70      	ldr	r3, [pc, #448]	; (8001450 <HAL_ADC_PollForConversion+0x1e0>)
 8001290:	e000      	b.n	8001294 <HAL_ADC_PollForConversion+0x24>
 8001292:	4b70      	ldr	r3, [pc, #448]	; (8001454 <HAL_ADC_PollForConversion+0x1e4>)
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fcb5 	bl	8000c04 <LL_ADC_GetMultimode>
 800129a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	2b08      	cmp	r3, #8
 80012a2:	d102      	bne.n	80012aa <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80012a4:	2308      	movs	r3, #8
 80012a6:	61fb      	str	r3, [r7, #28]
 80012a8:	e037      	b.n	800131a <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d005      	beq.n	80012bc <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	2b05      	cmp	r3, #5
 80012b4:	d002      	beq.n	80012bc <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	2b09      	cmp	r3, #9
 80012ba:	d111      	bne.n	80012e0 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d007      	beq.n	80012da <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ce:	f043 0220 	orr.w	r2, r3, #32
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e0b1      	b.n	800143e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80012da:	2304      	movs	r3, #4
 80012dc:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80012de:	e01c      	b.n	800131a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a58      	ldr	r2, [pc, #352]	; (8001448 <HAL_ADC_PollForConversion+0x1d8>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d004      	beq.n	80012f4 <HAL_ADC_PollForConversion+0x84>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a57      	ldr	r2, [pc, #348]	; (800144c <HAL_ADC_PollForConversion+0x1dc>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d101      	bne.n	80012f8 <HAL_ADC_PollForConversion+0x88>
 80012f4:	4b56      	ldr	r3, [pc, #344]	; (8001450 <HAL_ADC_PollForConversion+0x1e0>)
 80012f6:	e000      	b.n	80012fa <HAL_ADC_PollForConversion+0x8a>
 80012f8:	4b56      	ldr	r3, [pc, #344]	; (8001454 <HAL_ADC_PollForConversion+0x1e4>)
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fc90 	bl	8000c20 <LL_ADC_GetMultiDMATransfer>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d007      	beq.n	8001316 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800130a:	f043 0220 	orr.w	r2, r3, #32
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e093      	b.n	800143e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001316:	2304      	movs	r3, #4
 8001318:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800131a:	f7ff fb45 	bl	80009a8 <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001320:	e021      	b.n	8001366 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001328:	d01d      	beq.n	8001366 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800132a:	f7ff fb3d 	bl	80009a8 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	683a      	ldr	r2, [r7, #0]
 8001336:	429a      	cmp	r2, r3
 8001338:	d302      	bcc.n	8001340 <HAL_ADC_PollForConversion+0xd0>
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d112      	bne.n	8001366 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	4013      	ands	r3, r2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10b      	bne.n	8001366 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001352:	f043 0204 	orr.w	r2, r3, #4
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e06b      	b.n	800143e <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	4013      	ands	r3, r2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0d6      	beq.n	8001322 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001378:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fbaf 	bl	8000ae8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d01c      	beq.n	80013ca <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	7d5b      	ldrb	r3, [r3, #21]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d118      	bne.n	80013ca <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0308 	and.w	r3, r3, #8
 80013a2:	2b08      	cmp	r3, #8
 80013a4:	d111      	bne.n	80013ca <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d105      	bne.n	80013ca <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c2:	f043 0201 	orr.w	r2, r3, #1
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a1f      	ldr	r2, [pc, #124]	; (800144c <HAL_ADC_PollForConversion+0x1dc>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d002      	beq.n	80013da <HAL_ADC_PollForConversion+0x16a>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	e000      	b.n	80013dc <HAL_ADC_PollForConversion+0x16c>
 80013da:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <HAL_ADC_PollForConversion+0x1d8>)
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	6812      	ldr	r2, [r2, #0]
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d008      	beq.n	80013f6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d005      	beq.n	80013f6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	2b05      	cmp	r3, #5
 80013ee:	d002      	beq.n	80013f6 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	2b09      	cmp	r3, #9
 80013f4:	d104      	bne.n	8001400 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	61bb      	str	r3, [r7, #24]
 80013fe:	e00c      	b.n	800141a <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a11      	ldr	r2, [pc, #68]	; (800144c <HAL_ADC_PollForConversion+0x1dc>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d002      	beq.n	8001410 <HAL_ADC_PollForConversion+0x1a0>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	e000      	b.n	8001412 <HAL_ADC_PollForConversion+0x1a2>
 8001410:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <HAL_ADC_PollForConversion+0x1d8>)
 8001412:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	2b08      	cmp	r3, #8
 800141e:	d104      	bne.n	800142a <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2208      	movs	r2, #8
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	e008      	b.n	800143c <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d103      	bne.n	800143c <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	220c      	movs	r2, #12
 800143a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3720      	adds	r7, #32
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40022000 	.word	0x40022000
 800144c:	40022100 	.word	0x40022100
 8001450:	40022300 	.word	0x40022300
 8001454:	58026300 	.word	0x58026300

08001458 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001466:	4618      	mov	r0, r3
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	b0a1      	sub	sp, #132	; 0x84
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800147e:	2300      	movs	r3, #0
 8001480:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	4a9d      	ldr	r2, [pc, #628]	; (8001704 <HAL_ADC_ConfigChannel+0x290>)
 800148e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001496:	2b01      	cmp	r3, #1
 8001498:	d101      	bne.n	800149e <HAL_ADC_ConfigChannel+0x2a>
 800149a:	2302      	movs	r3, #2
 800149c:	e321      	b.n	8001ae2 <HAL_ADC_ConfigChannel+0x66e>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2201      	movs	r2, #1
 80014a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fc50 	bl	8000d50 <LL_ADC_REG_IsConversionOngoing>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f040 8306 	bne.w	8001ac4 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d108      	bne.n	80014d6 <HAL_ADC_ConfigChannel+0x62>
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	0e9b      	lsrs	r3, r3, #26
 80014ca:	f003 031f 	and.w	r3, r3, #31
 80014ce:	2201      	movs	r2, #1
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	e016      	b.n	8001504 <HAL_ADC_ConfigChannel+0x90>
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014de:	fa93 f3a3 	rbit	r3, r3
 80014e2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014e6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80014e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80014ee:	2320      	movs	r3, #32
 80014f0:	e003      	b.n	80014fa <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80014f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014f4:	fab3 f383 	clz	r3, r3
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	f003 031f 	and.w	r3, r3, #31
 80014fe:	2201      	movs	r2, #1
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	6812      	ldr	r2, [r2, #0]
 8001508:	69d1      	ldr	r1, [r2, #28]
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	6812      	ldr	r2, [r2, #0]
 800150e:	430b      	orrs	r3, r1
 8001510:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6818      	ldr	r0, [r3, #0]
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	6859      	ldr	r1, [r3, #4]
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	461a      	mov	r2, r3
 8001520:	f7ff faf5 	bl	8000b0e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fc11 	bl	8000d50 <LL_ADC_REG_IsConversionOngoing>
 800152e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fc1e 	bl	8000d76 <LL_ADC_INJ_IsConversionOngoing>
 800153a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800153c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800153e:	2b00      	cmp	r3, #0
 8001540:	f040 80b3 	bne.w	80016aa <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001544:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001546:	2b00      	cmp	r3, #0
 8001548:	f040 80af 	bne.w	80016aa <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6818      	ldr	r0, [r3, #0]
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	6819      	ldr	r1, [r3, #0]
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	461a      	mov	r2, r3
 800155a:	f7ff fb04 	bl	8000b66 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800155e:	4b6a      	ldr	r3, [pc, #424]	; (8001708 <HAL_ADC_ConfigChannel+0x294>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001566:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800156a:	d10b      	bne.n	8001584 <HAL_ADC_ConfigChannel+0x110>
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	695a      	ldr	r2, [r3, #20]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	089b      	lsrs	r3, r3, #2
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	e01d      	b.n	80015c0 <HAL_ADC_ConfigChannel+0x14c>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	f003 0310 	and.w	r3, r3, #16
 800158e:	2b00      	cmp	r3, #0
 8001590:	d10b      	bne.n	80015aa <HAL_ADC_ConfigChannel+0x136>
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	695a      	ldr	r2, [r3, #20]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	089b      	lsrs	r3, r3, #2
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	e00a      	b.n	80015c0 <HAL_ADC_ConfigChannel+0x14c>
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	695a      	ldr	r2, [r3, #20]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	089b      	lsrs	r3, r3, #2
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	691b      	ldr	r3, [r3, #16]
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	d027      	beq.n	800161a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6818      	ldr	r0, [r3, #0]
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	6919      	ldr	r1, [r3, #16]
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015d8:	f7ff fa32 	bl	8000a40 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6818      	ldr	r0, [r3, #0]
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	6919      	ldr	r1, [r3, #16]
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	7e5b      	ldrb	r3, [r3, #25]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d102      	bne.n	80015f2 <HAL_ADC_ConfigChannel+0x17e>
 80015ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80015f0:	e000      	b.n	80015f4 <HAL_ADC_ConfigChannel+0x180>
 80015f2:	2300      	movs	r3, #0
 80015f4:	461a      	mov	r2, r3
 80015f6:	f7ff fa5c 	bl	8000ab2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6818      	ldr	r0, [r3, #0]
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	6919      	ldr	r1, [r3, #16]
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	7e1b      	ldrb	r3, [r3, #24]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d102      	bne.n	8001610 <HAL_ADC_ConfigChannel+0x19c>
 800160a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800160e:	e000      	b.n	8001612 <HAL_ADC_ConfigChannel+0x19e>
 8001610:	2300      	movs	r3, #0
 8001612:	461a      	mov	r2, r3
 8001614:	f7ff fa34 	bl	8000a80 <LL_ADC_SetDataRightShift>
 8001618:	e047      	b.n	80016aa <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001620:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	069b      	lsls	r3, r3, #26
 800162a:	429a      	cmp	r2, r3
 800162c:	d107      	bne.n	800163e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800163c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001644:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	069b      	lsls	r3, r3, #26
 800164e:	429a      	cmp	r2, r3
 8001650:	d107      	bne.n	8001662 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001660:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001668:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	069b      	lsls	r3, r3, #26
 8001672:	429a      	cmp	r2, r3
 8001674:	d107      	bne.n	8001686 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001684:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800168c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	069b      	lsls	r3, r3, #26
 8001696:	429a      	cmp	r2, r3
 8001698:	d107      	bne.n	80016aa <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80016a8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fb26 	bl	8000d00 <LL_ADC_IsEnabled>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f040 820d 	bne.w	8001ad6 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6818      	ldr	r0, [r3, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	6819      	ldr	r1, [r3, #0]
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	461a      	mov	r2, r3
 80016ca:	f7ff fa77 	bl	8000bbc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	4a0c      	ldr	r2, [pc, #48]	; (8001704 <HAL_ADC_ConfigChannel+0x290>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	f040 8133 	bne.w	8001940 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d110      	bne.n	800170c <HAL_ADC_ConfigChannel+0x298>
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	0e9b      	lsrs	r3, r3, #26
 80016f0:	3301      	adds	r3, #1
 80016f2:	f003 031f 	and.w	r3, r3, #31
 80016f6:	2b09      	cmp	r3, #9
 80016f8:	bf94      	ite	ls
 80016fa:	2301      	movls	r3, #1
 80016fc:	2300      	movhi	r3, #0
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	e01e      	b.n	8001740 <HAL_ADC_ConfigChannel+0x2cc>
 8001702:	bf00      	nop
 8001704:	47ff0000 	.word	0x47ff0000
 8001708:	5c001000 	.word	0x5c001000
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001712:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001714:	fa93 f3a3 	rbit	r3, r3
 8001718:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800171a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800171c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800171e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001720:	2b00      	cmp	r3, #0
 8001722:	d101      	bne.n	8001728 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8001724:	2320      	movs	r3, #32
 8001726:	e003      	b.n	8001730 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8001728:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800172a:	fab3 f383 	clz	r3, r3
 800172e:	b2db      	uxtb	r3, r3
 8001730:	3301      	adds	r3, #1
 8001732:	f003 031f 	and.w	r3, r3, #31
 8001736:	2b09      	cmp	r3, #9
 8001738:	bf94      	ite	ls
 800173a:	2301      	movls	r3, #1
 800173c:	2300      	movhi	r3, #0
 800173e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001740:	2b00      	cmp	r3, #0
 8001742:	d079      	beq.n	8001838 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800174c:	2b00      	cmp	r3, #0
 800174e:	d107      	bne.n	8001760 <HAL_ADC_ConfigChannel+0x2ec>
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	0e9b      	lsrs	r3, r3, #26
 8001756:	3301      	adds	r3, #1
 8001758:	069b      	lsls	r3, r3, #26
 800175a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800175e:	e015      	b.n	800178c <HAL_ADC_ConfigChannel+0x318>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001768:	fa93 f3a3 	rbit	r3, r3
 800176c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800176e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001770:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8001778:	2320      	movs	r3, #32
 800177a:	e003      	b.n	8001784 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800177c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800177e:	fab3 f383 	clz	r3, r3
 8001782:	b2db      	uxtb	r3, r3
 8001784:	3301      	adds	r3, #1
 8001786:	069b      	lsls	r3, r3, #26
 8001788:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001794:	2b00      	cmp	r3, #0
 8001796:	d109      	bne.n	80017ac <HAL_ADC_ConfigChannel+0x338>
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	0e9b      	lsrs	r3, r3, #26
 800179e:	3301      	adds	r3, #1
 80017a0:	f003 031f 	and.w	r3, r3, #31
 80017a4:	2101      	movs	r1, #1
 80017a6:	fa01 f303 	lsl.w	r3, r1, r3
 80017aa:	e017      	b.n	80017dc <HAL_ADC_ConfigChannel+0x368>
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017b4:	fa93 f3a3 	rbit	r3, r3
 80017b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80017ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017bc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80017be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d101      	bne.n	80017c8 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80017c4:	2320      	movs	r3, #32
 80017c6:	e003      	b.n	80017d0 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80017c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017ca:	fab3 f383 	clz	r3, r3
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	3301      	adds	r3, #1
 80017d2:	f003 031f 	and.w	r3, r3, #31
 80017d6:	2101      	movs	r1, #1
 80017d8:	fa01 f303 	lsl.w	r3, r1, r3
 80017dc:	ea42 0103 	orr.w	r1, r2, r3
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d10a      	bne.n	8001802 <HAL_ADC_ConfigChannel+0x38e>
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	0e9b      	lsrs	r3, r3, #26
 80017f2:	3301      	adds	r3, #1
 80017f4:	f003 021f 	and.w	r2, r3, #31
 80017f8:	4613      	mov	r3, r2
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	4413      	add	r3, r2
 80017fe:	051b      	lsls	r3, r3, #20
 8001800:	e018      	b.n	8001834 <HAL_ADC_ConfigChannel+0x3c0>
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800180a:	fa93 f3a3 	rbit	r3, r3
 800180e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001812:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800181a:	2320      	movs	r3, #32
 800181c:	e003      	b.n	8001826 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800181e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001820:	fab3 f383 	clz	r3, r3
 8001824:	b2db      	uxtb	r3, r3
 8001826:	3301      	adds	r3, #1
 8001828:	f003 021f 	and.w	r2, r3, #31
 800182c:	4613      	mov	r3, r2
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	4413      	add	r3, r2
 8001832:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001834:	430b      	orrs	r3, r1
 8001836:	e07e      	b.n	8001936 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001840:	2b00      	cmp	r3, #0
 8001842:	d107      	bne.n	8001854 <HAL_ADC_ConfigChannel+0x3e0>
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	0e9b      	lsrs	r3, r3, #26
 800184a:	3301      	adds	r3, #1
 800184c:	069b      	lsls	r3, r3, #26
 800184e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001852:	e015      	b.n	8001880 <HAL_ADC_ConfigChannel+0x40c>
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800185c:	fa93 f3a3 	rbit	r3, r3
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800186c:	2320      	movs	r3, #32
 800186e:	e003      	b.n	8001878 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001872:	fab3 f383 	clz	r3, r3
 8001876:	b2db      	uxtb	r3, r3
 8001878:	3301      	adds	r3, #1
 800187a:	069b      	lsls	r3, r3, #26
 800187c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001888:	2b00      	cmp	r3, #0
 800188a:	d109      	bne.n	80018a0 <HAL_ADC_ConfigChannel+0x42c>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	0e9b      	lsrs	r3, r3, #26
 8001892:	3301      	adds	r3, #1
 8001894:	f003 031f 	and.w	r3, r3, #31
 8001898:	2101      	movs	r1, #1
 800189a:	fa01 f303 	lsl.w	r3, r1, r3
 800189e:	e017      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x45c>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	fa93 f3a3 	rbit	r3, r3
 80018ac:	61bb      	str	r3, [r7, #24]
  return result;
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80018b2:	6a3b      	ldr	r3, [r7, #32]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80018b8:	2320      	movs	r3, #32
 80018ba:	e003      	b.n	80018c4 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80018bc:	6a3b      	ldr	r3, [r7, #32]
 80018be:	fab3 f383 	clz	r3, r3
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	3301      	adds	r3, #1
 80018c6:	f003 031f 	and.w	r3, r3, #31
 80018ca:	2101      	movs	r1, #1
 80018cc:	fa01 f303 	lsl.w	r3, r1, r3
 80018d0:	ea42 0103 	orr.w	r1, r2, r3
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d10d      	bne.n	80018fc <HAL_ADC_ConfigChannel+0x488>
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	0e9b      	lsrs	r3, r3, #26
 80018e6:	3301      	adds	r3, #1
 80018e8:	f003 021f 	and.w	r2, r3, #31
 80018ec:	4613      	mov	r3, r2
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	4413      	add	r3, r2
 80018f2:	3b1e      	subs	r3, #30
 80018f4:	051b      	lsls	r3, r3, #20
 80018f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018fa:	e01b      	b.n	8001934 <HAL_ADC_ConfigChannel+0x4c0>
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	fa93 f3a3 	rbit	r3, r3
 8001908:	60fb      	str	r3, [r7, #12]
  return result;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d101      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8001914:	2320      	movs	r3, #32
 8001916:	e003      	b.n	8001920 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	fab3 f383 	clz	r3, r3
 800191e:	b2db      	uxtb	r3, r3
 8001920:	3301      	adds	r3, #1
 8001922:	f003 021f 	and.w	r2, r3, #31
 8001926:	4613      	mov	r3, r2
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	4413      	add	r3, r2
 800192c:	3b1e      	subs	r3, #30
 800192e:	051b      	lsls	r3, r3, #20
 8001930:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001934:	430b      	orrs	r3, r1
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	6892      	ldr	r2, [r2, #8]
 800193a:	4619      	mov	r1, r3
 800193c:	f7ff f913 	bl	8000b66 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	f280 80c6 	bge.w	8001ad6 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a67      	ldr	r2, [pc, #412]	; (8001aec <HAL_ADC_ConfigChannel+0x678>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d004      	beq.n	800195e <HAL_ADC_ConfigChannel+0x4ea>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a65      	ldr	r2, [pc, #404]	; (8001af0 <HAL_ADC_ConfigChannel+0x67c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d101      	bne.n	8001962 <HAL_ADC_ConfigChannel+0x4ee>
 800195e:	4b65      	ldr	r3, [pc, #404]	; (8001af4 <HAL_ADC_ConfigChannel+0x680>)
 8001960:	e000      	b.n	8001964 <HAL_ADC_ConfigChannel+0x4f0>
 8001962:	4b65      	ldr	r3, [pc, #404]	; (8001af8 <HAL_ADC_ConfigChannel+0x684>)
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff f85d 	bl	8000a24 <LL_ADC_GetCommonPathInternalCh>
 800196a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a5e      	ldr	r2, [pc, #376]	; (8001aec <HAL_ADC_ConfigChannel+0x678>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d004      	beq.n	8001980 <HAL_ADC_ConfigChannel+0x50c>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a5d      	ldr	r2, [pc, #372]	; (8001af0 <HAL_ADC_ConfigChannel+0x67c>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d10e      	bne.n	800199e <HAL_ADC_ConfigChannel+0x52a>
 8001980:	485a      	ldr	r0, [pc, #360]	; (8001aec <HAL_ADC_ConfigChannel+0x678>)
 8001982:	f7ff f9bd 	bl	8000d00 <LL_ADC_IsEnabled>
 8001986:	4604      	mov	r4, r0
 8001988:	4859      	ldr	r0, [pc, #356]	; (8001af0 <HAL_ADC_ConfigChannel+0x67c>)
 800198a:	f7ff f9b9 	bl	8000d00 <LL_ADC_IsEnabled>
 800198e:	4603      	mov	r3, r0
 8001990:	4323      	orrs	r3, r4
 8001992:	2b00      	cmp	r3, #0
 8001994:	bf0c      	ite	eq
 8001996:	2301      	moveq	r3, #1
 8001998:	2300      	movne	r3, #0
 800199a:	b2db      	uxtb	r3, r3
 800199c:	e008      	b.n	80019b0 <HAL_ADC_ConfigChannel+0x53c>
 800199e:	4857      	ldr	r0, [pc, #348]	; (8001afc <HAL_ADC_ConfigChannel+0x688>)
 80019a0:	f7ff f9ae 	bl	8000d00 <LL_ADC_IsEnabled>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	bf0c      	ite	eq
 80019aa:	2301      	moveq	r3, #1
 80019ac:	2300      	movne	r3, #0
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d07d      	beq.n	8001ab0 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a51      	ldr	r2, [pc, #324]	; (8001b00 <HAL_ADC_ConfigChannel+0x68c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d130      	bne.n	8001a20 <HAL_ADC_ConfigChannel+0x5ac>
 80019be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d12b      	bne.n	8001a20 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a4b      	ldr	r2, [pc, #300]	; (8001afc <HAL_ADC_ConfigChannel+0x688>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	f040 8081 	bne.w	8001ad6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a44      	ldr	r2, [pc, #272]	; (8001aec <HAL_ADC_ConfigChannel+0x678>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d004      	beq.n	80019e8 <HAL_ADC_ConfigChannel+0x574>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a43      	ldr	r2, [pc, #268]	; (8001af0 <HAL_ADC_ConfigChannel+0x67c>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d101      	bne.n	80019ec <HAL_ADC_ConfigChannel+0x578>
 80019e8:	4a42      	ldr	r2, [pc, #264]	; (8001af4 <HAL_ADC_ConfigChannel+0x680>)
 80019ea:	e000      	b.n	80019ee <HAL_ADC_ConfigChannel+0x57a>
 80019ec:	4a42      	ldr	r2, [pc, #264]	; (8001af8 <HAL_ADC_ConfigChannel+0x684>)
 80019ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019f4:	4619      	mov	r1, r3
 80019f6:	4610      	mov	r0, r2
 80019f8:	f7ff f801 	bl	80009fe <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019fc:	4b41      	ldr	r3, [pc, #260]	; (8001b04 <HAL_ADC_ConfigChannel+0x690>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	099b      	lsrs	r3, r3, #6
 8001a02:	4a41      	ldr	r2, [pc, #260]	; (8001b08 <HAL_ADC_ConfigChannel+0x694>)
 8001a04:	fba2 2303 	umull	r2, r3, r2, r3
 8001a08:	099b      	lsrs	r3, r3, #6
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001a10:	e002      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f9      	bne.n	8001a12 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001a1e:	e05a      	b.n	8001ad6 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a39      	ldr	r2, [pc, #228]	; (8001b0c <HAL_ADC_ConfigChannel+0x698>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d11e      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x5f4>
 8001a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d119      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a30      	ldr	r2, [pc, #192]	; (8001afc <HAL_ADC_ConfigChannel+0x688>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d14b      	bne.n	8001ad6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a2a      	ldr	r2, [pc, #168]	; (8001aec <HAL_ADC_ConfigChannel+0x678>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d004      	beq.n	8001a52 <HAL_ADC_ConfigChannel+0x5de>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a28      	ldr	r2, [pc, #160]	; (8001af0 <HAL_ADC_ConfigChannel+0x67c>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d101      	bne.n	8001a56 <HAL_ADC_ConfigChannel+0x5e2>
 8001a52:	4a28      	ldr	r2, [pc, #160]	; (8001af4 <HAL_ADC_ConfigChannel+0x680>)
 8001a54:	e000      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x5e4>
 8001a56:	4a28      	ldr	r2, [pc, #160]	; (8001af8 <HAL_ADC_ConfigChannel+0x684>)
 8001a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4610      	mov	r0, r2
 8001a62:	f7fe ffcc 	bl	80009fe <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001a66:	e036      	b.n	8001ad6 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a28      	ldr	r2, [pc, #160]	; (8001b10 <HAL_ADC_ConfigChannel+0x69c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d131      	bne.n	8001ad6 <HAL_ADC_ConfigChannel+0x662>
 8001a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d12c      	bne.n	8001ad6 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a1e      	ldr	r2, [pc, #120]	; (8001afc <HAL_ADC_ConfigChannel+0x688>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d127      	bne.n	8001ad6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a18      	ldr	r2, [pc, #96]	; (8001aec <HAL_ADC_ConfigChannel+0x678>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d004      	beq.n	8001a9a <HAL_ADC_ConfigChannel+0x626>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a16      	ldr	r2, [pc, #88]	; (8001af0 <HAL_ADC_ConfigChannel+0x67c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d101      	bne.n	8001a9e <HAL_ADC_ConfigChannel+0x62a>
 8001a9a:	4a16      	ldr	r2, [pc, #88]	; (8001af4 <HAL_ADC_ConfigChannel+0x680>)
 8001a9c:	e000      	b.n	8001aa0 <HAL_ADC_ConfigChannel+0x62c>
 8001a9e:	4a16      	ldr	r2, [pc, #88]	; (8001af8 <HAL_ADC_ConfigChannel+0x684>)
 8001aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001aa2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	f7fe ffa8 	bl	80009fe <LL_ADC_SetCommonPathInternalCh>
 8001aae:	e012      	b.n	8001ad6 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab4:	f043 0220 	orr.w	r2, r3, #32
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001ac2:	e008      	b.n	8001ad6 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac8:	f043 0220 	orr.w	r2, r3, #32
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001ade:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3784      	adds	r7, #132	; 0x84
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd90      	pop	{r4, r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40022000 	.word	0x40022000
 8001af0:	40022100 	.word	0x40022100
 8001af4:	40022300 	.word	0x40022300
 8001af8:	58026300 	.word	0x58026300
 8001afc:	58026000 	.word	0x58026000
 8001b00:	cb840000 	.word	0xcb840000
 8001b04:	20000004 	.word	0x20000004
 8001b08:	053e2d63 	.word	0x053e2d63
 8001b0c:	c7520000 	.word	0xc7520000
 8001b10:	cfb80000 	.word	0xcfb80000

08001b14 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff f8ed 	bl	8000d00 <LL_ADC_IsEnabled>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d16e      	bne.n	8001c0a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	4b38      	ldr	r3, [pc, #224]	; (8001c14 <ADC_Enable+0x100>)
 8001b34:	4013      	ands	r3, r2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00d      	beq.n	8001b56 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b3e:	f043 0210 	orr.w	r2, r3, #16
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4a:	f043 0201 	orr.w	r2, r3, #1
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e05a      	b.n	8001c0c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff f8bc 	bl	8000cd8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001b60:	f7fe ff22 	bl	80009a8 <HAL_GetTick>
 8001b64:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a2b      	ldr	r2, [pc, #172]	; (8001c18 <ADC_Enable+0x104>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d004      	beq.n	8001b7a <ADC_Enable+0x66>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a29      	ldr	r2, [pc, #164]	; (8001c1c <ADC_Enable+0x108>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d101      	bne.n	8001b7e <ADC_Enable+0x6a>
 8001b7a:	4b29      	ldr	r3, [pc, #164]	; (8001c20 <ADC_Enable+0x10c>)
 8001b7c:	e000      	b.n	8001b80 <ADC_Enable+0x6c>
 8001b7e:	4b29      	ldr	r3, [pc, #164]	; (8001c24 <ADC_Enable+0x110>)
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff f83f 	bl	8000c04 <LL_ADC_GetMultimode>
 8001b86:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a23      	ldr	r2, [pc, #140]	; (8001c1c <ADC_Enable+0x108>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d002      	beq.n	8001b98 <ADC_Enable+0x84>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	e000      	b.n	8001b9a <ADC_Enable+0x86>
 8001b98:	4b1f      	ldr	r3, [pc, #124]	; (8001c18 <ADC_Enable+0x104>)
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	6812      	ldr	r2, [r2, #0]
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d02c      	beq.n	8001bfc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d130      	bne.n	8001c0a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ba8:	e028      	b.n	8001bfc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff f8a6 	bl	8000d00 <LL_ADC_IsEnabled>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d104      	bne.n	8001bc4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff f88a 	bl	8000cd8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001bc4:	f7fe fef0 	bl	80009a8 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d914      	bls.n	8001bfc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d00d      	beq.n	8001bfc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be4:	f043 0210 	orr.w	r2, r3, #16
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf0:	f043 0201 	orr.w	r2, r3, #1
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e007      	b.n	8001c0c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d1cf      	bne.n	8001baa <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	8000003f 	.word	0x8000003f
 8001c18:	40022000 	.word	0x40022000
 8001c1c:	40022100 	.word	0x40022100
 8001c20:	40022300 	.word	0x40022300
 8001c24:	58026300 	.word	0x58026300

08001c28 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a79      	ldr	r2, [pc, #484]	; (8001e1c <ADC_ConfigureBoostMode+0x1f4>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d004      	beq.n	8001c44 <ADC_ConfigureBoostMode+0x1c>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a78      	ldr	r2, [pc, #480]	; (8001e20 <ADC_ConfigureBoostMode+0x1f8>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d109      	bne.n	8001c58 <ADC_ConfigureBoostMode+0x30>
 8001c44:	4b77      	ldr	r3, [pc, #476]	; (8001e24 <ADC_ConfigureBoostMode+0x1fc>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	bf14      	ite	ne
 8001c50:	2301      	movne	r3, #1
 8001c52:	2300      	moveq	r3, #0
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	e008      	b.n	8001c6a <ADC_ConfigureBoostMode+0x42>
 8001c58:	4b73      	ldr	r3, [pc, #460]	; (8001e28 <ADC_ConfigureBoostMode+0x200>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	bf14      	ite	ne
 8001c64:	2301      	movne	r3, #1
 8001c66:	2300      	moveq	r3, #0
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d01c      	beq.n	8001ca8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8001c6e:	f001 fc11 	bl	8003494 <HAL_RCC_GetHCLKFreq>
 8001c72:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001c7c:	d010      	beq.n	8001ca0 <ADC_ConfigureBoostMode+0x78>
 8001c7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001c82:	d871      	bhi.n	8001d68 <ADC_ConfigureBoostMode+0x140>
 8001c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c88:	d002      	beq.n	8001c90 <ADC_ConfigureBoostMode+0x68>
 8001c8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c8e:	d16b      	bne.n	8001d68 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	0c1b      	lsrs	r3, r3, #16
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9c:	60fb      	str	r3, [r7, #12]
        break;
 8001c9e:	e066      	b.n	8001d6e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	089b      	lsrs	r3, r3, #2
 8001ca4:	60fb      	str	r3, [r7, #12]
        break;
 8001ca6:	e062      	b.n	8001d6e <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001ca8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001cac:	f002 fb62 	bl	8004374 <HAL_RCCEx_GetPeriphCLKFreq>
 8001cb0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001cba:	d051      	beq.n	8001d60 <ADC_ConfigureBoostMode+0x138>
 8001cbc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001cc0:	d854      	bhi.n	8001d6c <ADC_ConfigureBoostMode+0x144>
 8001cc2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001cc6:	d047      	beq.n	8001d58 <ADC_ConfigureBoostMode+0x130>
 8001cc8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001ccc:	d84e      	bhi.n	8001d6c <ADC_ConfigureBoostMode+0x144>
 8001cce:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001cd2:	d03d      	beq.n	8001d50 <ADC_ConfigureBoostMode+0x128>
 8001cd4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001cd8:	d848      	bhi.n	8001d6c <ADC_ConfigureBoostMode+0x144>
 8001cda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001cde:	d033      	beq.n	8001d48 <ADC_ConfigureBoostMode+0x120>
 8001ce0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ce4:	d842      	bhi.n	8001d6c <ADC_ConfigureBoostMode+0x144>
 8001ce6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001cea:	d029      	beq.n	8001d40 <ADC_ConfigureBoostMode+0x118>
 8001cec:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001cf0:	d83c      	bhi.n	8001d6c <ADC_ConfigureBoostMode+0x144>
 8001cf2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001cf6:	d01a      	beq.n	8001d2e <ADC_ConfigureBoostMode+0x106>
 8001cf8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001cfc:	d836      	bhi.n	8001d6c <ADC_ConfigureBoostMode+0x144>
 8001cfe:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001d02:	d014      	beq.n	8001d2e <ADC_ConfigureBoostMode+0x106>
 8001d04:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001d08:	d830      	bhi.n	8001d6c <ADC_ConfigureBoostMode+0x144>
 8001d0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d0e:	d00e      	beq.n	8001d2e <ADC_ConfigureBoostMode+0x106>
 8001d10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d14:	d82a      	bhi.n	8001d6c <ADC_ConfigureBoostMode+0x144>
 8001d16:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001d1a:	d008      	beq.n	8001d2e <ADC_ConfigureBoostMode+0x106>
 8001d1c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001d20:	d824      	bhi.n	8001d6c <ADC_ConfigureBoostMode+0x144>
 8001d22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d26:	d002      	beq.n	8001d2e <ADC_ConfigureBoostMode+0x106>
 8001d28:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001d2c:	d11e      	bne.n	8001d6c <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	0c9b      	lsrs	r3, r3, #18
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3c:	60fb      	str	r3, [r7, #12]
        break;
 8001d3e:	e016      	b.n	8001d6e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	091b      	lsrs	r3, r3, #4
 8001d44:	60fb      	str	r3, [r7, #12]
        break;
 8001d46:	e012      	b.n	8001d6e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	095b      	lsrs	r3, r3, #5
 8001d4c:	60fb      	str	r3, [r7, #12]
        break;
 8001d4e:	e00e      	b.n	8001d6e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	099b      	lsrs	r3, r3, #6
 8001d54:	60fb      	str	r3, [r7, #12]
        break;
 8001d56:	e00a      	b.n	8001d6e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	09db      	lsrs	r3, r3, #7
 8001d5c:	60fb      	str	r3, [r7, #12]
        break;
 8001d5e:	e006      	b.n	8001d6e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	0a1b      	lsrs	r3, r3, #8
 8001d64:	60fb      	str	r3, [r7, #12]
        break;
 8001d66:	e002      	b.n	8001d6e <ADC_ConfigureBoostMode+0x146>
        break;
 8001d68:	bf00      	nop
 8001d6a:	e000      	b.n	8001d6e <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8001d6c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8001d6e:	f7fe fe27 	bl	80009c0 <HAL_GetREVID>
 8001d72:	4603      	mov	r3, r0
 8001d74:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d815      	bhi.n	8001da8 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4a2b      	ldr	r2, [pc, #172]	; (8001e2c <ADC_ConfigureBoostMode+0x204>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d908      	bls.n	8001d96 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d92:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8001d94:	e03e      	b.n	8001e14 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001da4:	609a      	str	r2, [r3, #8]
}
 8001da6:	e035      	b.n	8001e14 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	085b      	lsrs	r3, r3, #1
 8001dac:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4a1f      	ldr	r2, [pc, #124]	; (8001e30 <ADC_ConfigureBoostMode+0x208>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d808      	bhi.n	8001dc8 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001dc4:	609a      	str	r2, [r3, #8]
}
 8001dc6:	e025      	b.n	8001e14 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4a1a      	ldr	r2, [pc, #104]	; (8001e34 <ADC_ConfigureBoostMode+0x20c>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d80a      	bhi.n	8001de6 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001de2:	609a      	str	r2, [r3, #8]
}
 8001de4:	e016      	b.n	8001e14 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	4a13      	ldr	r2, [pc, #76]	; (8001e38 <ADC_ConfigureBoostMode+0x210>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d80a      	bhi.n	8001e04 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e00:	609a      	str	r2, [r3, #8]
}
 8001e02:	e007      	b.n	8001e14 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001e12:	609a      	str	r2, [r3, #8]
}
 8001e14:	bf00      	nop
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40022000 	.word	0x40022000
 8001e20:	40022100 	.word	0x40022100
 8001e24:	40022300 	.word	0x40022300
 8001e28:	58026300 	.word	0x58026300
 8001e2c:	01312d00 	.word	0x01312d00
 8001e30:	005f5e10 	.word	0x005f5e10
 8001e34:	00bebc20 	.word	0x00bebc20
 8001e38:	017d7840 	.word	0x017d7840

08001e3c <LL_ADC_IsEnabled>:
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d101      	bne.n	8001e54 <LL_ADC_IsEnabled+0x18>
 8001e50:	2301      	movs	r3, #1
 8001e52:	e000      	b.n	8001e56 <LL_ADC_IsEnabled+0x1a>
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <LL_ADC_REG_IsConversionOngoing>:
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	d101      	bne.n	8001e7a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001e88:	b590      	push	{r4, r7, lr}
 8001e8a:	b09f      	sub	sp, #124	; 0x7c
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d101      	bne.n	8001ea6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e0be      	b.n	8002024 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a5c      	ldr	r2, [pc, #368]	; (800202c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d102      	bne.n	8001ec6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001ec0:	4b5b      	ldr	r3, [pc, #364]	; (8002030 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001ec2:	60bb      	str	r3, [r7, #8]
 8001ec4:	e001      	b.n	8001eca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10b      	bne.n	8001ee8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed4:	f043 0220 	orr.w	r2, r3, #32
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e09d      	b.n	8002024 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff ffb9 	bl	8001e62 <LL_ADC_REG_IsConversionOngoing>
 8001ef0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff ffb3 	bl	8001e62 <LL_ADC_REG_IsConversionOngoing>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d17f      	bne.n	8002002 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001f02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d17c      	bne.n	8002002 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a47      	ldr	r2, [pc, #284]	; (800202c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d004      	beq.n	8001f1c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a46      	ldr	r2, [pc, #280]	; (8002030 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d101      	bne.n	8001f20 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8001f1c:	4b45      	ldr	r3, [pc, #276]	; (8002034 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8001f1e:	e000      	b.n	8001f22 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8001f20:	4b45      	ldr	r3, [pc, #276]	; (8002038 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8001f22:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d039      	beq.n	8001fa0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8001f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f3c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a3a      	ldr	r2, [pc, #232]	; (800202c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d004      	beq.n	8001f52 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a38      	ldr	r2, [pc, #224]	; (8002030 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d10e      	bne.n	8001f70 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8001f52:	4836      	ldr	r0, [pc, #216]	; (800202c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001f54:	f7ff ff72 	bl	8001e3c <LL_ADC_IsEnabled>
 8001f58:	4604      	mov	r4, r0
 8001f5a:	4835      	ldr	r0, [pc, #212]	; (8002030 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001f5c:	f7ff ff6e 	bl	8001e3c <LL_ADC_IsEnabled>
 8001f60:	4603      	mov	r3, r0
 8001f62:	4323      	orrs	r3, r4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	bf0c      	ite	eq
 8001f68:	2301      	moveq	r3, #1
 8001f6a:	2300      	movne	r3, #0
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	e008      	b.n	8001f82 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8001f70:	4832      	ldr	r0, [pc, #200]	; (800203c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8001f72:	f7ff ff63 	bl	8001e3c <LL_ADC_IsEnabled>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	bf0c      	ite	eq
 8001f7c:	2301      	moveq	r3, #1
 8001f7e:	2300      	movne	r3, #0
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d047      	beq.n	8002016 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	4b2d      	ldr	r3, [pc, #180]	; (8002040 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	6811      	ldr	r1, [r2, #0]
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	6892      	ldr	r2, [r2, #8]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f9c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f9e:	e03a      	b.n	8002016 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8001fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001faa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a1e      	ldr	r2, [pc, #120]	; (800202c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d004      	beq.n	8001fc0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a1d      	ldr	r2, [pc, #116]	; (8002030 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d10e      	bne.n	8001fde <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8001fc0:	481a      	ldr	r0, [pc, #104]	; (800202c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8001fc2:	f7ff ff3b 	bl	8001e3c <LL_ADC_IsEnabled>
 8001fc6:	4604      	mov	r4, r0
 8001fc8:	4819      	ldr	r0, [pc, #100]	; (8002030 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8001fca:	f7ff ff37 	bl	8001e3c <LL_ADC_IsEnabled>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	4323      	orrs	r3, r4
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	bf0c      	ite	eq
 8001fd6:	2301      	moveq	r3, #1
 8001fd8:	2300      	movne	r3, #0
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	e008      	b.n	8001ff0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001fde:	4817      	ldr	r0, [pc, #92]	; (800203c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8001fe0:	f7ff ff2c 	bl	8001e3c <LL_ADC_IsEnabled>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	bf0c      	ite	eq
 8001fea:	2301      	moveq	r3, #1
 8001fec:	2300      	movne	r3, #0
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d010      	beq.n	8002016 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	4b11      	ldr	r3, [pc, #68]	; (8002040 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001ffe:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002000:	e009      	b.n	8002016 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002006:	f043 0220 	orr.w	r2, r3, #32
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002014:	e000      	b.n	8002018 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002016:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002020:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002024:	4618      	mov	r0, r3
 8002026:	377c      	adds	r7, #124	; 0x7c
 8002028:	46bd      	mov	sp, r7
 800202a:	bd90      	pop	{r4, r7, pc}
 800202c:	40022000 	.word	0x40022000
 8002030:	40022100 	.word	0x40022100
 8002034:	40022300 	.word	0x40022300
 8002038:	58026300 	.word	0x58026300
 800203c:	58026000 	.word	0x58026000
 8002040:	fffff0e0 	.word	0xfffff0e0

08002044 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002054:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <__NVIC_SetPriorityGrouping+0x40>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002060:	4013      	ands	r3, r2
 8002062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <__NVIC_SetPriorityGrouping+0x44>)
 800206e:	4313      	orrs	r3, r2
 8002070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002072:	4a04      	ldr	r2, [pc, #16]	; (8002084 <__NVIC_SetPriorityGrouping+0x40>)
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	60d3      	str	r3, [r2, #12]
}
 8002078:	bf00      	nop
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	e000ed00 	.word	0xe000ed00
 8002088:	05fa0000 	.word	0x05fa0000

0800208c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002090:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	0a1b      	lsrs	r3, r3, #8
 8002096:	f003 0307 	and.w	r3, r3, #7
}
 800209a:	4618      	mov	r0, r3
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	6039      	str	r1, [r7, #0]
 80020b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	db0a      	blt.n	80020d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	490c      	ldr	r1, [pc, #48]	; (80020f4 <__NVIC_SetPriority+0x4c>)
 80020c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020c6:	0112      	lsls	r2, r2, #4
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	440b      	add	r3, r1
 80020cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d0:	e00a      	b.n	80020e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	4908      	ldr	r1, [pc, #32]	; (80020f8 <__NVIC_SetPriority+0x50>)
 80020d8:	88fb      	ldrh	r3, [r7, #6]
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	3b04      	subs	r3, #4
 80020e0:	0112      	lsls	r2, r2, #4
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	440b      	add	r3, r1
 80020e6:	761a      	strb	r2, [r3, #24]
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	e000e100 	.word	0xe000e100
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b089      	sub	sp, #36	; 0x24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f1c3 0307 	rsb	r3, r3, #7
 8002116:	2b04      	cmp	r3, #4
 8002118:	bf28      	it	cs
 800211a:	2304      	movcs	r3, #4
 800211c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3304      	adds	r3, #4
 8002122:	2b06      	cmp	r3, #6
 8002124:	d902      	bls.n	800212c <NVIC_EncodePriority+0x30>
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3b03      	subs	r3, #3
 800212a:	e000      	b.n	800212e <NVIC_EncodePriority+0x32>
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43da      	mvns	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	401a      	ands	r2, r3
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002144:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	fa01 f303 	lsl.w	r3, r1, r3
 800214e:	43d9      	mvns	r1, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002154:	4313      	orrs	r3, r2
         );
}
 8002156:	4618      	mov	r0, r3
 8002158:	3724      	adds	r7, #36	; 0x24
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
	...

08002164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3b01      	subs	r3, #1
 8002170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002174:	d301      	bcc.n	800217a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002176:	2301      	movs	r3, #1
 8002178:	e00f      	b.n	800219a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800217a:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <SysTick_Config+0x40>)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3b01      	subs	r3, #1
 8002180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002182:	210f      	movs	r1, #15
 8002184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002188:	f7ff ff8e 	bl	80020a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800218c:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <SysTick_Config+0x40>)
 800218e:	2200      	movs	r2, #0
 8002190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002192:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <SysTick_Config+0x40>)
 8002194:	2207      	movs	r2, #7
 8002196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	e000e010 	.word	0xe000e010

080021a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff ff47 	bl	8002044 <__NVIC_SetPriorityGrouping>
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b086      	sub	sp, #24
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	4603      	mov	r3, r0
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
 80021ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021cc:	f7ff ff5e 	bl	800208c <__NVIC_GetPriorityGrouping>
 80021d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	68b9      	ldr	r1, [r7, #8]
 80021d6:	6978      	ldr	r0, [r7, #20]
 80021d8:	f7ff ff90 	bl	80020fc <NVIC_EncodePriority>
 80021dc:	4602      	mov	r2, r0
 80021de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021e2:	4611      	mov	r1, r2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff5f 	bl	80020a8 <__NVIC_SetPriority>
}
 80021ea:	bf00      	nop
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff ffb2 	bl	8002164 <SysTick_Config>
 8002200:	4603      	mov	r3, r0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800220c:	b480      	push	{r7}
 800220e:	b089      	sub	sp, #36	; 0x24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800221a:	4b89      	ldr	r3, [pc, #548]	; (8002440 <HAL_GPIO_Init+0x234>)
 800221c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800221e:	e194      	b.n	800254a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	2101      	movs	r1, #1
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	fa01 f303 	lsl.w	r3, r1, r3
 800222c:	4013      	ands	r3, r2
 800222e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 8186 	beq.w	8002544 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d00b      	beq.n	8002258 <HAL_GPIO_Init+0x4c>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b02      	cmp	r3, #2
 8002246:	d007      	beq.n	8002258 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800224c:	2b11      	cmp	r3, #17
 800224e:	d003      	beq.n	8002258 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b12      	cmp	r3, #18
 8002256:	d130      	bne.n	80022ba <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	2203      	movs	r2, #3
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800228e:	2201      	movs	r2, #1
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43db      	mvns	r3, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4013      	ands	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	091b      	lsrs	r3, r3, #4
 80022a4:	f003 0201 	and.w	r2, r3, #1
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	2203      	movs	r2, #3
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d003      	beq.n	80022fa <HAL_GPIO_Init+0xee>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b12      	cmp	r3, #18
 80022f8:	d123      	bne.n	8002342 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	08da      	lsrs	r2, r3, #3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3208      	adds	r2, #8
 8002302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	220f      	movs	r2, #15
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4313      	orrs	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	08da      	lsrs	r2, r3, #3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3208      	adds	r2, #8
 800233c:	69b9      	ldr	r1, [r7, #24]
 800233e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	2203      	movs	r2, #3
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4013      	ands	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 0203 	and.w	r2, r3, #3
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4313      	orrs	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 80e0 	beq.w	8002544 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002384:	4b2f      	ldr	r3, [pc, #188]	; (8002444 <HAL_GPIO_Init+0x238>)
 8002386:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800238a:	4a2e      	ldr	r2, [pc, #184]	; (8002444 <HAL_GPIO_Init+0x238>)
 800238c:	f043 0302 	orr.w	r3, r3, #2
 8002390:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002394:	4b2b      	ldr	r3, [pc, #172]	; (8002444 <HAL_GPIO_Init+0x238>)
 8002396:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023a2:	4a29      	ldr	r2, [pc, #164]	; (8002448 <HAL_GPIO_Init+0x23c>)
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	089b      	lsrs	r3, r3, #2
 80023a8:	3302      	adds	r3, #2
 80023aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f003 0303 	and.w	r3, r3, #3
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	220f      	movs	r2, #15
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43db      	mvns	r3, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4013      	ands	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a20      	ldr	r2, [pc, #128]	; (800244c <HAL_GPIO_Init+0x240>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d052      	beq.n	8002474 <HAL_GPIO_Init+0x268>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a1f      	ldr	r2, [pc, #124]	; (8002450 <HAL_GPIO_Init+0x244>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d031      	beq.n	800243a <HAL_GPIO_Init+0x22e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a1e      	ldr	r2, [pc, #120]	; (8002454 <HAL_GPIO_Init+0x248>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d02b      	beq.n	8002436 <HAL_GPIO_Init+0x22a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a1d      	ldr	r2, [pc, #116]	; (8002458 <HAL_GPIO_Init+0x24c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d025      	beq.n	8002432 <HAL_GPIO_Init+0x226>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a1c      	ldr	r2, [pc, #112]	; (800245c <HAL_GPIO_Init+0x250>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d01f      	beq.n	800242e <HAL_GPIO_Init+0x222>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a1b      	ldr	r2, [pc, #108]	; (8002460 <HAL_GPIO_Init+0x254>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d019      	beq.n	800242a <HAL_GPIO_Init+0x21e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a1a      	ldr	r2, [pc, #104]	; (8002464 <HAL_GPIO_Init+0x258>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d013      	beq.n	8002426 <HAL_GPIO_Init+0x21a>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a19      	ldr	r2, [pc, #100]	; (8002468 <HAL_GPIO_Init+0x25c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d00d      	beq.n	8002422 <HAL_GPIO_Init+0x216>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a18      	ldr	r2, [pc, #96]	; (800246c <HAL_GPIO_Init+0x260>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d007      	beq.n	800241e <HAL_GPIO_Init+0x212>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a17      	ldr	r2, [pc, #92]	; (8002470 <HAL_GPIO_Init+0x264>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d101      	bne.n	800241a <HAL_GPIO_Init+0x20e>
 8002416:	2309      	movs	r3, #9
 8002418:	e02d      	b.n	8002476 <HAL_GPIO_Init+0x26a>
 800241a:	230a      	movs	r3, #10
 800241c:	e02b      	b.n	8002476 <HAL_GPIO_Init+0x26a>
 800241e:	2308      	movs	r3, #8
 8002420:	e029      	b.n	8002476 <HAL_GPIO_Init+0x26a>
 8002422:	2307      	movs	r3, #7
 8002424:	e027      	b.n	8002476 <HAL_GPIO_Init+0x26a>
 8002426:	2306      	movs	r3, #6
 8002428:	e025      	b.n	8002476 <HAL_GPIO_Init+0x26a>
 800242a:	2305      	movs	r3, #5
 800242c:	e023      	b.n	8002476 <HAL_GPIO_Init+0x26a>
 800242e:	2304      	movs	r3, #4
 8002430:	e021      	b.n	8002476 <HAL_GPIO_Init+0x26a>
 8002432:	2303      	movs	r3, #3
 8002434:	e01f      	b.n	8002476 <HAL_GPIO_Init+0x26a>
 8002436:	2302      	movs	r3, #2
 8002438:	e01d      	b.n	8002476 <HAL_GPIO_Init+0x26a>
 800243a:	2301      	movs	r3, #1
 800243c:	e01b      	b.n	8002476 <HAL_GPIO_Init+0x26a>
 800243e:	bf00      	nop
 8002440:	58000080 	.word	0x58000080
 8002444:	58024400 	.word	0x58024400
 8002448:	58000400 	.word	0x58000400
 800244c:	58020000 	.word	0x58020000
 8002450:	58020400 	.word	0x58020400
 8002454:	58020800 	.word	0x58020800
 8002458:	58020c00 	.word	0x58020c00
 800245c:	58021000 	.word	0x58021000
 8002460:	58021400 	.word	0x58021400
 8002464:	58021800 	.word	0x58021800
 8002468:	58021c00 	.word	0x58021c00
 800246c:	58022000 	.word	0x58022000
 8002470:	58022400 	.word	0x58022400
 8002474:	2300      	movs	r3, #0
 8002476:	69fa      	ldr	r2, [r7, #28]
 8002478:	f002 0203 	and.w	r2, r2, #3
 800247c:	0092      	lsls	r2, r2, #2
 800247e:	4093      	lsls	r3, r2
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002486:	4938      	ldr	r1, [pc, #224]	; (8002568 <HAL_GPIO_Init+0x35c>)
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	089b      	lsrs	r3, r3, #2
 800248c:	3302      	adds	r3, #2
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	43db      	mvns	r3, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	43db      	mvns	r3, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4013      	ands	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	43db      	mvns	r3, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4013      	ands	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800250e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800253c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	3301      	adds	r3, #1
 8002548:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	fa22 f303 	lsr.w	r3, r2, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	f47f ae63 	bne.w	8002220 <HAL_GPIO_Init+0x14>
  }
}
 800255a:	bf00      	nop
 800255c:	bf00      	nop
 800255e:	3724      	adds	r7, #36	; 0x24
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	58000400 	.word	0x58000400

0800256c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	807b      	strh	r3, [r7, #2]
 8002578:	4613      	mov	r3, r2
 800257a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800257c:	787b      	ldrb	r3, [r7, #1]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002582:	887a      	ldrh	r2, [r7, #2]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002588:	e003      	b.n	8002592 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800258a:	887b      	ldrh	r3, [r7, #2]
 800258c:	041a      	lsls	r2, r3, #16
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	619a      	str	r2, [r3, #24]
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
	...

080025a0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80025a8:	4b19      	ldr	r3, [pc, #100]	; (8002610 <HAL_PWREx_ConfigSupply+0x70>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	d00a      	beq.n	80025ca <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80025b4:	4b16      	ldr	r3, [pc, #88]	; (8002610 <HAL_PWREx_ConfigSupply+0x70>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d001      	beq.n	80025c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e01f      	b.n	8002606 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80025c6:	2300      	movs	r3, #0
 80025c8:	e01d      	b.n	8002606 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80025ca:	4b11      	ldr	r3, [pc, #68]	; (8002610 <HAL_PWREx_ConfigSupply+0x70>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f023 0207 	bic.w	r2, r3, #7
 80025d2:	490f      	ldr	r1, [pc, #60]	; (8002610 <HAL_PWREx_ConfigSupply+0x70>)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80025da:	f7fe f9e5 	bl	80009a8 <HAL_GetTick>
 80025de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025e0:	e009      	b.n	80025f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80025e2:	f7fe f9e1 	bl	80009a8 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025f0:	d901      	bls.n	80025f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e007      	b.n	8002606 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025f6:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_PWREx_ConfigSupply+0x70>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002602:	d1ee      	bne.n	80025e2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	58024800 	.word	0x58024800

08002614 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08c      	sub	sp, #48	; 0x30
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e3ff      	b.n	8002e26 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 8087 	beq.w	8002742 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002634:	4b99      	ldr	r3, [pc, #612]	; (800289c <HAL_RCC_OscConfig+0x288>)
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800263c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800263e:	4b97      	ldr	r3, [pc, #604]	; (800289c <HAL_RCC_OscConfig+0x288>)
 8002640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002642:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002646:	2b10      	cmp	r3, #16
 8002648:	d007      	beq.n	800265a <HAL_RCC_OscConfig+0x46>
 800264a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264c:	2b18      	cmp	r3, #24
 800264e:	d110      	bne.n	8002672 <HAL_RCC_OscConfig+0x5e>
 8002650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d10b      	bne.n	8002672 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800265a:	4b90      	ldr	r3, [pc, #576]	; (800289c <HAL_RCC_OscConfig+0x288>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d06c      	beq.n	8002740 <HAL_RCC_OscConfig+0x12c>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d168      	bne.n	8002740 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e3d9      	b.n	8002e26 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800267a:	d106      	bne.n	800268a <HAL_RCC_OscConfig+0x76>
 800267c:	4b87      	ldr	r3, [pc, #540]	; (800289c <HAL_RCC_OscConfig+0x288>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a86      	ldr	r2, [pc, #536]	; (800289c <HAL_RCC_OscConfig+0x288>)
 8002682:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	e02e      	b.n	80026e8 <HAL_RCC_OscConfig+0xd4>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10c      	bne.n	80026ac <HAL_RCC_OscConfig+0x98>
 8002692:	4b82      	ldr	r3, [pc, #520]	; (800289c <HAL_RCC_OscConfig+0x288>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a81      	ldr	r2, [pc, #516]	; (800289c <HAL_RCC_OscConfig+0x288>)
 8002698:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	4b7f      	ldr	r3, [pc, #508]	; (800289c <HAL_RCC_OscConfig+0x288>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a7e      	ldr	r2, [pc, #504]	; (800289c <HAL_RCC_OscConfig+0x288>)
 80026a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	e01d      	b.n	80026e8 <HAL_RCC_OscConfig+0xd4>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026b4:	d10c      	bne.n	80026d0 <HAL_RCC_OscConfig+0xbc>
 80026b6:	4b79      	ldr	r3, [pc, #484]	; (800289c <HAL_RCC_OscConfig+0x288>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a78      	ldr	r2, [pc, #480]	; (800289c <HAL_RCC_OscConfig+0x288>)
 80026bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	4b76      	ldr	r3, [pc, #472]	; (800289c <HAL_RCC_OscConfig+0x288>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a75      	ldr	r2, [pc, #468]	; (800289c <HAL_RCC_OscConfig+0x288>)
 80026c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026cc:	6013      	str	r3, [r2, #0]
 80026ce:	e00b      	b.n	80026e8 <HAL_RCC_OscConfig+0xd4>
 80026d0:	4b72      	ldr	r3, [pc, #456]	; (800289c <HAL_RCC_OscConfig+0x288>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a71      	ldr	r2, [pc, #452]	; (800289c <HAL_RCC_OscConfig+0x288>)
 80026d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026da:	6013      	str	r3, [r2, #0]
 80026dc:	4b6f      	ldr	r3, [pc, #444]	; (800289c <HAL_RCC_OscConfig+0x288>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a6e      	ldr	r2, [pc, #440]	; (800289c <HAL_RCC_OscConfig+0x288>)
 80026e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d013      	beq.n	8002718 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f0:	f7fe f95a 	bl	80009a8 <HAL_GetTick>
 80026f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026f8:	f7fe f956 	bl	80009a8 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b64      	cmp	r3, #100	; 0x64
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e38d      	b.n	8002e26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800270a:	4b64      	ldr	r3, [pc, #400]	; (800289c <HAL_RCC_OscConfig+0x288>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0f0      	beq.n	80026f8 <HAL_RCC_OscConfig+0xe4>
 8002716:	e014      	b.n	8002742 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002718:	f7fe f946 	bl	80009a8 <HAL_GetTick>
 800271c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002720:	f7fe f942 	bl	80009a8 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b64      	cmp	r3, #100	; 0x64
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e379      	b.n	8002e26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002732:	4b5a      	ldr	r3, [pc, #360]	; (800289c <HAL_RCC_OscConfig+0x288>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f0      	bne.n	8002720 <HAL_RCC_OscConfig+0x10c>
 800273e:	e000      	b.n	8002742 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 80ae 	beq.w	80028ac <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002750:	4b52      	ldr	r3, [pc, #328]	; (800289c <HAL_RCC_OscConfig+0x288>)
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002758:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800275a:	4b50      	ldr	r3, [pc, #320]	; (800289c <HAL_RCC_OscConfig+0x288>)
 800275c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002760:	6a3b      	ldr	r3, [r7, #32]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d007      	beq.n	8002776 <HAL_RCC_OscConfig+0x162>
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	2b18      	cmp	r3, #24
 800276a:	d13a      	bne.n	80027e2 <HAL_RCC_OscConfig+0x1ce>
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d135      	bne.n	80027e2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002776:	4b49      	ldr	r3, [pc, #292]	; (800289c <HAL_RCC_OscConfig+0x288>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0304 	and.w	r3, r3, #4
 800277e:	2b00      	cmp	r3, #0
 8002780:	d005      	beq.n	800278e <HAL_RCC_OscConfig+0x17a>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e34b      	b.n	8002e26 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278e:	f7fe f917 	bl	80009c0 <HAL_GetREVID>
 8002792:	4603      	mov	r3, r0
 8002794:	f241 0203 	movw	r2, #4099	; 0x1003
 8002798:	4293      	cmp	r3, r2
 800279a:	d817      	bhi.n	80027cc <HAL_RCC_OscConfig+0x1b8>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	2b40      	cmp	r3, #64	; 0x40
 80027a2:	d108      	bne.n	80027b6 <HAL_RCC_OscConfig+0x1a2>
 80027a4:	4b3d      	ldr	r3, [pc, #244]	; (800289c <HAL_RCC_OscConfig+0x288>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80027ac:	4a3b      	ldr	r2, [pc, #236]	; (800289c <HAL_RCC_OscConfig+0x288>)
 80027ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027b2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027b4:	e07a      	b.n	80028ac <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b6:	4b39      	ldr	r3, [pc, #228]	; (800289c <HAL_RCC_OscConfig+0x288>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	031b      	lsls	r3, r3, #12
 80027c4:	4935      	ldr	r1, [pc, #212]	; (800289c <HAL_RCC_OscConfig+0x288>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027ca:	e06f      	b.n	80028ac <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027cc:	4b33      	ldr	r3, [pc, #204]	; (800289c <HAL_RCC_OscConfig+0x288>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	061b      	lsls	r3, r3, #24
 80027da:	4930      	ldr	r1, [pc, #192]	; (800289c <HAL_RCC_OscConfig+0x288>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027e0:	e064      	b.n	80028ac <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d045      	beq.n	8002876 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027ea:	4b2c      	ldr	r3, [pc, #176]	; (800289c <HAL_RCC_OscConfig+0x288>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f023 0219 	bic.w	r2, r3, #25
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	4929      	ldr	r1, [pc, #164]	; (800289c <HAL_RCC_OscConfig+0x288>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fc:	f7fe f8d4 	bl	80009a8 <HAL_GetTick>
 8002800:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002804:	f7fe f8d0 	bl	80009a8 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e307      	b.n	8002e26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002816:	4b21      	ldr	r3, [pc, #132]	; (800289c <HAL_RCC_OscConfig+0x288>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0f0      	beq.n	8002804 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002822:	f7fe f8cd 	bl	80009c0 <HAL_GetREVID>
 8002826:	4603      	mov	r3, r0
 8002828:	f241 0203 	movw	r2, #4099	; 0x1003
 800282c:	4293      	cmp	r3, r2
 800282e:	d817      	bhi.n	8002860 <HAL_RCC_OscConfig+0x24c>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	2b40      	cmp	r3, #64	; 0x40
 8002836:	d108      	bne.n	800284a <HAL_RCC_OscConfig+0x236>
 8002838:	4b18      	ldr	r3, [pc, #96]	; (800289c <HAL_RCC_OscConfig+0x288>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002840:	4a16      	ldr	r2, [pc, #88]	; (800289c <HAL_RCC_OscConfig+0x288>)
 8002842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002846:	6053      	str	r3, [r2, #4]
 8002848:	e030      	b.n	80028ac <HAL_RCC_OscConfig+0x298>
 800284a:	4b14      	ldr	r3, [pc, #80]	; (800289c <HAL_RCC_OscConfig+0x288>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	031b      	lsls	r3, r3, #12
 8002858:	4910      	ldr	r1, [pc, #64]	; (800289c <HAL_RCC_OscConfig+0x288>)
 800285a:	4313      	orrs	r3, r2
 800285c:	604b      	str	r3, [r1, #4]
 800285e:	e025      	b.n	80028ac <HAL_RCC_OscConfig+0x298>
 8002860:	4b0e      	ldr	r3, [pc, #56]	; (800289c <HAL_RCC_OscConfig+0x288>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	061b      	lsls	r3, r3, #24
 800286e:	490b      	ldr	r1, [pc, #44]	; (800289c <HAL_RCC_OscConfig+0x288>)
 8002870:	4313      	orrs	r3, r2
 8002872:	604b      	str	r3, [r1, #4]
 8002874:	e01a      	b.n	80028ac <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002876:	4b09      	ldr	r3, [pc, #36]	; (800289c <HAL_RCC_OscConfig+0x288>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a08      	ldr	r2, [pc, #32]	; (800289c <HAL_RCC_OscConfig+0x288>)
 800287c:	f023 0301 	bic.w	r3, r3, #1
 8002880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002882:	f7fe f891 	bl	80009a8 <HAL_GetTick>
 8002886:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002888:	e00a      	b.n	80028a0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800288a:	f7fe f88d 	bl	80009a8 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d903      	bls.n	80028a0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e2c4      	b.n	8002e26 <HAL_RCC_OscConfig+0x812>
 800289c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028a0:	4ba4      	ldr	r3, [pc, #656]	; (8002b34 <HAL_RCC_OscConfig+0x520>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1ee      	bne.n	800288a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0310 	and.w	r3, r3, #16
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 80a9 	beq.w	8002a0c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028ba:	4b9e      	ldr	r3, [pc, #632]	; (8002b34 <HAL_RCC_OscConfig+0x520>)
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028c2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028c4:	4b9b      	ldr	r3, [pc, #620]	; (8002b34 <HAL_RCC_OscConfig+0x520>)
 80028c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d007      	beq.n	80028e0 <HAL_RCC_OscConfig+0x2cc>
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	2b18      	cmp	r3, #24
 80028d4:	d13a      	bne.n	800294c <HAL_RCC_OscConfig+0x338>
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f003 0303 	and.w	r3, r3, #3
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d135      	bne.n	800294c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028e0:	4b94      	ldr	r3, [pc, #592]	; (8002b34 <HAL_RCC_OscConfig+0x520>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d005      	beq.n	80028f8 <HAL_RCC_OscConfig+0x2e4>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	2b80      	cmp	r3, #128	; 0x80
 80028f2:	d001      	beq.n	80028f8 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e296      	b.n	8002e26 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028f8:	f7fe f862 	bl	80009c0 <HAL_GetREVID>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f241 0203 	movw	r2, #4099	; 0x1003
 8002902:	4293      	cmp	r3, r2
 8002904:	d817      	bhi.n	8002936 <HAL_RCC_OscConfig+0x322>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	2b20      	cmp	r3, #32
 800290c:	d108      	bne.n	8002920 <HAL_RCC_OscConfig+0x30c>
 800290e:	4b89      	ldr	r3, [pc, #548]	; (8002b34 <HAL_RCC_OscConfig+0x520>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002916:	4a87      	ldr	r2, [pc, #540]	; (8002b34 <HAL_RCC_OscConfig+0x520>)
 8002918:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800291c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800291e:	e075      	b.n	8002a0c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002920:	4b84      	ldr	r3, [pc, #528]	; (8002b34 <HAL_RCC_OscConfig+0x520>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	069b      	lsls	r3, r3, #26
 800292e:	4981      	ldr	r1, [pc, #516]	; (8002b34 <HAL_RCC_OscConfig+0x520>)
 8002930:	4313      	orrs	r3, r2
 8002932:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002934:	e06a      	b.n	8002a0c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002936:	4b7f      	ldr	r3, [pc, #508]	; (8002b34 <HAL_RCC_OscConfig+0x520>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	061b      	lsls	r3, r3, #24
 8002944:	497b      	ldr	r1, [pc, #492]	; (8002b34 <HAL_RCC_OscConfig+0x520>)
 8002946:	4313      	orrs	r3, r2
 8002948:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800294a:	e05f      	b.n	8002a0c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d042      	beq.n	80029da <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002954:	4b77      	ldr	r3, [pc, #476]	; (8002b34 <HAL_RCC_OscConfig+0x520>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a76      	ldr	r2, [pc, #472]	; (8002b34 <HAL_RCC_OscConfig+0x520>)
 800295a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800295e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002960:	f7fe f822 	bl	80009a8 <HAL_GetTick>
 8002964:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002968:	f7fe f81e 	bl	80009a8 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e255      	b.n	8002e26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800297a:	4b6e      	ldr	r3, [pc, #440]	; (8002b34 <HAL_RCC_OscConfig+0x520>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002986:	f7fe f81b 	bl	80009c0 <HAL_GetREVID>
 800298a:	4603      	mov	r3, r0
 800298c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002990:	4293      	cmp	r3, r2
 8002992:	d817      	bhi.n	80029c4 <HAL_RCC_OscConfig+0x3b0>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	2b20      	cmp	r3, #32
 800299a:	d108      	bne.n	80029ae <HAL_RCC_OscConfig+0x39a>
 800299c:	4b65      	ldr	r3, [pc, #404]	; (8002b34 <HAL_RCC_OscConfig+0x520>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80029a4:	4a63      	ldr	r2, [pc, #396]	; (8002b34 <HAL_RCC_OscConfig+0x520>)
 80029a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80029aa:	6053      	str	r3, [r2, #4]
 80029ac:	e02e      	b.n	8002a0c <HAL_RCC_OscConfig+0x3f8>
 80029ae:	4b61      	ldr	r3, [pc, #388]	; (8002b34 <HAL_RCC_OscConfig+0x520>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	069b      	lsls	r3, r3, #26
 80029bc:	495d      	ldr	r1, [pc, #372]	; (8002b34 <HAL_RCC_OscConfig+0x520>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	604b      	str	r3, [r1, #4]
 80029c2:	e023      	b.n	8002a0c <HAL_RCC_OscConfig+0x3f8>
 80029c4:	4b5b      	ldr	r3, [pc, #364]	; (8002b34 <HAL_RCC_OscConfig+0x520>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	061b      	lsls	r3, r3, #24
 80029d2:	4958      	ldr	r1, [pc, #352]	; (8002b34 <HAL_RCC_OscConfig+0x520>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	60cb      	str	r3, [r1, #12]
 80029d8:	e018      	b.n	8002a0c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80029da:	4b56      	ldr	r3, [pc, #344]	; (8002b34 <HAL_RCC_OscConfig+0x520>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a55      	ldr	r2, [pc, #340]	; (8002b34 <HAL_RCC_OscConfig+0x520>)
 80029e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e6:	f7fd ffdf 	bl	80009a8 <HAL_GetTick>
 80029ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80029ee:	f7fd ffdb 	bl	80009a8 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e212      	b.n	8002e26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a00:	4b4c      	ldr	r3, [pc, #304]	; (8002b34 <HAL_RCC_OscConfig+0x520>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1f0      	bne.n	80029ee <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0308 	and.w	r3, r3, #8
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d036      	beq.n	8002a86 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d019      	beq.n	8002a54 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a20:	4b44      	ldr	r3, [pc, #272]	; (8002b34 <HAL_RCC_OscConfig+0x520>)
 8002a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a24:	4a43      	ldr	r2, [pc, #268]	; (8002b34 <HAL_RCC_OscConfig+0x520>)
 8002a26:	f043 0301 	orr.w	r3, r3, #1
 8002a2a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2c:	f7fd ffbc 	bl	80009a8 <HAL_GetTick>
 8002a30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a34:	f7fd ffb8 	bl	80009a8 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e1ef      	b.n	8002e26 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a46:	4b3b      	ldr	r3, [pc, #236]	; (8002b34 <HAL_RCC_OscConfig+0x520>)
 8002a48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0f0      	beq.n	8002a34 <HAL_RCC_OscConfig+0x420>
 8002a52:	e018      	b.n	8002a86 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a54:	4b37      	ldr	r3, [pc, #220]	; (8002b34 <HAL_RCC_OscConfig+0x520>)
 8002a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a58:	4a36      	ldr	r2, [pc, #216]	; (8002b34 <HAL_RCC_OscConfig+0x520>)
 8002a5a:	f023 0301 	bic.w	r3, r3, #1
 8002a5e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a60:	f7fd ffa2 	bl	80009a8 <HAL_GetTick>
 8002a64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a68:	f7fd ff9e 	bl	80009a8 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e1d5      	b.n	8002e26 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a7a:	4b2e      	ldr	r3, [pc, #184]	; (8002b34 <HAL_RCC_OscConfig+0x520>)
 8002a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f0      	bne.n	8002a68 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0320 	and.w	r3, r3, #32
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d036      	beq.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d019      	beq.n	8002ace <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a9a:	4b26      	ldr	r3, [pc, #152]	; (8002b34 <HAL_RCC_OscConfig+0x520>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a25      	ldr	r2, [pc, #148]	; (8002b34 <HAL_RCC_OscConfig+0x520>)
 8002aa0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002aa4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002aa6:	f7fd ff7f 	bl	80009a8 <HAL_GetTick>
 8002aaa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002aac:	e008      	b.n	8002ac0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002aae:	f7fd ff7b 	bl	80009a8 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e1b2      	b.n	8002e26 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ac0:	4b1c      	ldr	r3, [pc, #112]	; (8002b34 <HAL_RCC_OscConfig+0x520>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0f0      	beq.n	8002aae <HAL_RCC_OscConfig+0x49a>
 8002acc:	e018      	b.n	8002b00 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ace:	4b19      	ldr	r3, [pc, #100]	; (8002b34 <HAL_RCC_OscConfig+0x520>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a18      	ldr	r2, [pc, #96]	; (8002b34 <HAL_RCC_OscConfig+0x520>)
 8002ad4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ad8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ada:	f7fd ff65 	bl	80009a8 <HAL_GetTick>
 8002ade:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ae0:	e008      	b.n	8002af4 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002ae2:	f7fd ff61 	bl	80009a8 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e198      	b.n	8002e26 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002af4:	4b0f      	ldr	r3, [pc, #60]	; (8002b34 <HAL_RCC_OscConfig+0x520>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1f0      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 8085 	beq.w	8002c18 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b0e:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <HAL_RCC_OscConfig+0x524>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a09      	ldr	r2, [pc, #36]	; (8002b38 <HAL_RCC_OscConfig+0x524>)
 8002b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b1a:	f7fd ff45 	bl	80009a8 <HAL_GetTick>
 8002b1e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b20:	e00c      	b.n	8002b3c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002b22:	f7fd ff41 	bl	80009a8 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b64      	cmp	r3, #100	; 0x64
 8002b2e:	d905      	bls.n	8002b3c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e178      	b.n	8002e26 <HAL_RCC_OscConfig+0x812>
 8002b34:	58024400 	.word	0x58024400
 8002b38:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b3c:	4b96      	ldr	r3, [pc, #600]	; (8002d98 <HAL_RCC_OscConfig+0x784>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0ec      	beq.n	8002b22 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d106      	bne.n	8002b5e <HAL_RCC_OscConfig+0x54a>
 8002b50:	4b92      	ldr	r3, [pc, #584]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b54:	4a91      	ldr	r2, [pc, #580]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b5c:	e02d      	b.n	8002bba <HAL_RCC_OscConfig+0x5a6>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10c      	bne.n	8002b80 <HAL_RCC_OscConfig+0x56c>
 8002b66:	4b8d      	ldr	r3, [pc, #564]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6a:	4a8c      	ldr	r2, [pc, #560]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002b6c:	f023 0301 	bic.w	r3, r3, #1
 8002b70:	6713      	str	r3, [r2, #112]	; 0x70
 8002b72:	4b8a      	ldr	r3, [pc, #552]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b76:	4a89      	ldr	r2, [pc, #548]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002b78:	f023 0304 	bic.w	r3, r3, #4
 8002b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b7e:	e01c      	b.n	8002bba <HAL_RCC_OscConfig+0x5a6>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	2b05      	cmp	r3, #5
 8002b86:	d10c      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x58e>
 8002b88:	4b84      	ldr	r3, [pc, #528]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8c:	4a83      	ldr	r2, [pc, #524]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002b8e:	f043 0304 	orr.w	r3, r3, #4
 8002b92:	6713      	str	r3, [r2, #112]	; 0x70
 8002b94:	4b81      	ldr	r3, [pc, #516]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b98:	4a80      	ldr	r2, [pc, #512]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002b9a:	f043 0301 	orr.w	r3, r3, #1
 8002b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba0:	e00b      	b.n	8002bba <HAL_RCC_OscConfig+0x5a6>
 8002ba2:	4b7e      	ldr	r3, [pc, #504]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba6:	4a7d      	ldr	r2, [pc, #500]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002ba8:	f023 0301 	bic.w	r3, r3, #1
 8002bac:	6713      	str	r3, [r2, #112]	; 0x70
 8002bae:	4b7b      	ldr	r3, [pc, #492]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb2:	4a7a      	ldr	r2, [pc, #488]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002bb4:	f023 0304 	bic.w	r3, r3, #4
 8002bb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d015      	beq.n	8002bee <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc2:	f7fd fef1 	bl	80009a8 <HAL_GetTick>
 8002bc6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bc8:	e00a      	b.n	8002be0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bca:	f7fd feed 	bl	80009a8 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e122      	b.n	8002e26 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002be0:	4b6e      	ldr	r3, [pc, #440]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0ee      	beq.n	8002bca <HAL_RCC_OscConfig+0x5b6>
 8002bec:	e014      	b.n	8002c18 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bee:	f7fd fedb 	bl	80009a8 <HAL_GetTick>
 8002bf2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bf4:	e00a      	b.n	8002c0c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bf6:	f7fd fed7 	bl	80009a8 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e10c      	b.n	8002e26 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c0c:	4b63      	ldr	r3, [pc, #396]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1ee      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 8101 	beq.w	8002e24 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002c22:	4b5e      	ldr	r3, [pc, #376]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c2a:	2b18      	cmp	r3, #24
 8002c2c:	f000 80bc 	beq.w	8002da8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	f040 8095 	bne.w	8002d64 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c3a:	4b58      	ldr	r3, [pc, #352]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a57      	ldr	r2, [pc, #348]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002c40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c46:	f7fd feaf 	bl	80009a8 <HAL_GetTick>
 8002c4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c4e:	f7fd feab 	bl	80009a8 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e0e2      	b.n	8002e26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c60:	4b4e      	ldr	r3, [pc, #312]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1f0      	bne.n	8002c4e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c6c:	4b4b      	ldr	r3, [pc, #300]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002c6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c70:	4b4b      	ldr	r3, [pc, #300]	; (8002da0 <HAL_RCC_OscConfig+0x78c>)
 8002c72:	4013      	ands	r3, r2
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c7c:	0112      	lsls	r2, r2, #4
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	4946      	ldr	r1, [pc, #280]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	628b      	str	r3, [r1, #40]	; 0x28
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c94:	3b01      	subs	r3, #1
 8002c96:	025b      	lsls	r3, r3, #9
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	041b      	lsls	r3, r3, #16
 8002ca4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	061b      	lsls	r3, r3, #24
 8002cb2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002cb6:	4939      	ldr	r1, [pc, #228]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002cbc:	4b37      	ldr	r3, [pc, #220]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	4a36      	ldr	r2, [pc, #216]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002cc2:	f023 0301 	bic.w	r3, r3, #1
 8002cc6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002cc8:	4b34      	ldr	r3, [pc, #208]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002cca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ccc:	4b35      	ldr	r3, [pc, #212]	; (8002da4 <HAL_RCC_OscConfig+0x790>)
 8002cce:	4013      	ands	r3, r2
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002cd4:	00d2      	lsls	r2, r2, #3
 8002cd6:	4931      	ldr	r1, [pc, #196]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002cdc:	4b2f      	ldr	r3, [pc, #188]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce0:	f023 020c 	bic.w	r2, r3, #12
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce8:	492c      	ldr	r1, [pc, #176]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002cee:	4b2b      	ldr	r3, [pc, #172]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf2:	f023 0202 	bic.w	r2, r3, #2
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfa:	4928      	ldr	r1, [pc, #160]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d00:	4b26      	ldr	r3, [pc, #152]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d04:	4a25      	ldr	r2, [pc, #148]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d0c:	4b23      	ldr	r3, [pc, #140]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d10:	4a22      	ldr	r2, [pc, #136]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002d12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002d18:	4b20      	ldr	r3, [pc, #128]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1c:	4a1f      	ldr	r2, [pc, #124]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002d1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002d24:	4b1d      	ldr	r3, [pc, #116]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d28:	4a1c      	ldr	r2, [pc, #112]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002d2a:	f043 0301 	orr.w	r3, r3, #1
 8002d2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d30:	4b1a      	ldr	r3, [pc, #104]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a19      	ldr	r2, [pc, #100]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002d36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3c:	f7fd fe34 	bl	80009a8 <HAL_GetTick>
 8002d40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d44:	f7fd fe30 	bl	80009a8 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e067      	b.n	8002e26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d56:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0f0      	beq.n	8002d44 <HAL_RCC_OscConfig+0x730>
 8002d62:	e05f      	b.n	8002e24 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d64:	4b0d      	ldr	r3, [pc, #52]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a0c      	ldr	r2, [pc, #48]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002d6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d70:	f7fd fe1a 	bl	80009a8 <HAL_GetTick>
 8002d74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d78:	f7fd fe16 	bl	80009a8 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e04d      	b.n	8002e26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d8a:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <HAL_RCC_OscConfig+0x788>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f0      	bne.n	8002d78 <HAL_RCC_OscConfig+0x764>
 8002d96:	e045      	b.n	8002e24 <HAL_RCC_OscConfig+0x810>
 8002d98:	58024800 	.word	0x58024800
 8002d9c:	58024400 	.word	0x58024400
 8002da0:	fffffc0c 	.word	0xfffffc0c
 8002da4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002da8:	4b21      	ldr	r3, [pc, #132]	; (8002e30 <HAL_RCC_OscConfig+0x81c>)
 8002daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002dae:	4b20      	ldr	r3, [pc, #128]	; (8002e30 <HAL_RCC_OscConfig+0x81c>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d031      	beq.n	8002e20 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	f003 0203 	and.w	r2, r3, #3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d12a      	bne.n	8002e20 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	091b      	lsrs	r3, r3, #4
 8002dce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d122      	bne.n	8002e20 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d11a      	bne.n	8002e20 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	0a5b      	lsrs	r3, r3, #9
 8002dee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d111      	bne.n	8002e20 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	0c1b      	lsrs	r3, r3, #16
 8002e00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e08:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d108      	bne.n	8002e20 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	0e1b      	lsrs	r3, r3, #24
 8002e12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d001      	beq.n	8002e24 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e000      	b.n	8002e26 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3730      	adds	r7, #48	; 0x30
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	58024400 	.word	0x58024400

08002e34 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d101      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e19c      	b.n	8003182 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e48:	4b8a      	ldr	r3, [pc, #552]	; (8003074 <HAL_RCC_ClockConfig+0x240>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 030f 	and.w	r3, r3, #15
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d910      	bls.n	8002e78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e56:	4b87      	ldr	r3, [pc, #540]	; (8003074 <HAL_RCC_ClockConfig+0x240>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f023 020f 	bic.w	r2, r3, #15
 8002e5e:	4985      	ldr	r1, [pc, #532]	; (8003074 <HAL_RCC_ClockConfig+0x240>)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e66:	4b83      	ldr	r3, [pc, #524]	; (8003074 <HAL_RCC_ClockConfig+0x240>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 030f 	and.w	r3, r3, #15
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d001      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e184      	b.n	8003182 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d010      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	691a      	ldr	r2, [r3, #16]
 8002e88:	4b7b      	ldr	r3, [pc, #492]	; (8003078 <HAL_RCC_ClockConfig+0x244>)
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d908      	bls.n	8002ea6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e94:	4b78      	ldr	r3, [pc, #480]	; (8003078 <HAL_RCC_ClockConfig+0x244>)
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	4975      	ldr	r1, [pc, #468]	; (8003078 <HAL_RCC_ClockConfig+0x244>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d010      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	695a      	ldr	r2, [r3, #20]
 8002eb6:	4b70      	ldr	r3, [pc, #448]	; (8003078 <HAL_RCC_ClockConfig+0x244>)
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d908      	bls.n	8002ed4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ec2:	4b6d      	ldr	r3, [pc, #436]	; (8003078 <HAL_RCC_ClockConfig+0x244>)
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	496a      	ldr	r1, [pc, #424]	; (8003078 <HAL_RCC_ClockConfig+0x244>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0310 	and.w	r3, r3, #16
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d010      	beq.n	8002f02 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	699a      	ldr	r2, [r3, #24]
 8002ee4:	4b64      	ldr	r3, [pc, #400]	; (8003078 <HAL_RCC_ClockConfig+0x244>)
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d908      	bls.n	8002f02 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ef0:	4b61      	ldr	r3, [pc, #388]	; (8003078 <HAL_RCC_ClockConfig+0x244>)
 8002ef2:	69db      	ldr	r3, [r3, #28]
 8002ef4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	495e      	ldr	r1, [pc, #376]	; (8003078 <HAL_RCC_ClockConfig+0x244>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0320 	and.w	r3, r3, #32
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d010      	beq.n	8002f30 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69da      	ldr	r2, [r3, #28]
 8002f12:	4b59      	ldr	r3, [pc, #356]	; (8003078 <HAL_RCC_ClockConfig+0x244>)
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d908      	bls.n	8002f30 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002f1e:	4b56      	ldr	r3, [pc, #344]	; (8003078 <HAL_RCC_ClockConfig+0x244>)
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69db      	ldr	r3, [r3, #28]
 8002f2a:	4953      	ldr	r1, [pc, #332]	; (8003078 <HAL_RCC_ClockConfig+0x244>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d010      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68da      	ldr	r2, [r3, #12]
 8002f40:	4b4d      	ldr	r3, [pc, #308]	; (8003078 <HAL_RCC_ClockConfig+0x244>)
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	f003 030f 	and.w	r3, r3, #15
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d908      	bls.n	8002f5e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f4c:	4b4a      	ldr	r3, [pc, #296]	; (8003078 <HAL_RCC_ClockConfig+0x244>)
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	f023 020f 	bic.w	r2, r3, #15
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	4947      	ldr	r1, [pc, #284]	; (8003078 <HAL_RCC_ClockConfig+0x244>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d055      	beq.n	8003016 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002f6a:	4b43      	ldr	r3, [pc, #268]	; (8003078 <HAL_RCC_ClockConfig+0x244>)
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	4940      	ldr	r1, [pc, #256]	; (8003078 <HAL_RCC_ClockConfig+0x244>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d107      	bne.n	8002f94 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f84:	4b3c      	ldr	r3, [pc, #240]	; (8003078 <HAL_RCC_ClockConfig+0x244>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d121      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0f6      	b.n	8003182 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b03      	cmp	r3, #3
 8002f9a:	d107      	bne.n	8002fac <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f9c:	4b36      	ldr	r3, [pc, #216]	; (8003078 <HAL_RCC_ClockConfig+0x244>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d115      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e0ea      	b.n	8003182 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d107      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fb4:	4b30      	ldr	r3, [pc, #192]	; (8003078 <HAL_RCC_ClockConfig+0x244>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d109      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e0de      	b.n	8003182 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fc4:	4b2c      	ldr	r3, [pc, #176]	; (8003078 <HAL_RCC_ClockConfig+0x244>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e0d6      	b.n	8003182 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fd4:	4b28      	ldr	r3, [pc, #160]	; (8003078 <HAL_RCC_ClockConfig+0x244>)
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	f023 0207 	bic.w	r2, r3, #7
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	4925      	ldr	r1, [pc, #148]	; (8003078 <HAL_RCC_ClockConfig+0x244>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe6:	f7fd fcdf 	bl	80009a8 <HAL_GetTick>
 8002fea:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fec:	e00a      	b.n	8003004 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fee:	f7fd fcdb 	bl	80009a8 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e0be      	b.n	8003182 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003004:	4b1c      	ldr	r3, [pc, #112]	; (8003078 <HAL_RCC_ClockConfig+0x244>)
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	429a      	cmp	r2, r3
 8003014:	d1eb      	bne.n	8002fee <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d010      	beq.n	8003044 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	4b14      	ldr	r3, [pc, #80]	; (8003078 <HAL_RCC_ClockConfig+0x244>)
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	f003 030f 	and.w	r3, r3, #15
 800302e:	429a      	cmp	r2, r3
 8003030:	d208      	bcs.n	8003044 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003032:	4b11      	ldr	r3, [pc, #68]	; (8003078 <HAL_RCC_ClockConfig+0x244>)
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	f023 020f 	bic.w	r2, r3, #15
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	490e      	ldr	r1, [pc, #56]	; (8003078 <HAL_RCC_ClockConfig+0x244>)
 8003040:	4313      	orrs	r3, r2
 8003042:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003044:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <HAL_RCC_ClockConfig+0x240>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 030f 	and.w	r3, r3, #15
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	429a      	cmp	r2, r3
 8003050:	d214      	bcs.n	800307c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003052:	4b08      	ldr	r3, [pc, #32]	; (8003074 <HAL_RCC_ClockConfig+0x240>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f023 020f 	bic.w	r2, r3, #15
 800305a:	4906      	ldr	r1, [pc, #24]	; (8003074 <HAL_RCC_ClockConfig+0x240>)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	4313      	orrs	r3, r2
 8003060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003062:	4b04      	ldr	r3, [pc, #16]	; (8003074 <HAL_RCC_ClockConfig+0x240>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 030f 	and.w	r3, r3, #15
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	d005      	beq.n	800307c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e086      	b.n	8003182 <HAL_RCC_ClockConfig+0x34e>
 8003074:	52002000 	.word	0x52002000
 8003078:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	d010      	beq.n	80030aa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691a      	ldr	r2, [r3, #16]
 800308c:	4b3f      	ldr	r3, [pc, #252]	; (800318c <HAL_RCC_ClockConfig+0x358>)
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003094:	429a      	cmp	r2, r3
 8003096:	d208      	bcs.n	80030aa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003098:	4b3c      	ldr	r3, [pc, #240]	; (800318c <HAL_RCC_ClockConfig+0x358>)
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	4939      	ldr	r1, [pc, #228]	; (800318c <HAL_RCC_ClockConfig+0x358>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d010      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	695a      	ldr	r2, [r3, #20]
 80030ba:	4b34      	ldr	r3, [pc, #208]	; (800318c <HAL_RCC_ClockConfig+0x358>)
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d208      	bcs.n	80030d8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80030c6:	4b31      	ldr	r3, [pc, #196]	; (800318c <HAL_RCC_ClockConfig+0x358>)
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	492e      	ldr	r1, [pc, #184]	; (800318c <HAL_RCC_ClockConfig+0x358>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0310 	and.w	r3, r3, #16
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d010      	beq.n	8003106 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	699a      	ldr	r2, [r3, #24]
 80030e8:	4b28      	ldr	r3, [pc, #160]	; (800318c <HAL_RCC_ClockConfig+0x358>)
 80030ea:	69db      	ldr	r3, [r3, #28]
 80030ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d208      	bcs.n	8003106 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80030f4:	4b25      	ldr	r3, [pc, #148]	; (800318c <HAL_RCC_ClockConfig+0x358>)
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	4922      	ldr	r1, [pc, #136]	; (800318c <HAL_RCC_ClockConfig+0x358>)
 8003102:	4313      	orrs	r3, r2
 8003104:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0320 	and.w	r3, r3, #32
 800310e:	2b00      	cmp	r3, #0
 8003110:	d010      	beq.n	8003134 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69da      	ldr	r2, [r3, #28]
 8003116:	4b1d      	ldr	r3, [pc, #116]	; (800318c <HAL_RCC_ClockConfig+0x358>)
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800311e:	429a      	cmp	r2, r3
 8003120:	d208      	bcs.n	8003134 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003122:	4b1a      	ldr	r3, [pc, #104]	; (800318c <HAL_RCC_ClockConfig+0x358>)
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	4917      	ldr	r1, [pc, #92]	; (800318c <HAL_RCC_ClockConfig+0x358>)
 8003130:	4313      	orrs	r3, r2
 8003132:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003134:	f000 f834 	bl	80031a0 <HAL_RCC_GetSysClockFreq>
 8003138:	4602      	mov	r2, r0
 800313a:	4b14      	ldr	r3, [pc, #80]	; (800318c <HAL_RCC_ClockConfig+0x358>)
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	0a1b      	lsrs	r3, r3, #8
 8003140:	f003 030f 	and.w	r3, r3, #15
 8003144:	4912      	ldr	r1, [pc, #72]	; (8003190 <HAL_RCC_ClockConfig+0x35c>)
 8003146:	5ccb      	ldrb	r3, [r1, r3]
 8003148:	f003 031f 	and.w	r3, r3, #31
 800314c:	fa22 f303 	lsr.w	r3, r2, r3
 8003150:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003152:	4b0e      	ldr	r3, [pc, #56]	; (800318c <HAL_RCC_ClockConfig+0x358>)
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	4a0d      	ldr	r2, [pc, #52]	; (8003190 <HAL_RCC_ClockConfig+0x35c>)
 800315c:	5cd3      	ldrb	r3, [r2, r3]
 800315e:	f003 031f 	and.w	r3, r3, #31
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	fa22 f303 	lsr.w	r3, r2, r3
 8003168:	4a0a      	ldr	r2, [pc, #40]	; (8003194 <HAL_RCC_ClockConfig+0x360>)
 800316a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800316c:	4a0a      	ldr	r2, [pc, #40]	; (8003198 <HAL_RCC_ClockConfig+0x364>)
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003172:	4b0a      	ldr	r3, [pc, #40]	; (800319c <HAL_RCC_ClockConfig+0x368>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f7fd fbcc 	bl	8000914 <HAL_InitTick>
 800317c:	4603      	mov	r3, r0
 800317e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003180:	7bfb      	ldrb	r3, [r7, #15]
}
 8003182:	4618      	mov	r0, r3
 8003184:	3718      	adds	r7, #24
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	58024400 	.word	0x58024400
 8003190:	08005870 	.word	0x08005870
 8003194:	20000008 	.word	0x20000008
 8003198:	20000004 	.word	0x20000004
 800319c:	2000000c 	.word	0x2000000c

080031a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b089      	sub	sp, #36	; 0x24
 80031a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031a6:	4bb3      	ldr	r3, [pc, #716]	; (8003474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031ae:	2b18      	cmp	r3, #24
 80031b0:	f200 8155 	bhi.w	800345e <HAL_RCC_GetSysClockFreq+0x2be>
 80031b4:	a201      	add	r2, pc, #4	; (adr r2, 80031bc <HAL_RCC_GetSysClockFreq+0x1c>)
 80031b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ba:	bf00      	nop
 80031bc:	08003221 	.word	0x08003221
 80031c0:	0800345f 	.word	0x0800345f
 80031c4:	0800345f 	.word	0x0800345f
 80031c8:	0800345f 	.word	0x0800345f
 80031cc:	0800345f 	.word	0x0800345f
 80031d0:	0800345f 	.word	0x0800345f
 80031d4:	0800345f 	.word	0x0800345f
 80031d8:	0800345f 	.word	0x0800345f
 80031dc:	08003247 	.word	0x08003247
 80031e0:	0800345f 	.word	0x0800345f
 80031e4:	0800345f 	.word	0x0800345f
 80031e8:	0800345f 	.word	0x0800345f
 80031ec:	0800345f 	.word	0x0800345f
 80031f0:	0800345f 	.word	0x0800345f
 80031f4:	0800345f 	.word	0x0800345f
 80031f8:	0800345f 	.word	0x0800345f
 80031fc:	0800324d 	.word	0x0800324d
 8003200:	0800345f 	.word	0x0800345f
 8003204:	0800345f 	.word	0x0800345f
 8003208:	0800345f 	.word	0x0800345f
 800320c:	0800345f 	.word	0x0800345f
 8003210:	0800345f 	.word	0x0800345f
 8003214:	0800345f 	.word	0x0800345f
 8003218:	0800345f 	.word	0x0800345f
 800321c:	08003253 	.word	0x08003253
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003220:	4b94      	ldr	r3, [pc, #592]	; (8003474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0320 	and.w	r3, r3, #32
 8003228:	2b00      	cmp	r3, #0
 800322a:	d009      	beq.n	8003240 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800322c:	4b91      	ldr	r3, [pc, #580]	; (8003474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	08db      	lsrs	r3, r3, #3
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	4a90      	ldr	r2, [pc, #576]	; (8003478 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003238:	fa22 f303 	lsr.w	r3, r2, r3
 800323c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800323e:	e111      	b.n	8003464 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003240:	4b8d      	ldr	r3, [pc, #564]	; (8003478 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003242:	61bb      	str	r3, [r7, #24]
    break;
 8003244:	e10e      	b.n	8003464 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003246:	4b8d      	ldr	r3, [pc, #564]	; (800347c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003248:	61bb      	str	r3, [r7, #24]
    break;
 800324a:	e10b      	b.n	8003464 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800324c:	4b8c      	ldr	r3, [pc, #560]	; (8003480 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800324e:	61bb      	str	r3, [r7, #24]
    break;
 8003250:	e108      	b.n	8003464 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003252:	4b88      	ldr	r3, [pc, #544]	; (8003474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003256:	f003 0303 	and.w	r3, r3, #3
 800325a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800325c:	4b85      	ldr	r3, [pc, #532]	; (8003474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800325e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003260:	091b      	lsrs	r3, r3, #4
 8003262:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003266:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003268:	4b82      	ldr	r3, [pc, #520]	; (8003474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003272:	4b80      	ldr	r3, [pc, #512]	; (8003474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003276:	08db      	lsrs	r3, r3, #3
 8003278:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	fb02 f303 	mul.w	r3, r2, r3
 8003282:	ee07 3a90 	vmov	s15, r3
 8003286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800328a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 80e1 	beq.w	8003458 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	2b02      	cmp	r3, #2
 800329a:	f000 8083 	beq.w	80033a4 <HAL_RCC_GetSysClockFreq+0x204>
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	f200 80a1 	bhi.w	80033e8 <HAL_RCC_GetSysClockFreq+0x248>
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <HAL_RCC_GetSysClockFreq+0x114>
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d056      	beq.n	8003360 <HAL_RCC_GetSysClockFreq+0x1c0>
 80032b2:	e099      	b.n	80033e8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032b4:	4b6f      	ldr	r3, [pc, #444]	; (8003474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0320 	and.w	r3, r3, #32
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d02d      	beq.n	800331c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80032c0:	4b6c      	ldr	r3, [pc, #432]	; (8003474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	08db      	lsrs	r3, r3, #3
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	4a6b      	ldr	r2, [pc, #428]	; (8003478 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032cc:	fa22 f303 	lsr.w	r3, r2, r3
 80032d0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	ee07 3a90 	vmov	s15, r3
 80032d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	ee07 3a90 	vmov	s15, r3
 80032e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032ea:	4b62      	ldr	r3, [pc, #392]	; (8003474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032f2:	ee07 3a90 	vmov	s15, r3
 80032f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80032fe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003484 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800330a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800330e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003316:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800331a:	e087      	b.n	800342c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	ee07 3a90 	vmov	s15, r3
 8003322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003326:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003488 <HAL_RCC_GetSysClockFreq+0x2e8>
 800332a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800332e:	4b51      	ldr	r3, [pc, #324]	; (8003474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003336:	ee07 3a90 	vmov	s15, r3
 800333a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800333e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003342:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003484 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800334a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800334e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800335a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800335e:	e065      	b.n	800342c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	ee07 3a90 	vmov	s15, r3
 8003366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800336a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800348c <HAL_RCC_GetSysClockFreq+0x2ec>
 800336e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003372:	4b40      	ldr	r3, [pc, #256]	; (8003474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800337a:	ee07 3a90 	vmov	s15, r3
 800337e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003382:	ed97 6a02 	vldr	s12, [r7, #8]
 8003386:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003484 <HAL_RCC_GetSysClockFreq+0x2e4>
 800338a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800338e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800339a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800339e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033a2:	e043      	b.n	800342c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	ee07 3a90 	vmov	s15, r3
 80033aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ae:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003490 <HAL_RCC_GetSysClockFreq+0x2f0>
 80033b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033b6:	4b2f      	ldr	r3, [pc, #188]	; (8003474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033be:	ee07 3a90 	vmov	s15, r3
 80033c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80033ca:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003484 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033e6:	e021      	b.n	800342c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	ee07 3a90 	vmov	s15, r3
 80033ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033f2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800348c <HAL_RCC_GetSysClockFreq+0x2ec>
 80033f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033fa:	4b1e      	ldr	r3, [pc, #120]	; (8003474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003402:	ee07 3a90 	vmov	s15, r3
 8003406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800340a:	ed97 6a02 	vldr	s12, [r7, #8]
 800340e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003484 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800341a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800341e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003426:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800342a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800342c:	4b11      	ldr	r3, [pc, #68]	; (8003474 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800342e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003430:	0a5b      	lsrs	r3, r3, #9
 8003432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003436:	3301      	adds	r3, #1
 8003438:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	ee07 3a90 	vmov	s15, r3
 8003440:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003444:	edd7 6a07 	vldr	s13, [r7, #28]
 8003448:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800344c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003450:	ee17 3a90 	vmov	r3, s15
 8003454:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003456:	e005      	b.n	8003464 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003458:	2300      	movs	r3, #0
 800345a:	61bb      	str	r3, [r7, #24]
    break;
 800345c:	e002      	b.n	8003464 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800345e:	4b07      	ldr	r3, [pc, #28]	; (800347c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003460:	61bb      	str	r3, [r7, #24]
    break;
 8003462:	bf00      	nop
  }

  return sysclockfreq;
 8003464:	69bb      	ldr	r3, [r7, #24]
}
 8003466:	4618      	mov	r0, r3
 8003468:	3724      	adds	r7, #36	; 0x24
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	58024400 	.word	0x58024400
 8003478:	03d09000 	.word	0x03d09000
 800347c:	003d0900 	.word	0x003d0900
 8003480:	017d7840 	.word	0x017d7840
 8003484:	46000000 	.word	0x46000000
 8003488:	4c742400 	.word	0x4c742400
 800348c:	4a742400 	.word	0x4a742400
 8003490:	4bbebc20 	.word	0x4bbebc20

08003494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800349a:	f7ff fe81 	bl	80031a0 <HAL_RCC_GetSysClockFreq>
 800349e:	4602      	mov	r2, r0
 80034a0:	4b10      	ldr	r3, [pc, #64]	; (80034e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	0a1b      	lsrs	r3, r3, #8
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	490f      	ldr	r1, [pc, #60]	; (80034e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80034ac:	5ccb      	ldrb	r3, [r1, r3]
 80034ae:	f003 031f 	and.w	r3, r3, #31
 80034b2:	fa22 f303 	lsr.w	r3, r2, r3
 80034b6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034b8:	4b0a      	ldr	r3, [pc, #40]	; (80034e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	f003 030f 	and.w	r3, r3, #15
 80034c0:	4a09      	ldr	r2, [pc, #36]	; (80034e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80034c2:	5cd3      	ldrb	r3, [r2, r3]
 80034c4:	f003 031f 	and.w	r3, r3, #31
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	fa22 f303 	lsr.w	r3, r2, r3
 80034ce:	4a07      	ldr	r2, [pc, #28]	; (80034ec <HAL_RCC_GetHCLKFreq+0x58>)
 80034d0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034d2:	4a07      	ldr	r2, [pc, #28]	; (80034f0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80034d8:	4b04      	ldr	r3, [pc, #16]	; (80034ec <HAL_RCC_GetHCLKFreq+0x58>)
 80034da:	681b      	ldr	r3, [r3, #0]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	58024400 	.word	0x58024400
 80034e8:	08005870 	.word	0x08005870
 80034ec:	20000008 	.word	0x20000008
 80034f0:	20000004 	.word	0x20000004

080034f4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034fc:	2300      	movs	r3, #0
 80034fe:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003500:	2300      	movs	r3, #0
 8003502:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d03f      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003514:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003518:	d02a      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800351a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800351e:	d824      	bhi.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003520:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003524:	d018      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003526:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800352a:	d81e      	bhi.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003530:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003534:	d007      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003536:	e018      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003538:	4bab      	ldr	r3, [pc, #684]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800353a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353c:	4aaa      	ldr	r2, [pc, #680]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800353e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003542:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003544:	e015      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	3304      	adds	r3, #4
 800354a:	2102      	movs	r1, #2
 800354c:	4618      	mov	r0, r3
 800354e:	f001 fff3 	bl	8005538 <RCCEx_PLL2_Config>
 8003552:	4603      	mov	r3, r0
 8003554:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003556:	e00c      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3324      	adds	r3, #36	; 0x24
 800355c:	2102      	movs	r1, #2
 800355e:	4618      	mov	r0, r3
 8003560:	f002 f89c 	bl	800569c <RCCEx_PLL3_Config>
 8003564:	4603      	mov	r3, r0
 8003566:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003568:	e003      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	75fb      	strb	r3, [r7, #23]
      break;
 800356e:	e000      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003570:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003572:	7dfb      	ldrb	r3, [r7, #23]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d109      	bne.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003578:	4b9b      	ldr	r3, [pc, #620]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800357a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800357c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003584:	4998      	ldr	r1, [pc, #608]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003586:	4313      	orrs	r3, r2
 8003588:	650b      	str	r3, [r1, #80]	; 0x50
 800358a:	e001      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800358c:	7dfb      	ldrb	r3, [r7, #23]
 800358e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003598:	2b00      	cmp	r3, #0
 800359a:	d03d      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a0:	2b04      	cmp	r3, #4
 80035a2:	d826      	bhi.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80035a4:	a201      	add	r2, pc, #4	; (adr r2, 80035ac <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80035a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035aa:	bf00      	nop
 80035ac:	080035c1 	.word	0x080035c1
 80035b0:	080035cf 	.word	0x080035cf
 80035b4:	080035e1 	.word	0x080035e1
 80035b8:	080035f9 	.word	0x080035f9
 80035bc:	080035f9 	.word	0x080035f9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035c0:	4b89      	ldr	r3, [pc, #548]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c4:	4a88      	ldr	r2, [pc, #544]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035cc:	e015      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	3304      	adds	r3, #4
 80035d2:	2100      	movs	r1, #0
 80035d4:	4618      	mov	r0, r3
 80035d6:	f001 ffaf 	bl	8005538 <RCCEx_PLL2_Config>
 80035da:	4603      	mov	r3, r0
 80035dc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035de:	e00c      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3324      	adds	r3, #36	; 0x24
 80035e4:	2100      	movs	r1, #0
 80035e6:	4618      	mov	r0, r3
 80035e8:	f002 f858 	bl	800569c <RCCEx_PLL3_Config>
 80035ec:	4603      	mov	r3, r0
 80035ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035f0:	e003      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	75fb      	strb	r3, [r7, #23]
      break;
 80035f6:	e000      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80035f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035fa:	7dfb      	ldrb	r3, [r7, #23]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d109      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003600:	4b79      	ldr	r3, [pc, #484]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003604:	f023 0207 	bic.w	r2, r3, #7
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360c:	4976      	ldr	r1, [pc, #472]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800360e:	4313      	orrs	r3, r2
 8003610:	650b      	str	r3, [r1, #80]	; 0x50
 8003612:	e001      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003614:	7dfb      	ldrb	r3, [r7, #23]
 8003616:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003620:	2b00      	cmp	r3, #0
 8003622:	d042      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800362c:	d02b      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800362e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003632:	d825      	bhi.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003634:	2bc0      	cmp	r3, #192	; 0xc0
 8003636:	d028      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003638:	2bc0      	cmp	r3, #192	; 0xc0
 800363a:	d821      	bhi.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800363c:	2b80      	cmp	r3, #128	; 0x80
 800363e:	d016      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003640:	2b80      	cmp	r3, #128	; 0x80
 8003642:	d81d      	bhi.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003648:	2b40      	cmp	r3, #64	; 0x40
 800364a:	d007      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800364c:	e018      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800364e:	4b66      	ldr	r3, [pc, #408]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003652:	4a65      	ldr	r2, [pc, #404]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003658:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800365a:	e017      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3304      	adds	r3, #4
 8003660:	2100      	movs	r1, #0
 8003662:	4618      	mov	r0, r3
 8003664:	f001 ff68 	bl	8005538 <RCCEx_PLL2_Config>
 8003668:	4603      	mov	r3, r0
 800366a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800366c:	e00e      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	3324      	adds	r3, #36	; 0x24
 8003672:	2100      	movs	r1, #0
 8003674:	4618      	mov	r0, r3
 8003676:	f002 f811 	bl	800569c <RCCEx_PLL3_Config>
 800367a:	4603      	mov	r3, r0
 800367c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800367e:	e005      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	75fb      	strb	r3, [r7, #23]
      break;
 8003684:	e002      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003686:	bf00      	nop
 8003688:	e000      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800368a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800368c:	7dfb      	ldrb	r3, [r7, #23]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d109      	bne.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003692:	4b55      	ldr	r3, [pc, #340]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003696:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369e:	4952      	ldr	r1, [pc, #328]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	650b      	str	r3, [r1, #80]	; 0x50
 80036a4:	e001      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a6:	7dfb      	ldrb	r3, [r7, #23]
 80036a8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d049      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80036bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036c0:	d030      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80036c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036c6:	d82a      	bhi.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80036c8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80036cc:	d02c      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80036ce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80036d2:	d824      	bhi.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80036d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036d8:	d018      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x218>
 80036da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036de:	d81e      	bhi.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d003      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80036e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036e8:	d007      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x206>
 80036ea:	e018      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036ec:	4b3e      	ldr	r3, [pc, #248]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f0:	4a3d      	ldr	r2, [pc, #244]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036f8:	e017      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	3304      	adds	r3, #4
 80036fe:	2100      	movs	r1, #0
 8003700:	4618      	mov	r0, r3
 8003702:	f001 ff19 	bl	8005538 <RCCEx_PLL2_Config>
 8003706:	4603      	mov	r3, r0
 8003708:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800370a:	e00e      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3324      	adds	r3, #36	; 0x24
 8003710:	2100      	movs	r1, #0
 8003712:	4618      	mov	r0, r3
 8003714:	f001 ffc2 	bl	800569c <RCCEx_PLL3_Config>
 8003718:	4603      	mov	r3, r0
 800371a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800371c:	e005      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	75fb      	strb	r3, [r7, #23]
      break;
 8003722:	e002      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003724:	bf00      	nop
 8003726:	e000      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003728:	bf00      	nop
    }

    if(ret == HAL_OK)
 800372a:	7dfb      	ldrb	r3, [r7, #23]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10a      	bne.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003730:	4b2d      	ldr	r3, [pc, #180]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003734:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800373e:	492a      	ldr	r1, [pc, #168]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003740:	4313      	orrs	r3, r2
 8003742:	658b      	str	r3, [r1, #88]	; 0x58
 8003744:	e001      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003746:	7dfb      	ldrb	r3, [r7, #23]
 8003748:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003752:	2b00      	cmp	r3, #0
 8003754:	d04c      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800375c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003760:	d030      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003762:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003766:	d82a      	bhi.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003768:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800376c:	d02c      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800376e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003772:	d824      	bhi.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003774:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003778:	d018      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800377a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800377e:	d81e      	bhi.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003780:	2b00      	cmp	r3, #0
 8003782:	d003      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003784:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003788:	d007      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800378a:	e018      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800378c:	4b16      	ldr	r3, [pc, #88]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800378e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003790:	4a15      	ldr	r2, [pc, #84]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003796:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003798:	e017      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	3304      	adds	r3, #4
 800379e:	2100      	movs	r1, #0
 80037a0:	4618      	mov	r0, r3
 80037a2:	f001 fec9 	bl	8005538 <RCCEx_PLL2_Config>
 80037a6:	4603      	mov	r3, r0
 80037a8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80037aa:	e00e      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3324      	adds	r3, #36	; 0x24
 80037b0:	2100      	movs	r1, #0
 80037b2:	4618      	mov	r0, r3
 80037b4:	f001 ff72 	bl	800569c <RCCEx_PLL3_Config>
 80037b8:	4603      	mov	r3, r0
 80037ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037bc:	e005      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	75fb      	strb	r3, [r7, #23]
      break;
 80037c2:	e002      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80037c4:	bf00      	nop
 80037c6:	e000      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80037c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037ca:	7dfb      	ldrb	r3, [r7, #23]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10d      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80037d0:	4b05      	ldr	r3, [pc, #20]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80037de:	4902      	ldr	r1, [pc, #8]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	658b      	str	r3, [r1, #88]	; 0x58
 80037e4:	e004      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80037e6:	bf00      	nop
 80037e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ec:	7dfb      	ldrb	r3, [r7, #23]
 80037ee:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d032      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003800:	2b30      	cmp	r3, #48	; 0x30
 8003802:	d01c      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003804:	2b30      	cmp	r3, #48	; 0x30
 8003806:	d817      	bhi.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003808:	2b20      	cmp	r3, #32
 800380a:	d00c      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800380c:	2b20      	cmp	r3, #32
 800380e:	d813      	bhi.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003810:	2b00      	cmp	r3, #0
 8003812:	d016      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003814:	2b10      	cmp	r3, #16
 8003816:	d10f      	bne.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003818:	4baf      	ldr	r3, [pc, #700]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	4aae      	ldr	r2, [pc, #696]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800381e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003822:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003824:	e00e      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	3304      	adds	r3, #4
 800382a:	2102      	movs	r1, #2
 800382c:	4618      	mov	r0, r3
 800382e:	f001 fe83 	bl	8005538 <RCCEx_PLL2_Config>
 8003832:	4603      	mov	r3, r0
 8003834:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003836:	e005      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	75fb      	strb	r3, [r7, #23]
      break;
 800383c:	e002      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800383e:	bf00      	nop
 8003840:	e000      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003842:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003844:	7dfb      	ldrb	r3, [r7, #23]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d109      	bne.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800384a:	4ba3      	ldr	r3, [pc, #652]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800384c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800384e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003856:	49a0      	ldr	r1, [pc, #640]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003858:	4313      	orrs	r3, r2
 800385a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800385c:	e001      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800385e:	7dfb      	ldrb	r3, [r7, #23]
 8003860:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d047      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003872:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003876:	d030      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003878:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800387c:	d82a      	bhi.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800387e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003882:	d02c      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003884:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003888:	d824      	bhi.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800388a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800388e:	d018      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003890:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003894:	d81e      	bhi.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800389a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800389e:	d007      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80038a0:	e018      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038a2:	4b8d      	ldr	r3, [pc, #564]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80038a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a6:	4a8c      	ldr	r2, [pc, #560]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80038a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80038ae:	e017      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3304      	adds	r3, #4
 80038b4:	2100      	movs	r1, #0
 80038b6:	4618      	mov	r0, r3
 80038b8:	f001 fe3e 	bl	8005538 <RCCEx_PLL2_Config>
 80038bc:	4603      	mov	r3, r0
 80038be:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80038c0:	e00e      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	3324      	adds	r3, #36	; 0x24
 80038c6:	2100      	movs	r1, #0
 80038c8:	4618      	mov	r0, r3
 80038ca:	f001 fee7 	bl	800569c <RCCEx_PLL3_Config>
 80038ce:	4603      	mov	r3, r0
 80038d0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80038d2:	e005      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	75fb      	strb	r3, [r7, #23]
      break;
 80038d8:	e002      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80038da:	bf00      	nop
 80038dc:	e000      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80038de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038e0:	7dfb      	ldrb	r3, [r7, #23]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d109      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80038e6:	4b7c      	ldr	r3, [pc, #496]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80038e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ea:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f2:	4979      	ldr	r1, [pc, #484]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	650b      	str	r3, [r1, #80]	; 0x50
 80038f8:	e001      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038fa:	7dfb      	ldrb	r3, [r7, #23]
 80038fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d049      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800390e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003912:	d02e      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003914:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003918:	d828      	bhi.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800391a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800391e:	d02a      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003920:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003924:	d822      	bhi.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003926:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800392a:	d026      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800392c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003930:	d81c      	bhi.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003932:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003936:	d010      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003938:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800393c:	d816      	bhi.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800393e:	2b00      	cmp	r3, #0
 8003940:	d01d      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003946:	d111      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3304      	adds	r3, #4
 800394c:	2101      	movs	r1, #1
 800394e:	4618      	mov	r0, r3
 8003950:	f001 fdf2 	bl	8005538 <RCCEx_PLL2_Config>
 8003954:	4603      	mov	r3, r0
 8003956:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003958:	e012      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3324      	adds	r3, #36	; 0x24
 800395e:	2101      	movs	r1, #1
 8003960:	4618      	mov	r0, r3
 8003962:	f001 fe9b 	bl	800569c <RCCEx_PLL3_Config>
 8003966:	4603      	mov	r3, r0
 8003968:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800396a:	e009      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	75fb      	strb	r3, [r7, #23]
      break;
 8003970:	e006      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003972:	bf00      	nop
 8003974:	e004      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003976:	bf00      	nop
 8003978:	e002      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800397a:	bf00      	nop
 800397c:	e000      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800397e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003980:	7dfb      	ldrb	r3, [r7, #23]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d109      	bne.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003986:	4b54      	ldr	r3, [pc, #336]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800398a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003992:	4951      	ldr	r1, [pc, #324]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003994:	4313      	orrs	r3, r2
 8003996:	650b      	str	r3, [r1, #80]	; 0x50
 8003998:	e001      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800399a:	7dfb      	ldrb	r3, [r7, #23]
 800399c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d04b      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80039b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039b4:	d02e      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80039b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039ba:	d828      	bhi.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80039bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c0:	d02a      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80039c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c6:	d822      	bhi.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80039c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039cc:	d026      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x528>
 80039ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039d2:	d81c      	bhi.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80039d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039d8:	d010      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x508>
 80039da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039de:	d816      	bhi.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d01d      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80039e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039e8:	d111      	bne.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	3304      	adds	r3, #4
 80039ee:	2101      	movs	r1, #1
 80039f0:	4618      	mov	r0, r3
 80039f2:	f001 fda1 	bl	8005538 <RCCEx_PLL2_Config>
 80039f6:	4603      	mov	r3, r0
 80039f8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80039fa:	e012      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3324      	adds	r3, #36	; 0x24
 8003a00:	2101      	movs	r1, #1
 8003a02:	4618      	mov	r0, r3
 8003a04:	f001 fe4a 	bl	800569c <RCCEx_PLL3_Config>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003a0c:	e009      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	75fb      	strb	r3, [r7, #23]
      break;
 8003a12:	e006      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003a14:	bf00      	nop
 8003a16:	e004      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003a18:	bf00      	nop
 8003a1a:	e002      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003a1c:	bf00      	nop
 8003a1e:	e000      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003a20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a22:	7dfb      	ldrb	r3, [r7, #23]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10a      	bne.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003a28:	4b2b      	ldr	r3, [pc, #172]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a36:	4928      	ldr	r1, [pc, #160]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	658b      	str	r3, [r1, #88]	; 0x58
 8003a3c:	e001      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a3e:	7dfb      	ldrb	r3, [r7, #23]
 8003a40:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d02f      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a56:	d00e      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003a58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a5c:	d814      	bhi.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d015      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003a62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a66:	d10f      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a68:	4b1b      	ldr	r3, [pc, #108]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6c:	4a1a      	ldr	r2, [pc, #104]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a74:	e00c      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3304      	adds	r3, #4
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f001 fd5b 	bl	8005538 <RCCEx_PLL2_Config>
 8003a82:	4603      	mov	r3, r0
 8003a84:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a86:	e003      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a8c:	e000      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003a8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a90:	7dfb      	ldrb	r3, [r7, #23]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d109      	bne.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a96:	4b10      	ldr	r3, [pc, #64]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aa2:	490d      	ldr	r1, [pc, #52]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	650b      	str	r3, [r1, #80]	; 0x50
 8003aa8:	e001      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aaa:	7dfb      	ldrb	r3, [r7, #23]
 8003aac:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d033      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abe:	2b03      	cmp	r3, #3
 8003ac0:	d81c      	bhi.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003ac2:	a201      	add	r2, pc, #4	; (adr r2, 8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac8:	08003b03 	.word	0x08003b03
 8003acc:	08003add 	.word	0x08003add
 8003ad0:	08003aeb 	.word	0x08003aeb
 8003ad4:	08003b03 	.word	0x08003b03
 8003ad8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003adc:	4bb8      	ldr	r3, [pc, #736]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae0:	4ab7      	ldr	r2, [pc, #732]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ae6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003ae8:	e00c      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	3304      	adds	r3, #4
 8003aee:	2102      	movs	r1, #2
 8003af0:	4618      	mov	r0, r3
 8003af2:	f001 fd21 	bl	8005538 <RCCEx_PLL2_Config>
 8003af6:	4603      	mov	r3, r0
 8003af8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003afa:	e003      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	75fb      	strb	r3, [r7, #23]
      break;
 8003b00:	e000      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003b02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b04:	7dfb      	ldrb	r3, [r7, #23]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d109      	bne.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b0a:	4bad      	ldr	r3, [pc, #692]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b0e:	f023 0203 	bic.w	r2, r3, #3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b16:	49aa      	ldr	r1, [pc, #680]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b1c:	e001      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b1e:	7dfb      	ldrb	r3, [r7, #23]
 8003b20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f000 8086 	beq.w	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b30:	4ba4      	ldr	r3, [pc, #656]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4aa3      	ldr	r2, [pc, #652]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b3c:	f7fc ff34 	bl	80009a8 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b42:	e009      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b44:	f7fc ff30 	bl	80009a8 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b64      	cmp	r3, #100	; 0x64
 8003b50:	d902      	bls.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	75fb      	strb	r3, [r7, #23]
        break;
 8003b56:	e005      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b58:	4b9a      	ldr	r3, [pc, #616]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0ef      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003b64:	7dfb      	ldrb	r3, [r7, #23]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d166      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b6a:	4b95      	ldr	r3, [pc, #596]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b74:	4053      	eors	r3, r2
 8003b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d013      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b7e:	4b90      	ldr	r3, [pc, #576]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b86:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b88:	4b8d      	ldr	r3, [pc, #564]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8c:	4a8c      	ldr	r2, [pc, #560]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b92:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b94:	4b8a      	ldr	r3, [pc, #552]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b98:	4a89      	ldr	r2, [pc, #548]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b9e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003ba0:	4a87      	ldr	r2, [pc, #540]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bb0:	d115      	bne.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb2:	f7fc fef9 	bl	80009a8 <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bb8:	e00b      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bba:	f7fc fef5 	bl	80009a8 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d902      	bls.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	75fb      	strb	r3, [r7, #23]
            break;
 8003bd0:	e005      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bd2:	4b7b      	ldr	r3, [pc, #492]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0ed      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003bde:	7dfb      	ldrb	r3, [r7, #23]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d126      	bne.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bf2:	d10d      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003bf4:	4b72      	ldr	r3, [pc, #456]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c02:	0919      	lsrs	r1, r3, #4
 8003c04:	4b70      	ldr	r3, [pc, #448]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003c06:	400b      	ands	r3, r1
 8003c08:	496d      	ldr	r1, [pc, #436]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	610b      	str	r3, [r1, #16]
 8003c0e:	e005      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003c10:	4b6b      	ldr	r3, [pc, #428]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	4a6a      	ldr	r2, [pc, #424]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c16:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c1a:	6113      	str	r3, [r2, #16]
 8003c1c:	4b68      	ldr	r3, [pc, #416]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c2a:	4965      	ldr	r1, [pc, #404]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	670b      	str	r3, [r1, #112]	; 0x70
 8003c30:	e004      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c32:	7dfb      	ldrb	r3, [r7, #23]
 8003c34:	75bb      	strb	r3, [r7, #22]
 8003c36:	e001      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c38:	7dfb      	ldrb	r3, [r7, #23]
 8003c3a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d07e      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c4c:	2b28      	cmp	r3, #40	; 0x28
 8003c4e:	d867      	bhi.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003c50:	a201      	add	r2, pc, #4	; (adr r2, 8003c58 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c56:	bf00      	nop
 8003c58:	08003d27 	.word	0x08003d27
 8003c5c:	08003d21 	.word	0x08003d21
 8003c60:	08003d21 	.word	0x08003d21
 8003c64:	08003d21 	.word	0x08003d21
 8003c68:	08003d21 	.word	0x08003d21
 8003c6c:	08003d21 	.word	0x08003d21
 8003c70:	08003d21 	.word	0x08003d21
 8003c74:	08003d21 	.word	0x08003d21
 8003c78:	08003cfd 	.word	0x08003cfd
 8003c7c:	08003d21 	.word	0x08003d21
 8003c80:	08003d21 	.word	0x08003d21
 8003c84:	08003d21 	.word	0x08003d21
 8003c88:	08003d21 	.word	0x08003d21
 8003c8c:	08003d21 	.word	0x08003d21
 8003c90:	08003d21 	.word	0x08003d21
 8003c94:	08003d21 	.word	0x08003d21
 8003c98:	08003d0f 	.word	0x08003d0f
 8003c9c:	08003d21 	.word	0x08003d21
 8003ca0:	08003d21 	.word	0x08003d21
 8003ca4:	08003d21 	.word	0x08003d21
 8003ca8:	08003d21 	.word	0x08003d21
 8003cac:	08003d21 	.word	0x08003d21
 8003cb0:	08003d21 	.word	0x08003d21
 8003cb4:	08003d21 	.word	0x08003d21
 8003cb8:	08003d27 	.word	0x08003d27
 8003cbc:	08003d21 	.word	0x08003d21
 8003cc0:	08003d21 	.word	0x08003d21
 8003cc4:	08003d21 	.word	0x08003d21
 8003cc8:	08003d21 	.word	0x08003d21
 8003ccc:	08003d21 	.word	0x08003d21
 8003cd0:	08003d21 	.word	0x08003d21
 8003cd4:	08003d21 	.word	0x08003d21
 8003cd8:	08003d27 	.word	0x08003d27
 8003cdc:	08003d21 	.word	0x08003d21
 8003ce0:	08003d21 	.word	0x08003d21
 8003ce4:	08003d21 	.word	0x08003d21
 8003ce8:	08003d21 	.word	0x08003d21
 8003cec:	08003d21 	.word	0x08003d21
 8003cf0:	08003d21 	.word	0x08003d21
 8003cf4:	08003d21 	.word	0x08003d21
 8003cf8:	08003d27 	.word	0x08003d27
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3304      	adds	r3, #4
 8003d00:	2101      	movs	r1, #1
 8003d02:	4618      	mov	r0, r3
 8003d04:	f001 fc18 	bl	8005538 <RCCEx_PLL2_Config>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003d0c:	e00c      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3324      	adds	r3, #36	; 0x24
 8003d12:	2101      	movs	r1, #1
 8003d14:	4618      	mov	r0, r3
 8003d16:	f001 fcc1 	bl	800569c <RCCEx_PLL3_Config>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003d1e:	e003      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	75fb      	strb	r3, [r7, #23]
      break;
 8003d24:	e000      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8003d26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d28:	7dfb      	ldrb	r3, [r7, #23]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d109      	bne.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d2e:	4b24      	ldr	r3, [pc, #144]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d32:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d3a:	4921      	ldr	r1, [pc, #132]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	654b      	str	r3, [r1, #84]	; 0x54
 8003d40:	e001      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d42:	7dfb      	ldrb	r3, [r7, #23]
 8003d44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d03e      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d56:	2b05      	cmp	r3, #5
 8003d58:	d820      	bhi.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003d5a:	a201      	add	r2, pc, #4	; (adr r2, 8003d60 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d60:	08003da3 	.word	0x08003da3
 8003d64:	08003d79 	.word	0x08003d79
 8003d68:	08003d8b 	.word	0x08003d8b
 8003d6c:	08003da3 	.word	0x08003da3
 8003d70:	08003da3 	.word	0x08003da3
 8003d74:	08003da3 	.word	0x08003da3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f001 fbda 	bl	8005538 <RCCEx_PLL2_Config>
 8003d84:	4603      	mov	r3, r0
 8003d86:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003d88:	e00c      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	3324      	adds	r3, #36	; 0x24
 8003d8e:	2101      	movs	r1, #1
 8003d90:	4618      	mov	r0, r3
 8003d92:	f001 fc83 	bl	800569c <RCCEx_PLL3_Config>
 8003d96:	4603      	mov	r3, r0
 8003d98:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003d9a:	e003      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	75fb      	strb	r3, [r7, #23]
      break;
 8003da0:	e000      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8003da2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003da4:	7dfb      	ldrb	r3, [r7, #23]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d110      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003daa:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dae:	f023 0207 	bic.w	r2, r3, #7
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003db6:	4902      	ldr	r1, [pc, #8]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	654b      	str	r3, [r1, #84]	; 0x54
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8003dbe:	bf00      	nop
 8003dc0:	58024400 	.word	0x58024400
 8003dc4:	58024800 	.word	0x58024800
 8003dc8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dcc:	7dfb      	ldrb	r3, [r7, #23]
 8003dce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d039      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de2:	2b05      	cmp	r3, #5
 8003de4:	d820      	bhi.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8003de6:	a201      	add	r2, pc, #4	; (adr r2, 8003dec <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8003de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dec:	08003e2f 	.word	0x08003e2f
 8003df0:	08003e05 	.word	0x08003e05
 8003df4:	08003e17 	.word	0x08003e17
 8003df8:	08003e2f 	.word	0x08003e2f
 8003dfc:	08003e2f 	.word	0x08003e2f
 8003e00:	08003e2f 	.word	0x08003e2f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3304      	adds	r3, #4
 8003e08:	2101      	movs	r1, #1
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f001 fb94 	bl	8005538 <RCCEx_PLL2_Config>
 8003e10:	4603      	mov	r3, r0
 8003e12:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003e14:	e00c      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	3324      	adds	r3, #36	; 0x24
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f001 fc3d 	bl	800569c <RCCEx_PLL3_Config>
 8003e22:	4603      	mov	r3, r0
 8003e24:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003e26:	e003      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e2c:	e000      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003e2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e30:	7dfb      	ldrb	r3, [r7, #23]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10a      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e36:	4bb7      	ldr	r3, [pc, #732]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3a:	f023 0207 	bic.w	r2, r3, #7
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e44:	49b3      	ldr	r1, [pc, #716]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	658b      	str	r3, [r1, #88]	; 0x58
 8003e4a:	e001      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e4c:	7dfb      	ldrb	r3, [r7, #23]
 8003e4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0320 	and.w	r3, r3, #32
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d04b      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e66:	d02e      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003e68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e6c:	d828      	bhi.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e72:	d02a      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e78:	d822      	bhi.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003e7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e7e:	d026      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003e80:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e84:	d81c      	bhi.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003e86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e8a:	d010      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003e8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e90:	d816      	bhi.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d01d      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003e96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e9a:	d111      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f001 fb48 	bl	8005538 <RCCEx_PLL2_Config>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003eac:	e012      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3324      	adds	r3, #36	; 0x24
 8003eb2:	2102      	movs	r1, #2
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f001 fbf1 	bl	800569c <RCCEx_PLL3_Config>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003ebe:	e009      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ec4:	e006      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003ec6:	bf00      	nop
 8003ec8:	e004      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003eca:	bf00      	nop
 8003ecc:	e002      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003ece:	bf00      	nop
 8003ed0:	e000      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003ed2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ed4:	7dfb      	ldrb	r3, [r7, #23]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10a      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eda:	4b8e      	ldr	r3, [pc, #568]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ede:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ee8:	498a      	ldr	r1, [pc, #552]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	654b      	str	r3, [r1, #84]	; 0x54
 8003eee:	e001      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef0:	7dfb      	ldrb	r3, [r7, #23]
 8003ef2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d04b      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f06:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f0a:	d02e      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8003f0c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f10:	d828      	bhi.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f16:	d02a      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f1c:	d822      	bhi.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003f1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f22:	d026      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003f24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f28:	d81c      	bhi.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003f2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f2e:	d010      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003f30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f34:	d816      	bhi.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d01d      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f3e:	d111      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	3304      	adds	r3, #4
 8003f44:	2100      	movs	r1, #0
 8003f46:	4618      	mov	r0, r3
 8003f48:	f001 faf6 	bl	8005538 <RCCEx_PLL2_Config>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f50:	e012      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3324      	adds	r3, #36	; 0x24
 8003f56:	2102      	movs	r1, #2
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f001 fb9f 	bl	800569c <RCCEx_PLL3_Config>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f62:	e009      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	75fb      	strb	r3, [r7, #23]
      break;
 8003f68:	e006      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003f6a:	bf00      	nop
 8003f6c:	e004      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003f6e:	bf00      	nop
 8003f70:	e002      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003f72:	bf00      	nop
 8003f74:	e000      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003f76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f78:	7dfb      	ldrb	r3, [r7, #23]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10a      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f7e:	4b65      	ldr	r3, [pc, #404]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f82:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f8c:	4961      	ldr	r1, [pc, #388]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	658b      	str	r3, [r1, #88]	; 0x58
 8003f92:	e001      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f94:	7dfb      	ldrb	r3, [r7, #23]
 8003f96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d04b      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003faa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003fae:	d02e      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8003fb0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003fb4:	d828      	bhi.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003fb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fba:	d02a      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8003fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fc0:	d822      	bhi.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003fc2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003fc6:	d026      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003fc8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003fcc:	d81c      	bhi.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003fce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fd2:	d010      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8003fd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fd8:	d816      	bhi.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d01d      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe2:	d111      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	2100      	movs	r1, #0
 8003fea:	4618      	mov	r0, r3
 8003fec:	f001 faa4 	bl	8005538 <RCCEx_PLL2_Config>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003ff4:	e012      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	3324      	adds	r3, #36	; 0x24
 8003ffa:	2102      	movs	r1, #2
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f001 fb4d 	bl	800569c <RCCEx_PLL3_Config>
 8004002:	4603      	mov	r3, r0
 8004004:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004006:	e009      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	75fb      	strb	r3, [r7, #23]
      break;
 800400c:	e006      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800400e:	bf00      	nop
 8004010:	e004      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004012:	bf00      	nop
 8004014:	e002      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004016:	bf00      	nop
 8004018:	e000      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800401a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800401c:	7dfb      	ldrb	r3, [r7, #23]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10a      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004022:	4b3c      	ldr	r3, [pc, #240]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004026:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004030:	4938      	ldr	r1, [pc, #224]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004032:	4313      	orrs	r3, r2
 8004034:	658b      	str	r3, [r1, #88]	; 0x58
 8004036:	e001      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004038:	7dfb      	ldrb	r3, [r7, #23]
 800403a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0308 	and.w	r3, r3, #8
 8004044:	2b00      	cmp	r3, #0
 8004046:	d01a      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800404e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004052:	d10a      	bne.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3324      	adds	r3, #36	; 0x24
 8004058:	2102      	movs	r1, #2
 800405a:	4618      	mov	r0, r3
 800405c:	f001 fb1e 	bl	800569c <RCCEx_PLL3_Config>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800406a:	4b2a      	ldr	r3, [pc, #168]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800406c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004078:	4926      	ldr	r1, [pc, #152]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800407a:	4313      	orrs	r3, r2
 800407c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0310 	and.w	r3, r3, #16
 8004086:	2b00      	cmp	r3, #0
 8004088:	d01a      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004094:	d10a      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3324      	adds	r3, #36	; 0x24
 800409a:	2102      	movs	r1, #2
 800409c:	4618      	mov	r0, r3
 800409e:	f001 fafd 	bl	800569c <RCCEx_PLL3_Config>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040ac:	4b19      	ldr	r3, [pc, #100]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80040ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ba:	4916      	ldr	r1, [pc, #88]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d036      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040d6:	d01f      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80040d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040dc:	d817      	bhi.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80040e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e6:	d009      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80040e8:	e011      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	3304      	adds	r3, #4
 80040ee:	2100      	movs	r1, #0
 80040f0:	4618      	mov	r0, r3
 80040f2:	f001 fa21 	bl	8005538 <RCCEx_PLL2_Config>
 80040f6:	4603      	mov	r3, r0
 80040f8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80040fa:	e00e      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3324      	adds	r3, #36	; 0x24
 8004100:	2102      	movs	r1, #2
 8004102:	4618      	mov	r0, r3
 8004104:	f001 faca 	bl	800569c <RCCEx_PLL3_Config>
 8004108:	4603      	mov	r3, r0
 800410a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800410c:	e005      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	75fb      	strb	r3, [r7, #23]
      break;
 8004112:	e002      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8004114:	58024400 	.word	0x58024400
      break;
 8004118:	bf00      	nop
    }

    if(ret == HAL_OK)
 800411a:	7dfb      	ldrb	r3, [r7, #23]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10a      	bne.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004120:	4b93      	ldr	r3, [pc, #588]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004124:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800412e:	4990      	ldr	r1, [pc, #576]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004130:	4313      	orrs	r3, r2
 8004132:	658b      	str	r3, [r1, #88]	; 0x58
 8004134:	e001      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004136:	7dfb      	ldrb	r3, [r7, #23]
 8004138:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d033      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800414c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004150:	d01c      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8004152:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004156:	d816      	bhi.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8004158:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800415c:	d003      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800415e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004162:	d007      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8004164:	e00f      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004166:	4b82      	ldr	r3, [pc, #520]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416a:	4a81      	ldr	r2, [pc, #516]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800416c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004170:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004172:	e00c      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3324      	adds	r3, #36	; 0x24
 8004178:	2101      	movs	r1, #1
 800417a:	4618      	mov	r0, r3
 800417c:	f001 fa8e 	bl	800569c <RCCEx_PLL3_Config>
 8004180:	4603      	mov	r3, r0
 8004182:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004184:	e003      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	75fb      	strb	r3, [r7, #23]
      break;
 800418a:	e000      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800418c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800418e:	7dfb      	ldrb	r3, [r7, #23]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10a      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004194:	4b76      	ldr	r3, [pc, #472]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004198:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041a2:	4973      	ldr	r1, [pc, #460]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	654b      	str	r3, [r1, #84]	; 0x54
 80041a8:	e001      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041aa:	7dfb      	ldrb	r3, [r7, #23]
 80041ac:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d029      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80041c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041c6:	d007      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80041c8:	e00f      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041ca:	4b69      	ldr	r3, [pc, #420]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ce:	4a68      	ldr	r2, [pc, #416]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80041d6:	e00b      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3304      	adds	r3, #4
 80041dc:	2102      	movs	r1, #2
 80041de:	4618      	mov	r0, r3
 80041e0:	f001 f9aa 	bl	8005538 <RCCEx_PLL2_Config>
 80041e4:	4603      	mov	r3, r0
 80041e6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80041e8:	e002      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	75fb      	strb	r3, [r7, #23]
      break;
 80041ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041f0:	7dfb      	ldrb	r3, [r7, #23]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d109      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80041f6:	4b5e      	ldr	r3, [pc, #376]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004202:	495b      	ldr	r1, [pc, #364]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004204:	4313      	orrs	r3, r2
 8004206:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004208:	e001      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800420a:	7dfb      	ldrb	r3, [r7, #23]
 800420c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	3324      	adds	r3, #36	; 0x24
 800421e:	2102      	movs	r1, #2
 8004220:	4618      	mov	r0, r3
 8004222:	f001 fa3b 	bl	800569c <RCCEx_PLL3_Config>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d030      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004240:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004244:	d017      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8004246:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800424a:	d811      	bhi.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800424c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004250:	d013      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004252:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004256:	d80b      	bhi.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004258:	2b00      	cmp	r3, #0
 800425a:	d010      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800425c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004260:	d106      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004262:	4b43      	ldr	r3, [pc, #268]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004266:	4a42      	ldr	r2, [pc, #264]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800426c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800426e:	e007      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	75fb      	strb	r3, [r7, #23]
      break;
 8004274:	e004      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004276:	bf00      	nop
 8004278:	e002      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800427a:	bf00      	nop
 800427c:	e000      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800427e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004280:	7dfb      	ldrb	r3, [r7, #23]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d109      	bne.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004286:	4b3a      	ldr	r3, [pc, #232]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004292:	4937      	ldr	r1, [pc, #220]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004294:	4313      	orrs	r3, r2
 8004296:	654b      	str	r3, [r1, #84]	; 0x54
 8004298:	e001      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800429a:	7dfb      	ldrb	r3, [r7, #23]
 800429c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d008      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80042aa:	4b31      	ldr	r3, [pc, #196]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b6:	492e      	ldr	r1, [pc, #184]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d009      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80042c8:	4b29      	ldr	r3, [pc, #164]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80042d6:	4926      	ldr	r1, [pc, #152]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d008      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042e8:	4b21      	ldr	r3, [pc, #132]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042f4:	491e      	ldr	r1, [pc, #120]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00d      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004306:	4b1a      	ldr	r3, [pc, #104]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	4a19      	ldr	r2, [pc, #100]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800430c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004310:	6113      	str	r3, [r2, #16]
 8004312:	4b17      	ldr	r3, [pc, #92]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004314:	691a      	ldr	r2, [r3, #16]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800431c:	4914      	ldr	r1, [pc, #80]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800431e:	4313      	orrs	r3, r2
 8004320:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	da08      	bge.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800432a:	4b11      	ldr	r3, [pc, #68]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800432c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800432e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004336:	490e      	ldr	r1, [pc, #56]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004338:	4313      	orrs	r3, r2
 800433a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d009      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004348:	4b09      	ldr	r3, [pc, #36]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800434a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004356:	4906      	ldr	r1, [pc, #24]	; (8004370 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004358:	4313      	orrs	r3, r2
 800435a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800435c:	7dbb      	ldrb	r3, [r7, #22]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	e000      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
}
 8004368:	4618      	mov	r0, r3
 800436a:	3718      	adds	r7, #24
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	58024400 	.word	0x58024400

08004374 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b090      	sub	sp, #64	; 0x40
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004382:	f040 8095 	bne.w	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004386:	4bae      	ldr	r3, [pc, #696]	; (8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800438a:	f003 0307 	and.w	r3, r3, #7
 800438e:	633b      	str	r3, [r7, #48]	; 0x30
 8004390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004392:	2b04      	cmp	r3, #4
 8004394:	f200 8088 	bhi.w	80044a8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8004398:	a201      	add	r2, pc, #4	; (adr r2, 80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800439a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439e:	bf00      	nop
 80043a0:	080043b5 	.word	0x080043b5
 80043a4:	080043dd 	.word	0x080043dd
 80043a8:	08004405 	.word	0x08004405
 80043ac:	080044a1 	.word	0x080044a1
 80043b0:	0800442d 	.word	0x0800442d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80043b4:	4ba2      	ldr	r3, [pc, #648]	; (8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043c0:	d108      	bne.n	80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80043c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 ff64 	bl	8005294 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80043cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80043d0:	f000 bc95 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80043d4:	2300      	movs	r3, #0
 80043d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80043d8:	f000 bc91 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80043dc:	4b98      	ldr	r3, [pc, #608]	; (8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043e8:	d108      	bne.n	80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80043ea:	f107 0318 	add.w	r3, r7, #24
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 fca8 	bl	8004d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80043f8:	f000 bc81 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80043fc:	2300      	movs	r3, #0
 80043fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004400:	f000 bc7d 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004404:	4b8e      	ldr	r3, [pc, #568]	; (8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800440c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004410:	d108      	bne.n	8004424 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004412:	f107 030c 	add.w	r3, r7, #12
 8004416:	4618      	mov	r0, r3
 8004418:	f000 fde8 	bl	8004fec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004420:	f000 bc6d 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004424:	2300      	movs	r3, #0
 8004426:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004428:	f000 bc69 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800442c:	4b84      	ldr	r3, [pc, #528]	; (8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800442e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004430:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004434:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004436:	4b82      	ldr	r3, [pc, #520]	; (8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0304 	and.w	r3, r3, #4
 800443e:	2b04      	cmp	r3, #4
 8004440:	d10c      	bne.n	800445c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8004442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004444:	2b00      	cmp	r3, #0
 8004446:	d109      	bne.n	800445c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004448:	4b7d      	ldr	r3, [pc, #500]	; (8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	08db      	lsrs	r3, r3, #3
 800444e:	f003 0303 	and.w	r3, r3, #3
 8004452:	4a7c      	ldr	r2, [pc, #496]	; (8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8004454:	fa22 f303 	lsr.w	r3, r2, r3
 8004458:	63fb      	str	r3, [r7, #60]	; 0x3c
 800445a:	e01f      	b.n	800449c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800445c:	4b78      	ldr	r3, [pc, #480]	; (8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004468:	d106      	bne.n	8004478 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800446a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800446c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004470:	d102      	bne.n	8004478 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004472:	4b75      	ldr	r3, [pc, #468]	; (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004474:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004476:	e011      	b.n	800449c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004478:	4b71      	ldr	r3, [pc, #452]	; (8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004480:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004484:	d106      	bne.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8004486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004488:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800448c:	d102      	bne.n	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800448e:	4b6f      	ldr	r3, [pc, #444]	; (800464c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004490:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004492:	e003      	b.n	800449c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004494:	2300      	movs	r3, #0
 8004496:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004498:	f000 bc31 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800449c:	f000 bc2f 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80044a0:	4b6b      	ldr	r3, [pc, #428]	; (8004650 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80044a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80044a4:	f000 bc2b 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80044a8:	2300      	movs	r3, #0
 80044aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80044ac:	f000 bc27 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044b6:	f040 8095 	bne.w	80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80044ba:	4b61      	ldr	r3, [pc, #388]	; (8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80044bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044be:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80044c2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80044c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044ca:	d04d      	beq.n	8004568 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80044cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044d2:	f200 8084 	bhi.w	80045de <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80044d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d8:	2bc0      	cmp	r3, #192	; 0xc0
 80044da:	d07d      	beq.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80044dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044de:	2bc0      	cmp	r3, #192	; 0xc0
 80044e0:	d87d      	bhi.n	80045de <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80044e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e4:	2b80      	cmp	r3, #128	; 0x80
 80044e6:	d02d      	beq.n	8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80044e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ea:	2b80      	cmp	r3, #128	; 0x80
 80044ec:	d877      	bhi.n	80045de <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80044ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80044f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f6:	2b40      	cmp	r3, #64	; 0x40
 80044f8:	d012      	beq.n	8004520 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80044fa:	e070      	b.n	80045de <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80044fc:	4b50      	ldr	r3, [pc, #320]	; (8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004504:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004508:	d107      	bne.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800450a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800450e:	4618      	mov	r0, r3
 8004510:	f000 fec0 	bl	8005294 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004516:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004518:	e3f1      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800451a:	2300      	movs	r3, #0
 800451c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800451e:	e3ee      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004520:	4b47      	ldr	r3, [pc, #284]	; (8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004528:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800452c:	d107      	bne.n	800453e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800452e:	f107 0318 	add.w	r3, r7, #24
 8004532:	4618      	mov	r0, r3
 8004534:	f000 fc06 	bl	8004d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800453c:	e3df      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800453e:	2300      	movs	r3, #0
 8004540:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004542:	e3dc      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004544:	4b3e      	ldr	r3, [pc, #248]	; (8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800454c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004550:	d107      	bne.n	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004552:	f107 030c 	add.w	r3, r7, #12
 8004556:	4618      	mov	r0, r3
 8004558:	f000 fd48 	bl	8004fec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004560:	e3cd      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004562:	2300      	movs	r3, #0
 8004564:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004566:	e3ca      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004568:	4b35      	ldr	r3, [pc, #212]	; (8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800456a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800456c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004570:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004572:	4b33      	ldr	r3, [pc, #204]	; (8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0304 	and.w	r3, r3, #4
 800457a:	2b04      	cmp	r3, #4
 800457c:	d10c      	bne.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800457e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004580:	2b00      	cmp	r3, #0
 8004582:	d109      	bne.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004584:	4b2e      	ldr	r3, [pc, #184]	; (8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	08db      	lsrs	r3, r3, #3
 800458a:	f003 0303 	and.w	r3, r3, #3
 800458e:	4a2d      	ldr	r2, [pc, #180]	; (8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8004590:	fa22 f303 	lsr.w	r3, r2, r3
 8004594:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004596:	e01e      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004598:	4b29      	ldr	r3, [pc, #164]	; (8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045a4:	d106      	bne.n	80045b4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80045a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045ac:	d102      	bne.n	80045b4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80045ae:	4b26      	ldr	r3, [pc, #152]	; (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80045b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045b2:	e010      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80045b4:	4b22      	ldr	r3, [pc, #136]	; (8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045c0:	d106      	bne.n	80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80045c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045c8:	d102      	bne.n	80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80045ca:	4b20      	ldr	r3, [pc, #128]	; (800464c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80045cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045ce:	e002      	b.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80045d0:	2300      	movs	r3, #0
 80045d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80045d4:	e393      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80045d6:	e392      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80045d8:	4b1d      	ldr	r3, [pc, #116]	; (8004650 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80045da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80045dc:	e38f      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80045de:	2300      	movs	r3, #0
 80045e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80045e2:	e38c      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ea:	f040 80a7 	bne.w	800473c <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80045ee:	4b14      	ldr	r3, [pc, #80]	; (8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80045f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80045f6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80045f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045fe:	d05f      	beq.n	80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8004600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004602:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004606:	f200 8096 	bhi.w	8004736 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800460a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004610:	f000 808e 	beq.w	8004730 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8004614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004616:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800461a:	f200 808c 	bhi.w	8004736 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800461e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004620:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004624:	d03a      	beq.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8004626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004628:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800462c:	f200 8083 	bhi.w	8004736 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8004630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00e      	beq.n	8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8004636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004638:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800463c:	d01c      	beq.n	8004678 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800463e:	e07a      	b.n	8004736 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8004640:	58024400 	.word	0x58024400
 8004644:	03d09000 	.word	0x03d09000
 8004648:	003d0900 	.word	0x003d0900
 800464c:	017d7840 	.word	0x017d7840
 8004650:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004654:	4baa      	ldr	r3, [pc, #680]	; (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004660:	d107      	bne.n	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fe14 	bl	8005294 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800466c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004670:	e345      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004672:	2300      	movs	r3, #0
 8004674:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004676:	e342      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004678:	4ba1      	ldr	r3, [pc, #644]	; (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004680:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004684:	d107      	bne.n	8004696 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004686:	f107 0318 	add.w	r3, r7, #24
 800468a:	4618      	mov	r0, r3
 800468c:	f000 fb5a 	bl	8004d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004694:	e333      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004696:	2300      	movs	r3, #0
 8004698:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800469a:	e330      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800469c:	4b98      	ldr	r3, [pc, #608]	; (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046a8:	d107      	bne.n	80046ba <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80046aa:	f107 030c 	add.w	r3, r7, #12
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 fc9c 	bl	8004fec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80046b8:	e321      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80046ba:	2300      	movs	r3, #0
 80046bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80046be:	e31e      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80046c0:	4b8f      	ldr	r3, [pc, #572]	; (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80046c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80046c8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80046ca:	4b8d      	ldr	r3, [pc, #564]	; (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0304 	and.w	r3, r3, #4
 80046d2:	2b04      	cmp	r3, #4
 80046d4:	d10c      	bne.n	80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80046d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d109      	bne.n	80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80046dc:	4b88      	ldr	r3, [pc, #544]	; (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	08db      	lsrs	r3, r3, #3
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	4a87      	ldr	r2, [pc, #540]	; (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80046e8:	fa22 f303 	lsr.w	r3, r2, r3
 80046ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046ee:	e01e      	b.n	800472e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80046f0:	4b83      	ldr	r3, [pc, #524]	; (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046fc:	d106      	bne.n	800470c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 80046fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004700:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004704:	d102      	bne.n	800470c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004706:	4b80      	ldr	r3, [pc, #512]	; (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004708:	63fb      	str	r3, [r7, #60]	; 0x3c
 800470a:	e010      	b.n	800472e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800470c:	4b7c      	ldr	r3, [pc, #496]	; (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004714:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004718:	d106      	bne.n	8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800471a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800471c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004720:	d102      	bne.n	8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004722:	4b7a      	ldr	r3, [pc, #488]	; (800490c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004724:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004726:	e002      	b.n	800472e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004728:	2300      	movs	r3, #0
 800472a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800472c:	e2e7      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800472e:	e2e6      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004730:	4b77      	ldr	r3, [pc, #476]	; (8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004732:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004734:	e2e3      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8004736:	2300      	movs	r3, #0
 8004738:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800473a:	e2e0      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004742:	f040 809c 	bne.w	800487e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8004746:	4b6e      	ldr	r3, [pc, #440]	; (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800474e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004752:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004756:	d054      	beq.n	8004802 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8004758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800475e:	f200 808b 	bhi.w	8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8004762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004764:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004768:	f000 8083 	beq.w	8004872 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800476c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004772:	f200 8081 	bhi.w	8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8004776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004778:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800477c:	d02f      	beq.n	80047de <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800477e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004780:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004784:	d878      	bhi.n	8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8004786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004788:	2b00      	cmp	r3, #0
 800478a:	d004      	beq.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800478c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004792:	d012      	beq.n	80047ba <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8004794:	e070      	b.n	8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004796:	4b5a      	ldr	r3, [pc, #360]	; (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800479e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047a2:	d107      	bne.n	80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80047a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 fd73 	bl	8005294 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80047ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80047b2:	e2a4      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80047b4:	2300      	movs	r3, #0
 80047b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047b8:	e2a1      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80047ba:	4b51      	ldr	r3, [pc, #324]	; (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047c6:	d107      	bne.n	80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047c8:	f107 0318 	add.w	r3, r7, #24
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 fab9 	bl	8004d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80047d6:	e292      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80047d8:	2300      	movs	r3, #0
 80047da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047dc:	e28f      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80047de:	4b48      	ldr	r3, [pc, #288]	; (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047ea:	d107      	bne.n	80047fc <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047ec:	f107 030c 	add.w	r3, r7, #12
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 fbfb 	bl	8004fec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80047fa:	e280      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80047fc:	2300      	movs	r3, #0
 80047fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004800:	e27d      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004802:	4b3f      	ldr	r3, [pc, #252]	; (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004806:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800480a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800480c:	4b3c      	ldr	r3, [pc, #240]	; (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b04      	cmp	r3, #4
 8004816:	d10c      	bne.n	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8004818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800481a:	2b00      	cmp	r3, #0
 800481c:	d109      	bne.n	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800481e:	4b38      	ldr	r3, [pc, #224]	; (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	08db      	lsrs	r3, r3, #3
 8004824:	f003 0303 	and.w	r3, r3, #3
 8004828:	4a36      	ldr	r2, [pc, #216]	; (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800482a:	fa22 f303 	lsr.w	r3, r2, r3
 800482e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004830:	e01e      	b.n	8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004832:	4b33      	ldr	r3, [pc, #204]	; (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800483a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800483e:	d106      	bne.n	800484e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8004840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004842:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004846:	d102      	bne.n	800484e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004848:	4b2f      	ldr	r3, [pc, #188]	; (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800484a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800484c:	e010      	b.n	8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800484e:	4b2c      	ldr	r3, [pc, #176]	; (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004856:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800485a:	d106      	bne.n	800486a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800485c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800485e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004862:	d102      	bne.n	800486a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004864:	4b29      	ldr	r3, [pc, #164]	; (800490c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004866:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004868:	e002      	b.n	8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800486a:	2300      	movs	r3, #0
 800486c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800486e:	e246      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004870:	e245      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004872:	4b27      	ldr	r3, [pc, #156]	; (8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004874:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004876:	e242      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8004878:	2300      	movs	r3, #0
 800487a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800487c:	e23f      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004884:	f040 80a8 	bne.w	80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004888:	4b1d      	ldr	r3, [pc, #116]	; (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800488a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800488c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004890:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004894:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004898:	d060      	beq.n	800495c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800489a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048a0:	f200 8097 	bhi.w	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80048a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048aa:	f000 808f 	beq.w	80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80048ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048b4:	f200 808d 	bhi.w	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80048b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048be:	d03b      	beq.n	8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 80048c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048c6:	f200 8084 	bhi.w	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80048ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d004      	beq.n	80048da <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80048d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048d6:	d01d      	beq.n	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 80048d8:	e07b      	b.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80048da:	4b09      	ldr	r3, [pc, #36]	; (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048e6:	d107      	bne.n	80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80048e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 fcd1 	bl	8005294 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80048f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80048f6:	e202      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80048f8:	2300      	movs	r3, #0
 80048fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048fc:	e1ff      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80048fe:	bf00      	nop
 8004900:	58024400 	.word	0x58024400
 8004904:	03d09000 	.word	0x03d09000
 8004908:	003d0900 	.word	0x003d0900
 800490c:	017d7840 	.word	0x017d7840
 8004910:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004914:	4ba3      	ldr	r3, [pc, #652]	; (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800491c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004920:	d107      	bne.n	8004932 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004922:	f107 0318 	add.w	r3, r7, #24
 8004926:	4618      	mov	r0, r3
 8004928:	f000 fa0c 	bl	8004d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004930:	e1e5      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004932:	2300      	movs	r3, #0
 8004934:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004936:	e1e2      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004938:	4b9a      	ldr	r3, [pc, #616]	; (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004940:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004944:	d107      	bne.n	8004956 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004946:	f107 030c 	add.w	r3, r7, #12
 800494a:	4618      	mov	r0, r3
 800494c:	f000 fb4e 	bl	8004fec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004954:	e1d3      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004956:	2300      	movs	r3, #0
 8004958:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800495a:	e1d0      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800495c:	4b91      	ldr	r3, [pc, #580]	; (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800495e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004960:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004964:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004966:	4b8f      	ldr	r3, [pc, #572]	; (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0304 	and.w	r3, r3, #4
 800496e:	2b04      	cmp	r3, #4
 8004970:	d10c      	bne.n	800498c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8004972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004974:	2b00      	cmp	r3, #0
 8004976:	d109      	bne.n	800498c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004978:	4b8a      	ldr	r3, [pc, #552]	; (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	08db      	lsrs	r3, r3, #3
 800497e:	f003 0303 	and.w	r3, r3, #3
 8004982:	4a89      	ldr	r2, [pc, #548]	; (8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004984:	fa22 f303 	lsr.w	r3, r2, r3
 8004988:	63fb      	str	r3, [r7, #60]	; 0x3c
 800498a:	e01e      	b.n	80049ca <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800498c:	4b85      	ldr	r3, [pc, #532]	; (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004998:	d106      	bne.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800499a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800499c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049a0:	d102      	bne.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80049a2:	4b82      	ldr	r3, [pc, #520]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80049a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049a6:	e010      	b.n	80049ca <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80049a8:	4b7e      	ldr	r3, [pc, #504]	; (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049b4:	d106      	bne.n	80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80049b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049bc:	d102      	bne.n	80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80049be:	4b7c      	ldr	r3, [pc, #496]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80049c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049c2:	e002      	b.n	80049ca <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80049c4:	2300      	movs	r3, #0
 80049c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80049c8:	e199      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80049ca:	e198      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80049cc:	4b79      	ldr	r3, [pc, #484]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80049ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049d0:	e195      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80049d2:	2300      	movs	r3, #0
 80049d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049d6:	e192      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80049de:	d173      	bne.n	8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80049e0:	4b70      	ldr	r3, [pc, #448]	; (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80049e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049e8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80049ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049f0:	d02f      	beq.n	8004a52 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 80049f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049f8:	d863      	bhi.n	8004ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80049fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d004      	beq.n	8004a0a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8004a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a06:	d012      	beq.n	8004a2e <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8004a08:	e05b      	b.n	8004ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004a0a:	4b66      	ldr	r3, [pc, #408]	; (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a16:	d107      	bne.n	8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a18:	f107 0318 	add.w	r3, r7, #24
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f000 f991 	bl	8004d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a26:	e16a      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a2c:	e167      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004a2e:	4b5d      	ldr	r3, [pc, #372]	; (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a3a:	d107      	bne.n	8004a4c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a3c:	f107 030c 	add.w	r3, r7, #12
 8004a40:	4618      	mov	r0, r3
 8004a42:	f000 fad3 	bl	8004fec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a4a:	e158      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a50:	e155      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004a52:	4b54      	ldr	r3, [pc, #336]	; (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a5a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004a5c:	4b51      	ldr	r3, [pc, #324]	; (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b04      	cmp	r3, #4
 8004a66:	d10c      	bne.n	8004a82 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8004a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d109      	bne.n	8004a82 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a6e:	4b4d      	ldr	r3, [pc, #308]	; (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	08db      	lsrs	r3, r3, #3
 8004a74:	f003 0303 	and.w	r3, r3, #3
 8004a78:	4a4b      	ldr	r2, [pc, #300]	; (8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a80:	e01e      	b.n	8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004a82:	4b48      	ldr	r3, [pc, #288]	; (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a8e:	d106      	bne.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8004a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a96:	d102      	bne.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004a98:	4b44      	ldr	r3, [pc, #272]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a9c:	e010      	b.n	8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004a9e:	4b41      	ldr	r3, [pc, #260]	; (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004aaa:	d106      	bne.n	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8004aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ab2:	d102      	bne.n	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004ab4:	4b3e      	ldr	r3, [pc, #248]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ab8:	e002      	b.n	8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004aba:	2300      	movs	r3, #0
 8004abc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004abe:	e11e      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004ac0:	e11d      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ac6:	e11a      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ace:	d133      	bne.n	8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8004ad0:	4b34      	ldr	r3, [pc, #208]	; (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ad8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d004      	beq.n	8004aea <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8004ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae6:	d012      	beq.n	8004b0e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8004ae8:	e023      	b.n	8004b32 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004aea:	4b2e      	ldr	r3, [pc, #184]	; (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004af6:	d107      	bne.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004afc:	4618      	mov	r0, r3
 8004afe:	f000 fbc9 	bl	8005294 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b04:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004b06:	e0fa      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b0c:	e0f7      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004b0e:	4b25      	ldr	r3, [pc, #148]	; (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b1a:	d107      	bne.n	8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b1c:	f107 0318 	add.w	r3, r7, #24
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 f90f 	bl	8004d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004b2a:	e0e8      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b30:	e0e5      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8004b32:	2300      	movs	r3, #0
 8004b34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b36:	e0e2      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b3e:	f040 808f 	bne.w	8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004b42:	4b18      	ldr	r3, [pc, #96]	; (8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b46:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004b4a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b52:	d075      	beq.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8004b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b5a:	d87e      	bhi.n	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b62:	d060      	beq.n	8004c26 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8004b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b6a:	d876      	bhi.n	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b72:	d045      	beq.n	8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8004b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b7a:	d86e      	bhi.n	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b82:	d02b      	beq.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8004b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b8a:	d866      	bhi.n	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d004      	beq.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8004b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b98:	d00e      	beq.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004b9a:	e05e      	b.n	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004b9c:	f000 f8bc 	bl	8004d18 <HAL_RCCEx_GetD3PCLK1Freq>
 8004ba0:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8004ba2:	e0ac      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004ba4:	58024400 	.word	0x58024400
 8004ba8:	03d09000 	.word	0x03d09000
 8004bac:	003d0900 	.word	0x003d0900
 8004bb0:	017d7840 	.word	0x017d7840
 8004bb4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004bb8:	4b53      	ldr	r3, [pc, #332]	; (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bc4:	d107      	bne.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bc6:	f107 0318 	add.w	r3, r7, #24
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 f8ba 	bl	8004d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004bd4:	e093      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bda:	e090      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004bdc:	4b4a      	ldr	r3, [pc, #296]	; (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004be4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004be8:	d107      	bne.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004bea:	f107 030c 	add.w	r3, r7, #12
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 f9fc 	bl	8004fec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004bf8:	e081      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bfe:	e07e      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c00:	4b41      	ldr	r3, [pc, #260]	; (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	2b04      	cmp	r3, #4
 8004c0a:	d109      	bne.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c0c:	4b3e      	ldr	r3, [pc, #248]	; (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	08db      	lsrs	r3, r3, #3
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	4a3d      	ldr	r2, [pc, #244]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8004c18:	fa22 f303 	lsr.w	r3, r2, r3
 8004c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004c1e:	e06e      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004c20:	2300      	movs	r3, #0
 8004c22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c24:	e06b      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004c26:	4b38      	ldr	r3, [pc, #224]	; (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c32:	d102      	bne.n	8004c3a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8004c34:	4b36      	ldr	r3, [pc, #216]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004c36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c38:	e061      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c3e:	e05e      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004c40:	4b31      	ldr	r3, [pc, #196]	; (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c4c:	d102      	bne.n	8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8004c4e:	4b31      	ldr	r3, [pc, #196]	; (8004d14 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8004c50:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004c52:	e054      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004c54:	2300      	movs	r3, #0
 8004c56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c58:	e051      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c5e:	e04e      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c66:	d148      	bne.n	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8004c68:	4b27      	ldr	r3, [pc, #156]	; (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c70:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c78:	d02a      	beq.n	8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8004c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c80:	d838      	bhi.n	8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8004c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d004      	beq.n	8004c92 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8004c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c8e:	d00d      	beq.n	8004cac <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8004c90:	e030      	b.n	8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004c92:	4b1d      	ldr	r3, [pc, #116]	; (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c9e:	d102      	bne.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8004ca0:	4b1c      	ldr	r3, [pc, #112]	; (8004d14 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8004ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004ca4:	e02b      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004caa:	e028      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004cac:	4b16      	ldr	r3, [pc, #88]	; (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cb8:	d107      	bne.n	8004cca <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 fae8 	bl	8005294 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004cc8:	e019      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cce:	e016      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004cd0:	4b0d      	ldr	r3, [pc, #52]	; (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cdc:	d107      	bne.n	8004cee <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cde:	f107 0318 	add.w	r3, r7, #24
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 f82e 	bl	8004d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004cec:	e007      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cf2:	e004      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cf8:	e001      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8004cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3740      	adds	r7, #64	; 0x40
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	58024400 	.word	0x58024400
 8004d0c:	03d09000 	.word	0x03d09000
 8004d10:	003d0900 	.word	0x003d0900
 8004d14:	017d7840 	.word	0x017d7840

08004d18 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004d1c:	f7fe fbba 	bl	8003494 <HAL_RCC_GetHCLKFreq>
 8004d20:	4602      	mov	r2, r0
 8004d22:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	091b      	lsrs	r3, r3, #4
 8004d28:	f003 0307 	and.w	r3, r3, #7
 8004d2c:	4904      	ldr	r1, [pc, #16]	; (8004d40 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004d2e:	5ccb      	ldrb	r3, [r1, r3]
 8004d30:	f003 031f 	and.w	r3, r3, #31
 8004d34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	58024400 	.word	0x58024400
 8004d40:	08005870 	.word	0x08005870

08004d44 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b089      	sub	sp, #36	; 0x24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d4c:	4ba1      	ldr	r3, [pc, #644]	; (8004fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d50:	f003 0303 	and.w	r3, r3, #3
 8004d54:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004d56:	4b9f      	ldr	r3, [pc, #636]	; (8004fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5a:	0b1b      	lsrs	r3, r3, #12
 8004d5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d60:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004d62:	4b9c      	ldr	r3, [pc, #624]	; (8004fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d66:	091b      	lsrs	r3, r3, #4
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004d6e:	4b99      	ldr	r3, [pc, #612]	; (8004fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d72:	08db      	lsrs	r3, r3, #3
 8004d74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	fb02 f303 	mul.w	r3, r2, r3
 8004d7e:	ee07 3a90 	vmov	s15, r3
 8004d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 8111 	beq.w	8004fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	f000 8083 	beq.w	8004ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	f200 80a1 	bhi.w	8004ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d003      	beq.n	8004db0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d056      	beq.n	8004e5c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004dae:	e099      	b.n	8004ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004db0:	4b88      	ldr	r3, [pc, #544]	; (8004fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0320 	and.w	r3, r3, #32
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d02d      	beq.n	8004e18 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004dbc:	4b85      	ldr	r3, [pc, #532]	; (8004fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	08db      	lsrs	r3, r3, #3
 8004dc2:	f003 0303 	and.w	r3, r3, #3
 8004dc6:	4a84      	ldr	r2, [pc, #528]	; (8004fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8004dcc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	ee07 3a90 	vmov	s15, r3
 8004dd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	ee07 3a90 	vmov	s15, r3
 8004dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004de6:	4b7b      	ldr	r3, [pc, #492]	; (8004fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dee:	ee07 3a90 	vmov	s15, r3
 8004df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004df6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dfa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004fdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e12:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004e16:	e087      	b.n	8004f28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	ee07 3a90 	vmov	s15, r3
 8004e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e22:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e2a:	4b6a      	ldr	r3, [pc, #424]	; (8004fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e32:	ee07 3a90 	vmov	s15, r3
 8004e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e3e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004fdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e5a:	e065      	b.n	8004f28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	ee07 3a90 	vmov	s15, r3
 8004e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e66:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e6e:	4b59      	ldr	r3, [pc, #356]	; (8004fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e76:	ee07 3a90 	vmov	s15, r3
 8004e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e82:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004fdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e9e:	e043      	b.n	8004f28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	ee07 3a90 	vmov	s15, r3
 8004ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eaa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eb2:	4b48      	ldr	r3, [pc, #288]	; (8004fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eba:	ee07 3a90 	vmov	s15, r3
 8004ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ec2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ec6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004fdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ed2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ede:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ee2:	e021      	b.n	8004f28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	ee07 3a90 	vmov	s15, r3
 8004eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ef6:	4b37      	ldr	r3, [pc, #220]	; (8004fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004efe:	ee07 3a90 	vmov	s15, r3
 8004f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f06:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f0a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004fdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f26:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004f28:	4b2a      	ldr	r3, [pc, #168]	; (8004fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2c:	0a5b      	lsrs	r3, r3, #9
 8004f2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f32:	ee07 3a90 	vmov	s15, r3
 8004f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f42:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f4e:	ee17 2a90 	vmov	r2, s15
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004f56:	4b1f      	ldr	r3, [pc, #124]	; (8004fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5a:	0c1b      	lsrs	r3, r3, #16
 8004f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f60:	ee07 3a90 	vmov	s15, r3
 8004f64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f70:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f7c:	ee17 2a90 	vmov	r2, s15
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004f84:	4b13      	ldr	r3, [pc, #76]	; (8004fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f88:	0e1b      	lsrs	r3, r3, #24
 8004f8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f8e:	ee07 3a90 	vmov	s15, r3
 8004f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004faa:	ee17 2a90 	vmov	r2, s15
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	609a      	str	r2, [r3, #8]
}
 8004fc6:	bf00      	nop
 8004fc8:	3724      	adds	r7, #36	; 0x24
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	58024400 	.word	0x58024400
 8004fd8:	03d09000 	.word	0x03d09000
 8004fdc:	46000000 	.word	0x46000000
 8004fe0:	4c742400 	.word	0x4c742400
 8004fe4:	4a742400 	.word	0x4a742400
 8004fe8:	4bbebc20 	.word	0x4bbebc20

08004fec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b089      	sub	sp, #36	; 0x24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ff4:	4ba1      	ldr	r3, [pc, #644]	; (800527c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff8:	f003 0303 	and.w	r3, r3, #3
 8004ffc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004ffe:	4b9f      	ldr	r3, [pc, #636]	; (800527c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005002:	0d1b      	lsrs	r3, r3, #20
 8005004:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005008:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800500a:	4b9c      	ldr	r3, [pc, #624]	; (800527c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800500c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500e:	0a1b      	lsrs	r3, r3, #8
 8005010:	f003 0301 	and.w	r3, r3, #1
 8005014:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005016:	4b99      	ldr	r3, [pc, #612]	; (800527c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800501a:	08db      	lsrs	r3, r3, #3
 800501c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	fb02 f303 	mul.w	r3, r2, r3
 8005026:	ee07 3a90 	vmov	s15, r3
 800502a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800502e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 8111 	beq.w	800525c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	2b02      	cmp	r3, #2
 800503e:	f000 8083 	beq.w	8005148 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	2b02      	cmp	r3, #2
 8005046:	f200 80a1 	bhi.w	800518c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d003      	beq.n	8005058 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d056      	beq.n	8005104 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005056:	e099      	b.n	800518c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005058:	4b88      	ldr	r3, [pc, #544]	; (800527c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0320 	and.w	r3, r3, #32
 8005060:	2b00      	cmp	r3, #0
 8005062:	d02d      	beq.n	80050c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005064:	4b85      	ldr	r3, [pc, #532]	; (800527c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	08db      	lsrs	r3, r3, #3
 800506a:	f003 0303 	and.w	r3, r3, #3
 800506e:	4a84      	ldr	r2, [pc, #528]	; (8005280 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005070:	fa22 f303 	lsr.w	r3, r2, r3
 8005074:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	ee07 3a90 	vmov	s15, r3
 800507c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	ee07 3a90 	vmov	s15, r3
 8005086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800508a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800508e:	4b7b      	ldr	r3, [pc, #492]	; (800527c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005096:	ee07 3a90 	vmov	s15, r3
 800509a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800509e:	ed97 6a03 	vldr	s12, [r7, #12]
 80050a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005284 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80050be:	e087      	b.n	80051d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	ee07 3a90 	vmov	s15, r3
 80050c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005288 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80050ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050d2:	4b6a      	ldr	r3, [pc, #424]	; (800527c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050da:	ee07 3a90 	vmov	s15, r3
 80050de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80050e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005284 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005102:	e065      	b.n	80051d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	ee07 3a90 	vmov	s15, r3
 800510a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800510e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800528c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005116:	4b59      	ldr	r3, [pc, #356]	; (800527c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800511e:	ee07 3a90 	vmov	s15, r3
 8005122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005126:	ed97 6a03 	vldr	s12, [r7, #12]
 800512a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005284 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800512e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005136:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800513a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800513e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005142:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005146:	e043      	b.n	80051d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	ee07 3a90 	vmov	s15, r3
 800514e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005152:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005290 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800515a:	4b48      	ldr	r3, [pc, #288]	; (800527c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800515c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005162:	ee07 3a90 	vmov	s15, r3
 8005166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800516a:	ed97 6a03 	vldr	s12, [r7, #12]
 800516e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005284 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800517a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800517e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005186:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800518a:	e021      	b.n	80051d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	ee07 3a90 	vmov	s15, r3
 8005192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005196:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800528c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800519a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800519e:	4b37      	ldr	r3, [pc, #220]	; (800527c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051a6:	ee07 3a90 	vmov	s15, r3
 80051aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80051b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005284 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051ce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80051d0:	4b2a      	ldr	r3, [pc, #168]	; (800527c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d4:	0a5b      	lsrs	r3, r3, #9
 80051d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051da:	ee07 3a90 	vmov	s15, r3
 80051de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80051ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051f6:	ee17 2a90 	vmov	r2, s15
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80051fe:	4b1f      	ldr	r3, [pc, #124]	; (800527c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	0c1b      	lsrs	r3, r3, #16
 8005204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005208:	ee07 3a90 	vmov	s15, r3
 800520c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005210:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005214:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005218:	edd7 6a07 	vldr	s13, [r7, #28]
 800521c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005220:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005224:	ee17 2a90 	vmov	r2, s15
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800522c:	4b13      	ldr	r3, [pc, #76]	; (800527c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005230:	0e1b      	lsrs	r3, r3, #24
 8005232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005236:	ee07 3a90 	vmov	s15, r3
 800523a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800523e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005242:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005246:	edd7 6a07 	vldr	s13, [r7, #28]
 800524a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800524e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005252:	ee17 2a90 	vmov	r2, s15
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800525a:	e008      	b.n	800526e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	609a      	str	r2, [r3, #8]
}
 800526e:	bf00      	nop
 8005270:	3724      	adds	r7, #36	; 0x24
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	58024400 	.word	0x58024400
 8005280:	03d09000 	.word	0x03d09000
 8005284:	46000000 	.word	0x46000000
 8005288:	4c742400 	.word	0x4c742400
 800528c:	4a742400 	.word	0x4a742400
 8005290:	4bbebc20 	.word	0x4bbebc20

08005294 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005294:	b480      	push	{r7}
 8005296:	b089      	sub	sp, #36	; 0x24
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800529c:	4ba0      	ldr	r3, [pc, #640]	; (8005520 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800529e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a0:	f003 0303 	and.w	r3, r3, #3
 80052a4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80052a6:	4b9e      	ldr	r3, [pc, #632]	; (8005520 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80052a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052aa:	091b      	lsrs	r3, r3, #4
 80052ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052b0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80052b2:	4b9b      	ldr	r3, [pc, #620]	; (8005520 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80052b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80052bc:	4b98      	ldr	r3, [pc, #608]	; (8005520 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80052be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c0:	08db      	lsrs	r3, r3, #3
 80052c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	fb02 f303 	mul.w	r3, r2, r3
 80052cc:	ee07 3a90 	vmov	s15, r3
 80052d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052d4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	f000 8111 	beq.w	8005502 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	f000 8083 	beq.w	80053ee <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	f200 80a1 	bhi.w	8005432 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d056      	beq.n	80053aa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80052fc:	e099      	b.n	8005432 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052fe:	4b88      	ldr	r3, [pc, #544]	; (8005520 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0320 	and.w	r3, r3, #32
 8005306:	2b00      	cmp	r3, #0
 8005308:	d02d      	beq.n	8005366 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800530a:	4b85      	ldr	r3, [pc, #532]	; (8005520 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	08db      	lsrs	r3, r3, #3
 8005310:	f003 0303 	and.w	r3, r3, #3
 8005314:	4a83      	ldr	r2, [pc, #524]	; (8005524 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005316:	fa22 f303 	lsr.w	r3, r2, r3
 800531a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	ee07 3a90 	vmov	s15, r3
 8005322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	ee07 3a90 	vmov	s15, r3
 800532c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005330:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005334:	4b7a      	ldr	r3, [pc, #488]	; (8005520 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800533c:	ee07 3a90 	vmov	s15, r3
 8005340:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005344:	ed97 6a03 	vldr	s12, [r7, #12]
 8005348:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005528 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800534c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005350:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005354:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005358:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800535c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005360:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005364:	e087      	b.n	8005476 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	ee07 3a90 	vmov	s15, r3
 800536c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005370:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800552c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005374:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005378:	4b69      	ldr	r3, [pc, #420]	; (8005520 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800537a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005380:	ee07 3a90 	vmov	s15, r3
 8005384:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005388:	ed97 6a03 	vldr	s12, [r7, #12]
 800538c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005528 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005390:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005394:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005398:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800539c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053a8:	e065      	b.n	8005476 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	ee07 3a90 	vmov	s15, r3
 80053b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005530 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80053b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053bc:	4b58      	ldr	r3, [pc, #352]	; (8005520 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80053be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053c4:	ee07 3a90 	vmov	s15, r3
 80053c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80053d0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005528 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80053d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053ec:	e043      	b.n	8005476 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	ee07 3a90 	vmov	s15, r3
 80053f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005534 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80053fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005400:	4b47      	ldr	r3, [pc, #284]	; (8005520 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005408:	ee07 3a90 	vmov	s15, r3
 800540c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005410:	ed97 6a03 	vldr	s12, [r7, #12]
 8005414:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005528 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005418:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800541c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005420:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005424:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800542c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005430:	e021      	b.n	8005476 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	ee07 3a90 	vmov	s15, r3
 8005438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800543c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800552c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005440:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005444:	4b36      	ldr	r3, [pc, #216]	; (8005520 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800544c:	ee07 3a90 	vmov	s15, r3
 8005450:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005454:	ed97 6a03 	vldr	s12, [r7, #12]
 8005458:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005528 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800545c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005460:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005464:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005468:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800546c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005470:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005474:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005476:	4b2a      	ldr	r3, [pc, #168]	; (8005520 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547a:	0a5b      	lsrs	r3, r3, #9
 800547c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005480:	ee07 3a90 	vmov	s15, r3
 8005484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005488:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800548c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005490:	edd7 6a07 	vldr	s13, [r7, #28]
 8005494:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005498:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800549c:	ee17 2a90 	vmov	r2, s15
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80054a4:	4b1e      	ldr	r3, [pc, #120]	; (8005520 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80054a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a8:	0c1b      	lsrs	r3, r3, #16
 80054aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054ae:	ee07 3a90 	vmov	s15, r3
 80054b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054be:	edd7 6a07 	vldr	s13, [r7, #28]
 80054c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054ca:	ee17 2a90 	vmov	r2, s15
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80054d2:	4b13      	ldr	r3, [pc, #76]	; (8005520 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80054d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d6:	0e1b      	lsrs	r3, r3, #24
 80054d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054dc:	ee07 3a90 	vmov	s15, r3
 80054e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80054f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054f8:	ee17 2a90 	vmov	r2, s15
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005500:	e008      	b.n	8005514 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	609a      	str	r2, [r3, #8]
}
 8005514:	bf00      	nop
 8005516:	3724      	adds	r7, #36	; 0x24
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	58024400 	.word	0x58024400
 8005524:	03d09000 	.word	0x03d09000
 8005528:	46000000 	.word	0x46000000
 800552c:	4c742400 	.word	0x4c742400
 8005530:	4a742400 	.word	0x4a742400
 8005534:	4bbebc20 	.word	0x4bbebc20

08005538 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005542:	2300      	movs	r3, #0
 8005544:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005546:	4b53      	ldr	r3, [pc, #332]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 8005548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554a:	f003 0303 	and.w	r3, r3, #3
 800554e:	2b03      	cmp	r3, #3
 8005550:	d101      	bne.n	8005556 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e099      	b.n	800568a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005556:	4b4f      	ldr	r3, [pc, #316]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a4e      	ldr	r2, [pc, #312]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 800555c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005560:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005562:	f7fb fa21 	bl	80009a8 <HAL_GetTick>
 8005566:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005568:	e008      	b.n	800557c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800556a:	f7fb fa1d 	bl	80009a8 <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	2b02      	cmp	r3, #2
 8005576:	d901      	bls.n	800557c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e086      	b.n	800568a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800557c:	4b45      	ldr	r3, [pc, #276]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1f0      	bne.n	800556a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005588:	4b42      	ldr	r3, [pc, #264]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 800558a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	031b      	lsls	r3, r3, #12
 8005596:	493f      	ldr	r1, [pc, #252]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 8005598:	4313      	orrs	r3, r2
 800559a:	628b      	str	r3, [r1, #40]	; 0x28
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	3b01      	subs	r3, #1
 80055a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	3b01      	subs	r3, #1
 80055ac:	025b      	lsls	r3, r3, #9
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	431a      	orrs	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	3b01      	subs	r3, #1
 80055b8:	041b      	lsls	r3, r3, #16
 80055ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80055be:	431a      	orrs	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	3b01      	subs	r3, #1
 80055c6:	061b      	lsls	r3, r3, #24
 80055c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80055cc:	4931      	ldr	r1, [pc, #196]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80055d2:	4b30      	ldr	r3, [pc, #192]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 80055d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	492d      	ldr	r1, [pc, #180]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80055e4:	4b2b      	ldr	r3, [pc, #172]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 80055e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e8:	f023 0220 	bic.w	r2, r3, #32
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	4928      	ldr	r1, [pc, #160]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80055f6:	4b27      	ldr	r3, [pc, #156]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 80055f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fa:	4a26      	ldr	r2, [pc, #152]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 80055fc:	f023 0310 	bic.w	r3, r3, #16
 8005600:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005602:	4b24      	ldr	r3, [pc, #144]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 8005604:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005606:	4b24      	ldr	r3, [pc, #144]	; (8005698 <RCCEx_PLL2_Config+0x160>)
 8005608:	4013      	ands	r3, r2
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	69d2      	ldr	r2, [r2, #28]
 800560e:	00d2      	lsls	r2, r2, #3
 8005610:	4920      	ldr	r1, [pc, #128]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 8005612:	4313      	orrs	r3, r2
 8005614:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005616:	4b1f      	ldr	r3, [pc, #124]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 8005618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561a:	4a1e      	ldr	r2, [pc, #120]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 800561c:	f043 0310 	orr.w	r3, r3, #16
 8005620:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d106      	bne.n	8005636 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005628:	4b1a      	ldr	r3, [pc, #104]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 800562a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562c:	4a19      	ldr	r2, [pc, #100]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 800562e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005632:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005634:	e00f      	b.n	8005656 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d106      	bne.n	800564a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800563c:	4b15      	ldr	r3, [pc, #84]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 800563e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005640:	4a14      	ldr	r2, [pc, #80]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 8005642:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005646:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005648:	e005      	b.n	8005656 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800564a:	4b12      	ldr	r3, [pc, #72]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 800564c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564e:	4a11      	ldr	r2, [pc, #68]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 8005650:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005654:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005656:	4b0f      	ldr	r3, [pc, #60]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a0e      	ldr	r2, [pc, #56]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 800565c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005660:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005662:	f7fb f9a1 	bl	80009a8 <HAL_GetTick>
 8005666:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005668:	e008      	b.n	800567c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800566a:	f7fb f99d 	bl	80009a8 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	2b02      	cmp	r3, #2
 8005676:	d901      	bls.n	800567c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e006      	b.n	800568a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800567c:	4b05      	ldr	r3, [pc, #20]	; (8005694 <RCCEx_PLL2_Config+0x15c>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d0f0      	beq.n	800566a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005688:	7bfb      	ldrb	r3, [r7, #15]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	58024400 	.word	0x58024400
 8005698:	ffff0007 	.word	0xffff0007

0800569c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056aa:	4b53      	ldr	r3, [pc, #332]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 80056ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ae:	f003 0303 	and.w	r3, r3, #3
 80056b2:	2b03      	cmp	r3, #3
 80056b4:	d101      	bne.n	80056ba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e099      	b.n	80057ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80056ba:	4b4f      	ldr	r3, [pc, #316]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a4e      	ldr	r2, [pc, #312]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 80056c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056c6:	f7fb f96f 	bl	80009a8 <HAL_GetTick>
 80056ca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80056cc:	e008      	b.n	80056e0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80056ce:	f7fb f96b 	bl	80009a8 <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d901      	bls.n	80056e0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e086      	b.n	80057ee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80056e0:	4b45      	ldr	r3, [pc, #276]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1f0      	bne.n	80056ce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80056ec:	4b42      	ldr	r3, [pc, #264]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 80056ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	051b      	lsls	r3, r3, #20
 80056fa:	493f      	ldr	r1, [pc, #252]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	628b      	str	r3, [r1, #40]	; 0x28
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	3b01      	subs	r3, #1
 8005706:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	3b01      	subs	r3, #1
 8005710:	025b      	lsls	r3, r3, #9
 8005712:	b29b      	uxth	r3, r3
 8005714:	431a      	orrs	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	3b01      	subs	r3, #1
 800571c:	041b      	lsls	r3, r3, #16
 800571e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005722:	431a      	orrs	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	3b01      	subs	r3, #1
 800572a:	061b      	lsls	r3, r3, #24
 800572c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005730:	4931      	ldr	r1, [pc, #196]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 8005732:	4313      	orrs	r3, r2
 8005734:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005736:	4b30      	ldr	r3, [pc, #192]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 8005738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	492d      	ldr	r1, [pc, #180]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 8005744:	4313      	orrs	r3, r2
 8005746:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005748:	4b2b      	ldr	r3, [pc, #172]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 800574a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	4928      	ldr	r1, [pc, #160]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 8005756:	4313      	orrs	r3, r2
 8005758:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800575a:	4b27      	ldr	r3, [pc, #156]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 800575c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575e:	4a26      	ldr	r2, [pc, #152]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 8005760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005764:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005766:	4b24      	ldr	r3, [pc, #144]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 8005768:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800576a:	4b24      	ldr	r3, [pc, #144]	; (80057fc <RCCEx_PLL3_Config+0x160>)
 800576c:	4013      	ands	r3, r2
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	69d2      	ldr	r2, [r2, #28]
 8005772:	00d2      	lsls	r2, r2, #3
 8005774:	4920      	ldr	r1, [pc, #128]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 8005776:	4313      	orrs	r3, r2
 8005778:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800577a:	4b1f      	ldr	r3, [pc, #124]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 800577c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577e:	4a1e      	ldr	r2, [pc, #120]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 8005780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005784:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d106      	bne.n	800579a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800578c:	4b1a      	ldr	r3, [pc, #104]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 800578e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005790:	4a19      	ldr	r2, [pc, #100]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 8005792:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005796:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005798:	e00f      	b.n	80057ba <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d106      	bne.n	80057ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80057a0:	4b15      	ldr	r3, [pc, #84]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 80057a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a4:	4a14      	ldr	r2, [pc, #80]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 80057a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80057aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80057ac:	e005      	b.n	80057ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80057ae:	4b12      	ldr	r3, [pc, #72]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 80057b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b2:	4a11      	ldr	r2, [pc, #68]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 80057b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80057ba:	4b0f      	ldr	r3, [pc, #60]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a0e      	ldr	r2, [pc, #56]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 80057c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057c6:	f7fb f8ef 	bl	80009a8 <HAL_GetTick>
 80057ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80057cc:	e008      	b.n	80057e0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80057ce:	f7fb f8eb 	bl	80009a8 <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d901      	bls.n	80057e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e006      	b.n	80057ee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80057e0:	4b05      	ldr	r3, [pc, #20]	; (80057f8 <RCCEx_PLL3_Config+0x15c>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d0f0      	beq.n	80057ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80057ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	58024400 	.word	0x58024400
 80057fc:	ffff0007 	.word	0xffff0007

08005800 <__libc_init_array>:
 8005800:	b570      	push	{r4, r5, r6, lr}
 8005802:	4d0d      	ldr	r5, [pc, #52]	; (8005838 <__libc_init_array+0x38>)
 8005804:	4c0d      	ldr	r4, [pc, #52]	; (800583c <__libc_init_array+0x3c>)
 8005806:	1b64      	subs	r4, r4, r5
 8005808:	10a4      	asrs	r4, r4, #2
 800580a:	2600      	movs	r6, #0
 800580c:	42a6      	cmp	r6, r4
 800580e:	d109      	bne.n	8005824 <__libc_init_array+0x24>
 8005810:	4d0b      	ldr	r5, [pc, #44]	; (8005840 <__libc_init_array+0x40>)
 8005812:	4c0c      	ldr	r4, [pc, #48]	; (8005844 <__libc_init_array+0x44>)
 8005814:	f000 f820 	bl	8005858 <_init>
 8005818:	1b64      	subs	r4, r4, r5
 800581a:	10a4      	asrs	r4, r4, #2
 800581c:	2600      	movs	r6, #0
 800581e:	42a6      	cmp	r6, r4
 8005820:	d105      	bne.n	800582e <__libc_init_array+0x2e>
 8005822:	bd70      	pop	{r4, r5, r6, pc}
 8005824:	f855 3b04 	ldr.w	r3, [r5], #4
 8005828:	4798      	blx	r3
 800582a:	3601      	adds	r6, #1
 800582c:	e7ee      	b.n	800580c <__libc_init_array+0xc>
 800582e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005832:	4798      	blx	r3
 8005834:	3601      	adds	r6, #1
 8005836:	e7f2      	b.n	800581e <__libc_init_array+0x1e>
 8005838:	08005880 	.word	0x08005880
 800583c:	08005880 	.word	0x08005880
 8005840:	08005880 	.word	0x08005880
 8005844:	08005884 	.word	0x08005884

08005848 <memset>:
 8005848:	4402      	add	r2, r0
 800584a:	4603      	mov	r3, r0
 800584c:	4293      	cmp	r3, r2
 800584e:	d100      	bne.n	8005852 <memset+0xa>
 8005850:	4770      	bx	lr
 8005852:	f803 1b01 	strb.w	r1, [r3], #1
 8005856:	e7f9      	b.n	800584c <memset+0x4>

08005858 <_init>:
 8005858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800585a:	bf00      	nop
 800585c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800585e:	bc08      	pop	{r3}
 8005860:	469e      	mov	lr, r3
 8005862:	4770      	bx	lr

08005864 <_fini>:
 8005864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005866:	bf00      	nop
 8005868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800586a:	bc08      	pop	{r3}
 800586c:	469e      	mov	lr, r3
 800586e:	4770      	bx	lr
