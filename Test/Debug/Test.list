
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a08  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001ca0  08001ca0  00011ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001cb0  08001cb0  00011cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001cb4  08001cb4  00011cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08001cb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  20000010  08001cc8  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000034  08001cc8  00020034  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000cf66  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000197a  00000000  00000000  0002cfa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000005f8  00000000  00000000  0002e920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000560  00000000  00000000  0002ef18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00033cfd  00000000  00000000  0002f478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00006b69  00000000  00000000  00063175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014b9b1  00000000  00000000  00069cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001b568f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001678  00000000  00000000  001b56e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08001c88 	.word	0x08001c88

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	08001c88 	.word	0x08001c88

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002dc:	f000 f9be 	bl	800065c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e0:	f000 f81e 	bl	8000320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e4:	f000 f886 	bl	80003f4 <MX_GPIO_Init>
  static unsigned short pin_state = 0;
  while (1)
  {
    /* USER CODE END WHILE */

	  pin_state = !pin_state;
 80002e8:	4b0b      	ldr	r3, [pc, #44]	; (8000318 <main+0x40>)
 80002ea:	881b      	ldrh	r3, [r3, #0]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	bf0c      	ite	eq
 80002f0:	2301      	moveq	r3, #1
 80002f2:	2300      	movne	r3, #0
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	b29a      	uxth	r2, r3
 80002f8:	4b07      	ldr	r3, [pc, #28]	; (8000318 <main+0x40>)
 80002fa:	801a      	strh	r2, [r3, #0]
	  // write pin state
	  // NOTE: You can in turn use HAL_GPIO_TogglePin
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, pin_state);
 80002fc:	4b06      	ldr	r3, [pc, #24]	; (8000318 <main+0x40>)
 80002fe:	881b      	ldrh	r3, [r3, #0]
 8000300:	b2db      	uxtb	r3, r3
 8000302:	461a      	mov	r2, r3
 8000304:	2101      	movs	r1, #1
 8000306:	4805      	ldr	r0, [pc, #20]	; (800031c <main+0x44>)
 8000308:	f000 fcfe 	bl	8000d08 <HAL_GPIO_WritePin>
	  // synchronous delay for 500 ms
	  HAL_Delay(500);
 800030c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000310:	f000 fa36 	bl	8000780 <HAL_Delay>
	  pin_state = !pin_state;
 8000314:	e7e8      	b.n	80002e8 <main+0x10>
 8000316:	bf00      	nop
 8000318:	2000002c 	.word	0x2000002c
 800031c:	58020400 	.word	0x58020400

08000320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b09c      	sub	sp, #112	; 0x70
 8000324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800032a:	224c      	movs	r2, #76	; 0x4c
 800032c:	2100      	movs	r1, #0
 800032e:	4618      	mov	r0, r3
 8000330:	f001 fca2 	bl	8001c78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	2220      	movs	r2, #32
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f001 fc9c 	bl	8001c78 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000340:	2002      	movs	r0, #2
 8000342:	f000 fcfb 	bl	8000d3c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000346:	2300      	movs	r3, #0
 8000348:	603b      	str	r3, [r7, #0]
 800034a:	4b28      	ldr	r3, [pc, #160]	; (80003ec <SystemClock_Config+0xcc>)
 800034c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800034e:	4a27      	ldr	r2, [pc, #156]	; (80003ec <SystemClock_Config+0xcc>)
 8000350:	f023 0301 	bic.w	r3, r3, #1
 8000354:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000356:	4b25      	ldr	r3, [pc, #148]	; (80003ec <SystemClock_Config+0xcc>)
 8000358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800035a:	f003 0301 	and.w	r3, r3, #1
 800035e:	603b      	str	r3, [r7, #0]
 8000360:	4b23      	ldr	r3, [pc, #140]	; (80003f0 <SystemClock_Config+0xd0>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <SystemClock_Config+0xd0>)
 800036a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800036e:	6193      	str	r3, [r2, #24]
 8000370:	4b1f      	ldr	r3, [pc, #124]	; (80003f0 <SystemClock_Config+0xd0>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000378:	603b      	str	r3, [r7, #0]
 800037a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800037c:	bf00      	nop
 800037e:	4b1c      	ldr	r3, [pc, #112]	; (80003f0 <SystemClock_Config+0xd0>)
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800038a:	d1f8      	bne.n	800037e <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800038c:	2302      	movs	r3, #2
 800038e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000390:	2301      	movs	r3, #1
 8000392:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000394:	2340      	movs	r3, #64	; 0x40
 8000396:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000398:	2300      	movs	r3, #0
 800039a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800039c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003a0:	4618      	mov	r0, r3
 80003a2:	f000 fd05 	bl	8000db0 <HAL_RCC_OscConfig>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80003ac:	f000 f856 	bl	800045c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b0:	233f      	movs	r3, #63	; 0x3f
 80003b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003b4:	2300      	movs	r3, #0
 80003b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003b8:	2300      	movs	r3, #0
 80003ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003bc:	2300      	movs	r3, #0
 80003be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80003c0:	2300      	movs	r3, #0
 80003c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80003c4:	2300      	movs	r3, #0
 80003c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80003c8:	2300      	movs	r3, #0
 80003ca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80003cc:	2300      	movs	r3, #0
 80003ce:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	2101      	movs	r1, #1
 80003d4:	4618      	mov	r0, r3
 80003d6:	f001 f8fb 	bl	80015d0 <HAL_RCC_ClockConfig>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80003e0:	f000 f83c 	bl	800045c <Error_Handler>
  }
}
 80003e4:	bf00      	nop
 80003e6:	3770      	adds	r7, #112	; 0x70
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	58000400 	.word	0x58000400
 80003f0:	58024800 	.word	0x58024800

080003f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b086      	sub	sp, #24
 80003f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	605a      	str	r2, [r3, #4]
 8000402:	609a      	str	r2, [r3, #8]
 8000404:	60da      	str	r2, [r3, #12]
 8000406:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000408:	4b12      	ldr	r3, [pc, #72]	; (8000454 <MX_GPIO_Init+0x60>)
 800040a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800040e:	4a11      	ldr	r2, [pc, #68]	; (8000454 <MX_GPIO_Init+0x60>)
 8000410:	f043 0302 	orr.w	r3, r3, #2
 8000414:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000418:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <MX_GPIO_Init+0x60>)
 800041a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800041e:	f003 0302 	and.w	r3, r3, #2
 8000422:	603b      	str	r3, [r7, #0]
 8000424:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000426:	2200      	movs	r2, #0
 8000428:	2101      	movs	r1, #1
 800042a:	480b      	ldr	r0, [pc, #44]	; (8000458 <MX_GPIO_Init+0x64>)
 800042c:	f000 fc6c 	bl	8000d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000430:	2301      	movs	r3, #1
 8000432:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000434:	2301      	movs	r3, #1
 8000436:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000438:	2300      	movs	r3, #0
 800043a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800043c:	2300      	movs	r3, #0
 800043e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	4619      	mov	r1, r3
 8000444:	4804      	ldr	r0, [pc, #16]	; (8000458 <MX_GPIO_Init+0x64>)
 8000446:	f000 faaf 	bl	80009a8 <HAL_GPIO_Init>

}
 800044a:	bf00      	nop
 800044c:	3718      	adds	r7, #24
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	58024400 	.word	0x58024400
 8000458:	58020400 	.word	0x58020400

0800045c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000460:	b672      	cpsid	i
}
 8000462:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000464:	e7fe      	b.n	8000464 <Error_Handler+0x8>
	...

08000468 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800046e:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <HAL_MspInit+0x30>)
 8000470:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000474:	4a08      	ldr	r2, [pc, #32]	; (8000498 <HAL_MspInit+0x30>)
 8000476:	f043 0302 	orr.w	r3, r3, #2
 800047a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800047e:	4b06      	ldr	r3, [pc, #24]	; (8000498 <HAL_MspInit+0x30>)
 8000480:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000484:	f003 0302 	and.w	r3, r3, #2
 8000488:	607b      	str	r3, [r7, #4]
 800048a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800048c:	bf00      	nop
 800048e:	370c      	adds	r7, #12
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr
 8000498:	58024400 	.word	0x58024400

0800049c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004a0:	e7fe      	b.n	80004a0 <NMI_Handler+0x4>

080004a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004a6:	e7fe      	b.n	80004a6 <HardFault_Handler+0x4>

080004a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004ac:	e7fe      	b.n	80004ac <MemManage_Handler+0x4>

080004ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004b2:	e7fe      	b.n	80004b2 <BusFault_Handler+0x4>

080004b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <UsageFault_Handler+0x4>

080004ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004be:	bf00      	nop
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr

080004c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr

080004d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004da:	bf00      	nop
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr

080004e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004e8:	f000 f92a 	bl	8000740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ec:	bf00      	nop
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80004f4:	4b39      	ldr	r3, [pc, #228]	; (80005dc <SystemInit+0xec>)
 80004f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004fa:	4a38      	ldr	r2, [pc, #224]	; (80005dc <SystemInit+0xec>)
 80004fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000500:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000504:	4b36      	ldr	r3, [pc, #216]	; (80005e0 <SystemInit+0xf0>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f003 030f 	and.w	r3, r3, #15
 800050c:	2b06      	cmp	r3, #6
 800050e:	d807      	bhi.n	8000520 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000510:	4b33      	ldr	r3, [pc, #204]	; (80005e0 <SystemInit+0xf0>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f023 030f 	bic.w	r3, r3, #15
 8000518:	4a31      	ldr	r2, [pc, #196]	; (80005e0 <SystemInit+0xf0>)
 800051a:	f043 0307 	orr.w	r3, r3, #7
 800051e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000520:	4b30      	ldr	r3, [pc, #192]	; (80005e4 <SystemInit+0xf4>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a2f      	ldr	r2, [pc, #188]	; (80005e4 <SystemInit+0xf4>)
 8000526:	f043 0301 	orr.w	r3, r3, #1
 800052a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800052c:	4b2d      	ldr	r3, [pc, #180]	; (80005e4 <SystemInit+0xf4>)
 800052e:	2200      	movs	r2, #0
 8000530:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000532:	4b2c      	ldr	r3, [pc, #176]	; (80005e4 <SystemInit+0xf4>)
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	492b      	ldr	r1, [pc, #172]	; (80005e4 <SystemInit+0xf4>)
 8000538:	4b2b      	ldr	r3, [pc, #172]	; (80005e8 <SystemInit+0xf8>)
 800053a:	4013      	ands	r3, r2
 800053c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800053e:	4b28      	ldr	r3, [pc, #160]	; (80005e0 <SystemInit+0xf0>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f003 0308 	and.w	r3, r3, #8
 8000546:	2b00      	cmp	r3, #0
 8000548:	d007      	beq.n	800055a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800054a:	4b25      	ldr	r3, [pc, #148]	; (80005e0 <SystemInit+0xf0>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f023 030f 	bic.w	r3, r3, #15
 8000552:	4a23      	ldr	r2, [pc, #140]	; (80005e0 <SystemInit+0xf0>)
 8000554:	f043 0307 	orr.w	r3, r3, #7
 8000558:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800055a:	4b22      	ldr	r3, [pc, #136]	; (80005e4 <SystemInit+0xf4>)
 800055c:	2200      	movs	r2, #0
 800055e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000560:	4b20      	ldr	r3, [pc, #128]	; (80005e4 <SystemInit+0xf4>)
 8000562:	2200      	movs	r2, #0
 8000564:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000566:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <SystemInit+0xf4>)
 8000568:	2200      	movs	r2, #0
 800056a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800056c:	4b1d      	ldr	r3, [pc, #116]	; (80005e4 <SystemInit+0xf4>)
 800056e:	4a1f      	ldr	r2, [pc, #124]	; (80005ec <SystemInit+0xfc>)
 8000570:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000572:	4b1c      	ldr	r3, [pc, #112]	; (80005e4 <SystemInit+0xf4>)
 8000574:	4a1e      	ldr	r2, [pc, #120]	; (80005f0 <SystemInit+0x100>)
 8000576:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000578:	4b1a      	ldr	r3, [pc, #104]	; (80005e4 <SystemInit+0xf4>)
 800057a:	4a1e      	ldr	r2, [pc, #120]	; (80005f4 <SystemInit+0x104>)
 800057c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800057e:	4b19      	ldr	r3, [pc, #100]	; (80005e4 <SystemInit+0xf4>)
 8000580:	2200      	movs	r2, #0
 8000582:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000584:	4b17      	ldr	r3, [pc, #92]	; (80005e4 <SystemInit+0xf4>)
 8000586:	4a1b      	ldr	r2, [pc, #108]	; (80005f4 <SystemInit+0x104>)
 8000588:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800058a:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <SystemInit+0xf4>)
 800058c:	2200      	movs	r2, #0
 800058e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000590:	4b14      	ldr	r3, [pc, #80]	; (80005e4 <SystemInit+0xf4>)
 8000592:	4a18      	ldr	r2, [pc, #96]	; (80005f4 <SystemInit+0x104>)
 8000594:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000596:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <SystemInit+0xf4>)
 8000598:	2200      	movs	r2, #0
 800059a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800059c:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <SystemInit+0xf4>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a10      	ldr	r2, [pc, #64]	; (80005e4 <SystemInit+0xf4>)
 80005a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80005a8:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <SystemInit+0xf4>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80005ae:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <SystemInit+0x108>)
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	4b12      	ldr	r3, [pc, #72]	; (80005fc <SystemInit+0x10c>)
 80005b4:	4013      	ands	r3, r2
 80005b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80005ba:	d202      	bcs.n	80005c2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80005bc:	4b10      	ldr	r3, [pc, #64]	; (8000600 <SystemInit+0x110>)
 80005be:	2201      	movs	r2, #1
 80005c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <SystemInit+0x114>)
 80005c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80005c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005ca:	4b04      	ldr	r3, [pc, #16]	; (80005dc <SystemInit+0xec>)
 80005cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005d0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80005d2:	bf00      	nop
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	e000ed00 	.word	0xe000ed00
 80005e0:	52002000 	.word	0x52002000
 80005e4:	58024400 	.word	0x58024400
 80005e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80005ec:	02020200 	.word	0x02020200
 80005f0:	01ff0000 	.word	0x01ff0000
 80005f4:	01010280 	.word	0x01010280
 80005f8:	5c001000 	.word	0x5c001000
 80005fc:	ffff0000 	.word	0xffff0000
 8000600:	51008108 	.word	0x51008108
 8000604:	52004000 	.word	0x52004000

08000608 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000608:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000640 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800060c:	f7ff ff70 	bl	80004f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000610:	480c      	ldr	r0, [pc, #48]	; (8000644 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000612:	490d      	ldr	r1, [pc, #52]	; (8000648 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000614:	4a0d      	ldr	r2, [pc, #52]	; (800064c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000618:	e002      	b.n	8000620 <LoopCopyDataInit>

0800061a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800061a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800061c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800061e:	3304      	adds	r3, #4

08000620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000624:	d3f9      	bcc.n	800061a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000626:	4a0a      	ldr	r2, [pc, #40]	; (8000650 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000628:	4c0a      	ldr	r4, [pc, #40]	; (8000654 <LoopFillZerobss+0x22>)
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800062c:	e001      	b.n	8000632 <LoopFillZerobss>

0800062e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800062e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000630:	3204      	adds	r2, #4

08000632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000634:	d3fb      	bcc.n	800062e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000636:	f001 fafb 	bl	8001c30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800063a:	f7ff fe4d 	bl	80002d8 <main>
  bx  lr
 800063e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000640:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000648:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800064c:	08001cb8 	.word	0x08001cb8
  ldr r2, =_sbss
 8000650:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000654:	20000034 	.word	0x20000034

08000658 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000658:	e7fe      	b.n	8000658 <ADC3_IRQHandler>
	...

0800065c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000662:	2003      	movs	r0, #3
 8000664:	f000 f96e 	bl	8000944 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000668:	f001 f968 	bl	800193c <HAL_RCC_GetSysClockFreq>
 800066c:	4602      	mov	r2, r0
 800066e:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <HAL_Init+0x68>)
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	0a1b      	lsrs	r3, r3, #8
 8000674:	f003 030f 	and.w	r3, r3, #15
 8000678:	4913      	ldr	r1, [pc, #76]	; (80006c8 <HAL_Init+0x6c>)
 800067a:	5ccb      	ldrb	r3, [r1, r3]
 800067c:	f003 031f 	and.w	r3, r3, #31
 8000680:	fa22 f303 	lsr.w	r3, r2, r3
 8000684:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000686:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <HAL_Init+0x68>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	f003 030f 	and.w	r3, r3, #15
 800068e:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <HAL_Init+0x6c>)
 8000690:	5cd3      	ldrb	r3, [r2, r3]
 8000692:	f003 031f 	and.w	r3, r3, #31
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	fa22 f303 	lsr.w	r3, r2, r3
 800069c:	4a0b      	ldr	r2, [pc, #44]	; (80006cc <HAL_Init+0x70>)
 800069e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80006a0:	4a0b      	ldr	r2, [pc, #44]	; (80006d0 <HAL_Init+0x74>)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006a6:	2000      	movs	r0, #0
 80006a8:	f000 f814 	bl	80006d4 <HAL_InitTick>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80006b2:	2301      	movs	r3, #1
 80006b4:	e002      	b.n	80006bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80006b6:	f7ff fed7 	bl	8000468 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006ba:	2300      	movs	r3, #0
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	58024400 	.word	0x58024400
 80006c8:	08001ca0 	.word	0x08001ca0
 80006cc:	20000004 	.word	0x20000004
 80006d0:	20000000 	.word	0x20000000

080006d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80006dc:	4b15      	ldr	r3, [pc, #84]	; (8000734 <HAL_InitTick+0x60>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d101      	bne.n	80006e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80006e4:	2301      	movs	r3, #1
 80006e6:	e021      	b.n	800072c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80006e8:	4b13      	ldr	r3, [pc, #76]	; (8000738 <HAL_InitTick+0x64>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <HAL_InitTick+0x60>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	4619      	mov	r1, r3
 80006f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 f945 	bl	800098e <HAL_SYSTICK_Config>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800070a:	2301      	movs	r3, #1
 800070c:	e00e      	b.n	800072c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2b0f      	cmp	r3, #15
 8000712:	d80a      	bhi.n	800072a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000714:	2200      	movs	r2, #0
 8000716:	6879      	ldr	r1, [r7, #4]
 8000718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800071c:	f000 f91d 	bl	800095a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000720:	4a06      	ldr	r2, [pc, #24]	; (800073c <HAL_InitTick+0x68>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000726:	2300      	movs	r3, #0
 8000728:	e000      	b.n	800072c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800072a:	2301      	movs	r3, #1
}
 800072c:	4618      	mov	r0, r3
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	2000000c 	.word	0x2000000c
 8000738:	20000000 	.word	0x20000000
 800073c:	20000008 	.word	0x20000008

08000740 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <HAL_IncTick+0x20>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	461a      	mov	r2, r3
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <HAL_IncTick+0x24>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4413      	add	r3, r2
 8000750:	4a04      	ldr	r2, [pc, #16]	; (8000764 <HAL_IncTick+0x24>)
 8000752:	6013      	str	r3, [r2, #0]
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	2000000c 	.word	0x2000000c
 8000764:	20000030 	.word	0x20000030

08000768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  return uwTick;
 800076c:	4b03      	ldr	r3, [pc, #12]	; (800077c <HAL_GetTick+0x14>)
 800076e:	681b      	ldr	r3, [r3, #0]
}
 8000770:	4618      	mov	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	20000030 	.word	0x20000030

08000780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000788:	f7ff ffee 	bl	8000768 <HAL_GetTick>
 800078c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000798:	d005      	beq.n	80007a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800079a:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <HAL_Delay+0x44>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	461a      	mov	r2, r3
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	4413      	add	r3, r2
 80007a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007a6:	bf00      	nop
 80007a8:	f7ff ffde 	bl	8000768 <HAL_GetTick>
 80007ac:	4602      	mov	r2, r0
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	1ad3      	subs	r3, r2, r3
 80007b2:	68fa      	ldr	r2, [r7, #12]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d8f7      	bhi.n	80007a8 <HAL_Delay+0x28>
  {
  }
}
 80007b8:	bf00      	nop
 80007ba:	bf00      	nop
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	2000000c 	.word	0x2000000c

080007c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80007cc:	4b03      	ldr	r3, [pc, #12]	; (80007dc <HAL_GetREVID+0x14>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	0c1b      	lsrs	r3, r3, #16
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	5c001000 	.word	0x5c001000

080007e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f003 0307 	and.w	r3, r3, #7
 80007ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007f0:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <__NVIC_SetPriorityGrouping+0x40>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007f6:	68ba      	ldr	r2, [r7, #8]
 80007f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007fc:	4013      	ands	r3, r2
 80007fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <__NVIC_SetPriorityGrouping+0x44>)
 800080a:	4313      	orrs	r3, r2
 800080c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800080e:	4a04      	ldr	r2, [pc, #16]	; (8000820 <__NVIC_SetPriorityGrouping+0x40>)
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	60d3      	str	r3, [r2, #12]
}
 8000814:	bf00      	nop
 8000816:	3714      	adds	r7, #20
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	e000ed00 	.word	0xe000ed00
 8000824:	05fa0000 	.word	0x05fa0000

08000828 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800082c:	4b04      	ldr	r3, [pc, #16]	; (8000840 <__NVIC_GetPriorityGrouping+0x18>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	0a1b      	lsrs	r3, r3, #8
 8000832:	f003 0307 	and.w	r3, r3, #7
}
 8000836:	4618      	mov	r0, r3
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	6039      	str	r1, [r7, #0]
 800084e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000850:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000854:	2b00      	cmp	r3, #0
 8000856:	db0a      	blt.n	800086e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	b2da      	uxtb	r2, r3
 800085c:	490c      	ldr	r1, [pc, #48]	; (8000890 <__NVIC_SetPriority+0x4c>)
 800085e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000862:	0112      	lsls	r2, r2, #4
 8000864:	b2d2      	uxtb	r2, r2
 8000866:	440b      	add	r3, r1
 8000868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800086c:	e00a      	b.n	8000884 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	b2da      	uxtb	r2, r3
 8000872:	4908      	ldr	r1, [pc, #32]	; (8000894 <__NVIC_SetPriority+0x50>)
 8000874:	88fb      	ldrh	r3, [r7, #6]
 8000876:	f003 030f 	and.w	r3, r3, #15
 800087a:	3b04      	subs	r3, #4
 800087c:	0112      	lsls	r2, r2, #4
 800087e:	b2d2      	uxtb	r2, r2
 8000880:	440b      	add	r3, r1
 8000882:	761a      	strb	r2, [r3, #24]
}
 8000884:	bf00      	nop
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	e000e100 	.word	0xe000e100
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000898:	b480      	push	{r7}
 800089a:	b089      	sub	sp, #36	; 0x24
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	f003 0307 	and.w	r3, r3, #7
 80008aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008ac:	69fb      	ldr	r3, [r7, #28]
 80008ae:	f1c3 0307 	rsb	r3, r3, #7
 80008b2:	2b04      	cmp	r3, #4
 80008b4:	bf28      	it	cs
 80008b6:	2304      	movcs	r3, #4
 80008b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	3304      	adds	r3, #4
 80008be:	2b06      	cmp	r3, #6
 80008c0:	d902      	bls.n	80008c8 <NVIC_EncodePriority+0x30>
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	3b03      	subs	r3, #3
 80008c6:	e000      	b.n	80008ca <NVIC_EncodePriority+0x32>
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008d0:	69bb      	ldr	r3, [r7, #24]
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	43da      	mvns	r2, r3
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	401a      	ands	r2, r3
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ea:	43d9      	mvns	r1, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f0:	4313      	orrs	r3, r2
         );
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3724      	adds	r7, #36	; 0x24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
	...

08000900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	3b01      	subs	r3, #1
 800090c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000910:	d301      	bcc.n	8000916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000912:	2301      	movs	r3, #1
 8000914:	e00f      	b.n	8000936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000916:	4a0a      	ldr	r2, [pc, #40]	; (8000940 <SysTick_Config+0x40>)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	3b01      	subs	r3, #1
 800091c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800091e:	210f      	movs	r1, #15
 8000920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000924:	f7ff ff8e 	bl	8000844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000928:	4b05      	ldr	r3, [pc, #20]	; (8000940 <SysTick_Config+0x40>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800092e:	4b04      	ldr	r3, [pc, #16]	; (8000940 <SysTick_Config+0x40>)
 8000930:	2207      	movs	r2, #7
 8000932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	e000e010 	.word	0xe000e010

08000944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f7ff ff47 	bl	80007e0 <__NVIC_SetPriorityGrouping>
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b086      	sub	sp, #24
 800095e:	af00      	add	r7, sp, #0
 8000960:	4603      	mov	r3, r0
 8000962:	60b9      	str	r1, [r7, #8]
 8000964:	607a      	str	r2, [r7, #4]
 8000966:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000968:	f7ff ff5e 	bl	8000828 <__NVIC_GetPriorityGrouping>
 800096c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	68b9      	ldr	r1, [r7, #8]
 8000972:	6978      	ldr	r0, [r7, #20]
 8000974:	f7ff ff90 	bl	8000898 <NVIC_EncodePriority>
 8000978:	4602      	mov	r2, r0
 800097a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800097e:	4611      	mov	r1, r2
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff ff5f 	bl	8000844 <__NVIC_SetPriority>
}
 8000986:	bf00      	nop
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	b082      	sub	sp, #8
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f7ff ffb2 	bl	8000900 <SysTick_Config>
 800099c:	4603      	mov	r3, r0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b089      	sub	sp, #36	; 0x24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80009b6:	4b89      	ldr	r3, [pc, #548]	; (8000bdc <HAL_GPIO_Init+0x234>)
 80009b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80009ba:	e194      	b.n	8000ce6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	2101      	movs	r1, #1
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	fa01 f303 	lsl.w	r3, r1, r3
 80009c8:	4013      	ands	r3, r2
 80009ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	f000 8186 	beq.w	8000ce0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d00b      	beq.n	80009f4 <HAL_GPIO_Init+0x4c>
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	2b02      	cmp	r3, #2
 80009e2:	d007      	beq.n	80009f4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009e8:	2b11      	cmp	r3, #17
 80009ea:	d003      	beq.n	80009f4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	2b12      	cmp	r3, #18
 80009f2:	d130      	bne.n	8000a56 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	2203      	movs	r2, #3
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	43db      	mvns	r3, r3
 8000a06:	69ba      	ldr	r2, [r7, #24]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	68da      	ldr	r2, [r3, #12]
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	69ba      	ldr	r2, [r7, #24]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	69ba      	ldr	r2, [r7, #24]
 8000a22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	69fb      	ldr	r3, [r7, #28]
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	43db      	mvns	r3, r3
 8000a34:	69ba      	ldr	r2, [r7, #24]
 8000a36:	4013      	ands	r3, r2
 8000a38:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	091b      	lsrs	r3, r3, #4
 8000a40:	f003 0201 	and.w	r2, r3, #1
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	69ba      	ldr	r2, [r7, #24]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	69ba      	ldr	r2, [r7, #24]
 8000a54:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	68db      	ldr	r3, [r3, #12]
 8000a5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	2203      	movs	r2, #3
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	43db      	mvns	r3, r3
 8000a68:	69ba      	ldr	r2, [r7, #24]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	689a      	ldr	r2, [r3, #8]
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	69ba      	ldr	r2, [r7, #24]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	69ba      	ldr	r2, [r7, #24]
 8000a84:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	2b02      	cmp	r3, #2
 8000a8c:	d003      	beq.n	8000a96 <HAL_GPIO_Init+0xee>
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	2b12      	cmp	r3, #18
 8000a94:	d123      	bne.n	8000ade <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	08da      	lsrs	r2, r3, #3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	3208      	adds	r2, #8
 8000a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000aa4:	69fb      	ldr	r3, [r7, #28]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	220f      	movs	r2, #15
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	43db      	mvns	r3, r3
 8000ab4:	69ba      	ldr	r2, [r7, #24]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	691a      	ldr	r2, [r3, #16]
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	f003 0307 	and.w	r3, r3, #7
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	69ba      	ldr	r2, [r7, #24]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	08da      	lsrs	r2, r3, #3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3208      	adds	r2, #8
 8000ad8:	69b9      	ldr	r1, [r7, #24]
 8000ada:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	2203      	movs	r2, #3
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	43db      	mvns	r3, r3
 8000af0:	69ba      	ldr	r2, [r7, #24]
 8000af2:	4013      	ands	r3, r2
 8000af4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f003 0203 	and.w	r2, r3, #3
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	69ba      	ldr	r2, [r7, #24]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	69ba      	ldr	r2, [r7, #24]
 8000b10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f000 80e0 	beq.w	8000ce0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b20:	4b2f      	ldr	r3, [pc, #188]	; (8000be0 <HAL_GPIO_Init+0x238>)
 8000b22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b26:	4a2e      	ldr	r2, [pc, #184]	; (8000be0 <HAL_GPIO_Init+0x238>)
 8000b28:	f043 0302 	orr.w	r3, r3, #2
 8000b2c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b30:	4b2b      	ldr	r3, [pc, #172]	; (8000be0 <HAL_GPIO_Init+0x238>)
 8000b32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b3e:	4a29      	ldr	r2, [pc, #164]	; (8000be4 <HAL_GPIO_Init+0x23c>)
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	089b      	lsrs	r3, r3, #2
 8000b44:	3302      	adds	r3, #2
 8000b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	f003 0303 	and.w	r3, r3, #3
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	220f      	movs	r2, #15
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	43db      	mvns	r3, r3
 8000b5c:	69ba      	ldr	r2, [r7, #24]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a20      	ldr	r2, [pc, #128]	; (8000be8 <HAL_GPIO_Init+0x240>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d052      	beq.n	8000c10 <HAL_GPIO_Init+0x268>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a1f      	ldr	r2, [pc, #124]	; (8000bec <HAL_GPIO_Init+0x244>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d031      	beq.n	8000bd6 <HAL_GPIO_Init+0x22e>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a1e      	ldr	r2, [pc, #120]	; (8000bf0 <HAL_GPIO_Init+0x248>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d02b      	beq.n	8000bd2 <HAL_GPIO_Init+0x22a>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4a1d      	ldr	r2, [pc, #116]	; (8000bf4 <HAL_GPIO_Init+0x24c>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d025      	beq.n	8000bce <HAL_GPIO_Init+0x226>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a1c      	ldr	r2, [pc, #112]	; (8000bf8 <HAL_GPIO_Init+0x250>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d01f      	beq.n	8000bca <HAL_GPIO_Init+0x222>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a1b      	ldr	r2, [pc, #108]	; (8000bfc <HAL_GPIO_Init+0x254>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d019      	beq.n	8000bc6 <HAL_GPIO_Init+0x21e>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4a1a      	ldr	r2, [pc, #104]	; (8000c00 <HAL_GPIO_Init+0x258>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d013      	beq.n	8000bc2 <HAL_GPIO_Init+0x21a>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a19      	ldr	r2, [pc, #100]	; (8000c04 <HAL_GPIO_Init+0x25c>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d00d      	beq.n	8000bbe <HAL_GPIO_Init+0x216>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a18      	ldr	r2, [pc, #96]	; (8000c08 <HAL_GPIO_Init+0x260>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d007      	beq.n	8000bba <HAL_GPIO_Init+0x212>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4a17      	ldr	r2, [pc, #92]	; (8000c0c <HAL_GPIO_Init+0x264>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d101      	bne.n	8000bb6 <HAL_GPIO_Init+0x20e>
 8000bb2:	2309      	movs	r3, #9
 8000bb4:	e02d      	b.n	8000c12 <HAL_GPIO_Init+0x26a>
 8000bb6:	230a      	movs	r3, #10
 8000bb8:	e02b      	b.n	8000c12 <HAL_GPIO_Init+0x26a>
 8000bba:	2308      	movs	r3, #8
 8000bbc:	e029      	b.n	8000c12 <HAL_GPIO_Init+0x26a>
 8000bbe:	2307      	movs	r3, #7
 8000bc0:	e027      	b.n	8000c12 <HAL_GPIO_Init+0x26a>
 8000bc2:	2306      	movs	r3, #6
 8000bc4:	e025      	b.n	8000c12 <HAL_GPIO_Init+0x26a>
 8000bc6:	2305      	movs	r3, #5
 8000bc8:	e023      	b.n	8000c12 <HAL_GPIO_Init+0x26a>
 8000bca:	2304      	movs	r3, #4
 8000bcc:	e021      	b.n	8000c12 <HAL_GPIO_Init+0x26a>
 8000bce:	2303      	movs	r3, #3
 8000bd0:	e01f      	b.n	8000c12 <HAL_GPIO_Init+0x26a>
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	e01d      	b.n	8000c12 <HAL_GPIO_Init+0x26a>
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e01b      	b.n	8000c12 <HAL_GPIO_Init+0x26a>
 8000bda:	bf00      	nop
 8000bdc:	58000080 	.word	0x58000080
 8000be0:	58024400 	.word	0x58024400
 8000be4:	58000400 	.word	0x58000400
 8000be8:	58020000 	.word	0x58020000
 8000bec:	58020400 	.word	0x58020400
 8000bf0:	58020800 	.word	0x58020800
 8000bf4:	58020c00 	.word	0x58020c00
 8000bf8:	58021000 	.word	0x58021000
 8000bfc:	58021400 	.word	0x58021400
 8000c00:	58021800 	.word	0x58021800
 8000c04:	58021c00 	.word	0x58021c00
 8000c08:	58022000 	.word	0x58022000
 8000c0c:	58022400 	.word	0x58022400
 8000c10:	2300      	movs	r3, #0
 8000c12:	69fa      	ldr	r2, [r7, #28]
 8000c14:	f002 0203 	and.w	r2, r2, #3
 8000c18:	0092      	lsls	r2, r2, #2
 8000c1a:	4093      	lsls	r3, r2
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c22:	4938      	ldr	r1, [pc, #224]	; (8000d04 <HAL_GPIO_Init+0x35c>)
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	089b      	lsrs	r3, r3, #2
 8000c28:	3302      	adds	r3, #2
 8000c2a:	69ba      	ldr	r2, [r7, #24]
 8000c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	69ba      	ldr	r2, [r7, #24]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d003      	beq.n	8000c54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	69ba      	ldr	r2, [r7, #24]
 8000c58:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	43db      	mvns	r3, r3
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	4013      	ands	r3, r2
 8000c68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d003      	beq.n	8000c7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000c76:	69ba      	ldr	r2, [r7, #24]
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	69ba      	ldr	r2, [r7, #24]
 8000c82:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	4013      	ands	r3, r2
 8000c94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d003      	beq.n	8000caa <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8000ca2:	69ba      	ldr	r2, [r7, #24]
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000caa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d003      	beq.n	8000cd8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000cd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	fa22 f303 	lsr.w	r3, r2, r3
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	f47f ae63 	bne.w	80009bc <HAL_GPIO_Init+0x14>
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	bf00      	nop
 8000cfa:	3724      	adds	r7, #36	; 0x24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	58000400 	.word	0x58000400

08000d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	807b      	strh	r3, [r7, #2]
 8000d14:	4613      	mov	r3, r2
 8000d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d18:	787b      	ldrb	r3, [r7, #1]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d003      	beq.n	8000d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d1e:	887a      	ldrh	r2, [r7, #2]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000d24:	e003      	b.n	8000d2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000d26:	887b      	ldrh	r3, [r7, #2]
 8000d28:	041a      	lsls	r2, r3, #16
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	619a      	str	r2, [r3, #24]
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
	...

08000d3c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000d44:	4b19      	ldr	r3, [pc, #100]	; (8000dac <HAL_PWREx_ConfigSupply+0x70>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	f003 0304 	and.w	r3, r3, #4
 8000d4c:	2b04      	cmp	r3, #4
 8000d4e:	d00a      	beq.n	8000d66 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000d50:	4b16      	ldr	r3, [pc, #88]	; (8000dac <HAL_PWREx_ConfigSupply+0x70>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	f003 0307 	and.w	r3, r3, #7
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d001      	beq.n	8000d62 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e01f      	b.n	8000da2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000d62:	2300      	movs	r3, #0
 8000d64:	e01d      	b.n	8000da2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <HAL_PWREx_ConfigSupply+0x70>)
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	f023 0207 	bic.w	r2, r3, #7
 8000d6e:	490f      	ldr	r1, [pc, #60]	; (8000dac <HAL_PWREx_ConfigSupply+0x70>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000d76:	f7ff fcf7 	bl	8000768 <HAL_GetTick>
 8000d7a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000d7c:	e009      	b.n	8000d92 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000d7e:	f7ff fcf3 	bl	8000768 <HAL_GetTick>
 8000d82:	4602      	mov	r2, r0
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d8c:	d901      	bls.n	8000d92 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e007      	b.n	8000da2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_PWREx_ConfigSupply+0x70>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d9e:	d1ee      	bne.n	8000d7e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	58024800 	.word	0x58024800

08000db0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08c      	sub	sp, #48	; 0x30
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d101      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e3ff      	b.n	80015c2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f000 8087 	beq.w	8000ede <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000dd0:	4b99      	ldr	r3, [pc, #612]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 8000dd2:	691b      	ldr	r3, [r3, #16]
 8000dd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000dda:	4b97      	ldr	r3, [pc, #604]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 8000ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000de2:	2b10      	cmp	r3, #16
 8000de4:	d007      	beq.n	8000df6 <HAL_RCC_OscConfig+0x46>
 8000de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000de8:	2b18      	cmp	r3, #24
 8000dea:	d110      	bne.n	8000e0e <HAL_RCC_OscConfig+0x5e>
 8000dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dee:	f003 0303 	and.w	r3, r3, #3
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d10b      	bne.n	8000e0e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000df6:	4b90      	ldr	r3, [pc, #576]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d06c      	beq.n	8000edc <HAL_RCC_OscConfig+0x12c>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d168      	bne.n	8000edc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e3d9      	b.n	80015c2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e16:	d106      	bne.n	8000e26 <HAL_RCC_OscConfig+0x76>
 8000e18:	4b87      	ldr	r3, [pc, #540]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a86      	ldr	r2, [pc, #536]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 8000e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e22:	6013      	str	r3, [r2, #0]
 8000e24:	e02e      	b.n	8000e84 <HAL_RCC_OscConfig+0xd4>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d10c      	bne.n	8000e48 <HAL_RCC_OscConfig+0x98>
 8000e2e:	4b82      	ldr	r3, [pc, #520]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a81      	ldr	r2, [pc, #516]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 8000e34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e38:	6013      	str	r3, [r2, #0]
 8000e3a:	4b7f      	ldr	r3, [pc, #508]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a7e      	ldr	r2, [pc, #504]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 8000e40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e44:	6013      	str	r3, [r2, #0]
 8000e46:	e01d      	b.n	8000e84 <HAL_RCC_OscConfig+0xd4>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e50:	d10c      	bne.n	8000e6c <HAL_RCC_OscConfig+0xbc>
 8000e52:	4b79      	ldr	r3, [pc, #484]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a78      	ldr	r2, [pc, #480]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 8000e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e5c:	6013      	str	r3, [r2, #0]
 8000e5e:	4b76      	ldr	r3, [pc, #472]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a75      	ldr	r2, [pc, #468]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 8000e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e68:	6013      	str	r3, [r2, #0]
 8000e6a:	e00b      	b.n	8000e84 <HAL_RCC_OscConfig+0xd4>
 8000e6c:	4b72      	ldr	r3, [pc, #456]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a71      	ldr	r2, [pc, #452]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 8000e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e76:	6013      	str	r3, [r2, #0]
 8000e78:	4b6f      	ldr	r3, [pc, #444]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a6e      	ldr	r2, [pc, #440]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 8000e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d013      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e8c:	f7ff fc6c 	bl	8000768 <HAL_GetTick>
 8000e90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000e92:	e008      	b.n	8000ea6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e94:	f7ff fc68 	bl	8000768 <HAL_GetTick>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	2b64      	cmp	r3, #100	; 0x64
 8000ea0:	d901      	bls.n	8000ea6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	e38d      	b.n	80015c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ea6:	4b64      	ldr	r3, [pc, #400]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d0f0      	beq.n	8000e94 <HAL_RCC_OscConfig+0xe4>
 8000eb2:	e014      	b.n	8000ede <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eb4:	f7ff fc58 	bl	8000768 <HAL_GetTick>
 8000eb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000eba:	e008      	b.n	8000ece <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ebc:	f7ff fc54 	bl	8000768 <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	2b64      	cmp	r3, #100	; 0x64
 8000ec8:	d901      	bls.n	8000ece <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e379      	b.n	80015c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000ece:	4b5a      	ldr	r3, [pc, #360]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d1f0      	bne.n	8000ebc <HAL_RCC_OscConfig+0x10c>
 8000eda:	e000      	b.n	8000ede <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f000 80ae 	beq.w	8001048 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000eec:	4b52      	ldr	r3, [pc, #328]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 8000eee:	691b      	ldr	r3, [r3, #16]
 8000ef0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000ef4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000ef6:	4b50      	ldr	r3, [pc, #320]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 8000ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000efa:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000efc:	6a3b      	ldr	r3, [r7, #32]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d007      	beq.n	8000f12 <HAL_RCC_OscConfig+0x162>
 8000f02:	6a3b      	ldr	r3, [r7, #32]
 8000f04:	2b18      	cmp	r3, #24
 8000f06:	d13a      	bne.n	8000f7e <HAL_RCC_OscConfig+0x1ce>
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d135      	bne.n	8000f7e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f12:	4b49      	ldr	r3, [pc, #292]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0304 	and.w	r3, r3, #4
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d005      	beq.n	8000f2a <HAL_RCC_OscConfig+0x17a>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e34b      	b.n	80015c2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f2a:	f7ff fc4d 	bl	80007c8 <HAL_GetREVID>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	f241 0203 	movw	r2, #4099	; 0x1003
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d817      	bhi.n	8000f68 <HAL_RCC_OscConfig+0x1b8>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	691b      	ldr	r3, [r3, #16]
 8000f3c:	2b40      	cmp	r3, #64	; 0x40
 8000f3e:	d108      	bne.n	8000f52 <HAL_RCC_OscConfig+0x1a2>
 8000f40:	4b3d      	ldr	r3, [pc, #244]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000f48:	4a3b      	ldr	r2, [pc, #236]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 8000f4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f4e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f50:	e07a      	b.n	8001048 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f52:	4b39      	ldr	r3, [pc, #228]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	691b      	ldr	r3, [r3, #16]
 8000f5e:	031b      	lsls	r3, r3, #12
 8000f60:	4935      	ldr	r1, [pc, #212]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 8000f62:	4313      	orrs	r3, r2
 8000f64:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f66:	e06f      	b.n	8001048 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f68:	4b33      	ldr	r3, [pc, #204]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	691b      	ldr	r3, [r3, #16]
 8000f74:	061b      	lsls	r3, r3, #24
 8000f76:	4930      	ldr	r1, [pc, #192]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f7c:	e064      	b.n	8001048 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d045      	beq.n	8001012 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000f86:	4b2c      	ldr	r3, [pc, #176]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f023 0219 	bic.w	r2, r3, #25
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	4929      	ldr	r1, [pc, #164]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 8000f94:	4313      	orrs	r3, r2
 8000f96:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f98:	f7ff fbe6 	bl	8000768 <HAL_GetTick>
 8000f9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f9e:	e008      	b.n	8000fb2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fa0:	f7ff fbe2 	bl	8000768 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d901      	bls.n	8000fb2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e307      	b.n	80015c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000fb2:	4b21      	ldr	r3, [pc, #132]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 0304 	and.w	r3, r3, #4
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d0f0      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fbe:	f7ff fc03 	bl	80007c8 <HAL_GetREVID>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	f241 0203 	movw	r2, #4099	; 0x1003
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d817      	bhi.n	8000ffc <HAL_RCC_OscConfig+0x24c>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	691b      	ldr	r3, [r3, #16]
 8000fd0:	2b40      	cmp	r3, #64	; 0x40
 8000fd2:	d108      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x236>
 8000fd4:	4b18      	ldr	r3, [pc, #96]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000fdc:	4a16      	ldr	r2, [pc, #88]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 8000fde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe2:	6053      	str	r3, [r2, #4]
 8000fe4:	e030      	b.n	8001048 <HAL_RCC_OscConfig+0x298>
 8000fe6:	4b14      	ldr	r3, [pc, #80]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	031b      	lsls	r3, r3, #12
 8000ff4:	4910      	ldr	r1, [pc, #64]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	604b      	str	r3, [r1, #4]
 8000ffa:	e025      	b.n	8001048 <HAL_RCC_OscConfig+0x298>
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	691b      	ldr	r3, [r3, #16]
 8001008:	061b      	lsls	r3, r3, #24
 800100a:	490b      	ldr	r1, [pc, #44]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 800100c:	4313      	orrs	r3, r2
 800100e:	604b      	str	r3, [r1, #4]
 8001010:	e01a      	b.n	8001048 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a08      	ldr	r2, [pc, #32]	; (8001038 <HAL_RCC_OscConfig+0x288>)
 8001018:	f023 0301 	bic.w	r3, r3, #1
 800101c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800101e:	f7ff fba3 	bl	8000768 <HAL_GetTick>
 8001022:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001024:	e00a      	b.n	800103c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001026:	f7ff fb9f 	bl	8000768 <HAL_GetTick>
 800102a:	4602      	mov	r2, r0
 800102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d903      	bls.n	800103c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001034:	2303      	movs	r3, #3
 8001036:	e2c4      	b.n	80015c2 <HAL_RCC_OscConfig+0x812>
 8001038:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800103c:	4ba4      	ldr	r3, [pc, #656]	; (80012d0 <HAL_RCC_OscConfig+0x520>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0304 	and.w	r3, r3, #4
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1ee      	bne.n	8001026 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0310 	and.w	r3, r3, #16
 8001050:	2b00      	cmp	r3, #0
 8001052:	f000 80a9 	beq.w	80011a8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001056:	4b9e      	ldr	r3, [pc, #632]	; (80012d0 <HAL_RCC_OscConfig+0x520>)
 8001058:	691b      	ldr	r3, [r3, #16]
 800105a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800105e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001060:	4b9b      	ldr	r3, [pc, #620]	; (80012d0 <HAL_RCC_OscConfig+0x520>)
 8001062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001064:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	2b08      	cmp	r3, #8
 800106a:	d007      	beq.n	800107c <HAL_RCC_OscConfig+0x2cc>
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	2b18      	cmp	r3, #24
 8001070:	d13a      	bne.n	80010e8 <HAL_RCC_OscConfig+0x338>
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	2b01      	cmp	r3, #1
 800107a:	d135      	bne.n	80010e8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800107c:	4b94      	ldr	r3, [pc, #592]	; (80012d0 <HAL_RCC_OscConfig+0x520>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001084:	2b00      	cmp	r3, #0
 8001086:	d005      	beq.n	8001094 <HAL_RCC_OscConfig+0x2e4>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	69db      	ldr	r3, [r3, #28]
 800108c:	2b80      	cmp	r3, #128	; 0x80
 800108e:	d001      	beq.n	8001094 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e296      	b.n	80015c2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001094:	f7ff fb98 	bl	80007c8 <HAL_GetREVID>
 8001098:	4603      	mov	r3, r0
 800109a:	f241 0203 	movw	r2, #4099	; 0x1003
 800109e:	4293      	cmp	r3, r2
 80010a0:	d817      	bhi.n	80010d2 <HAL_RCC_OscConfig+0x322>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6a1b      	ldr	r3, [r3, #32]
 80010a6:	2b20      	cmp	r3, #32
 80010a8:	d108      	bne.n	80010bc <HAL_RCC_OscConfig+0x30c>
 80010aa:	4b89      	ldr	r3, [pc, #548]	; (80012d0 <HAL_RCC_OscConfig+0x520>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80010b2:	4a87      	ldr	r2, [pc, #540]	; (80012d0 <HAL_RCC_OscConfig+0x520>)
 80010b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80010b8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80010ba:	e075      	b.n	80011a8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80010bc:	4b84      	ldr	r3, [pc, #528]	; (80012d0 <HAL_RCC_OscConfig+0x520>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a1b      	ldr	r3, [r3, #32]
 80010c8:	069b      	lsls	r3, r3, #26
 80010ca:	4981      	ldr	r1, [pc, #516]	; (80012d0 <HAL_RCC_OscConfig+0x520>)
 80010cc:	4313      	orrs	r3, r2
 80010ce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80010d0:	e06a      	b.n	80011a8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80010d2:	4b7f      	ldr	r3, [pc, #508]	; (80012d0 <HAL_RCC_OscConfig+0x520>)
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a1b      	ldr	r3, [r3, #32]
 80010de:	061b      	lsls	r3, r3, #24
 80010e0:	497b      	ldr	r1, [pc, #492]	; (80012d0 <HAL_RCC_OscConfig+0x520>)
 80010e2:	4313      	orrs	r3, r2
 80010e4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80010e6:	e05f      	b.n	80011a8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	69db      	ldr	r3, [r3, #28]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d042      	beq.n	8001176 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80010f0:	4b77      	ldr	r3, [pc, #476]	; (80012d0 <HAL_RCC_OscConfig+0x520>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a76      	ldr	r2, [pc, #472]	; (80012d0 <HAL_RCC_OscConfig+0x520>)
 80010f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010fc:	f7ff fb34 	bl	8000768 <HAL_GetTick>
 8001100:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001102:	e008      	b.n	8001116 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001104:	f7ff fb30 	bl	8000768 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e255      	b.n	80015c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001116:	4b6e      	ldr	r3, [pc, #440]	; (80012d0 <HAL_RCC_OscConfig+0x520>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800111e:	2b00      	cmp	r3, #0
 8001120:	d0f0      	beq.n	8001104 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001122:	f7ff fb51 	bl	80007c8 <HAL_GetREVID>
 8001126:	4603      	mov	r3, r0
 8001128:	f241 0203 	movw	r2, #4099	; 0x1003
 800112c:	4293      	cmp	r3, r2
 800112e:	d817      	bhi.n	8001160 <HAL_RCC_OscConfig+0x3b0>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a1b      	ldr	r3, [r3, #32]
 8001134:	2b20      	cmp	r3, #32
 8001136:	d108      	bne.n	800114a <HAL_RCC_OscConfig+0x39a>
 8001138:	4b65      	ldr	r3, [pc, #404]	; (80012d0 <HAL_RCC_OscConfig+0x520>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001140:	4a63      	ldr	r2, [pc, #396]	; (80012d0 <HAL_RCC_OscConfig+0x520>)
 8001142:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001146:	6053      	str	r3, [r2, #4]
 8001148:	e02e      	b.n	80011a8 <HAL_RCC_OscConfig+0x3f8>
 800114a:	4b61      	ldr	r3, [pc, #388]	; (80012d0 <HAL_RCC_OscConfig+0x520>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a1b      	ldr	r3, [r3, #32]
 8001156:	069b      	lsls	r3, r3, #26
 8001158:	495d      	ldr	r1, [pc, #372]	; (80012d0 <HAL_RCC_OscConfig+0x520>)
 800115a:	4313      	orrs	r3, r2
 800115c:	604b      	str	r3, [r1, #4]
 800115e:	e023      	b.n	80011a8 <HAL_RCC_OscConfig+0x3f8>
 8001160:	4b5b      	ldr	r3, [pc, #364]	; (80012d0 <HAL_RCC_OscConfig+0x520>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a1b      	ldr	r3, [r3, #32]
 800116c:	061b      	lsls	r3, r3, #24
 800116e:	4958      	ldr	r1, [pc, #352]	; (80012d0 <HAL_RCC_OscConfig+0x520>)
 8001170:	4313      	orrs	r3, r2
 8001172:	60cb      	str	r3, [r1, #12]
 8001174:	e018      	b.n	80011a8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001176:	4b56      	ldr	r3, [pc, #344]	; (80012d0 <HAL_RCC_OscConfig+0x520>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a55      	ldr	r2, [pc, #340]	; (80012d0 <HAL_RCC_OscConfig+0x520>)
 800117c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001182:	f7ff faf1 	bl	8000768 <HAL_GetTick>
 8001186:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001188:	e008      	b.n	800119c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800118a:	f7ff faed 	bl	8000768 <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d901      	bls.n	800119c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e212      	b.n	80015c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800119c:	4b4c      	ldr	r3, [pc, #304]	; (80012d0 <HAL_RCC_OscConfig+0x520>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1f0      	bne.n	800118a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0308 	and.w	r3, r3, #8
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d036      	beq.n	8001222 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	695b      	ldr	r3, [r3, #20]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d019      	beq.n	80011f0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011bc:	4b44      	ldr	r3, [pc, #272]	; (80012d0 <HAL_RCC_OscConfig+0x520>)
 80011be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011c0:	4a43      	ldr	r2, [pc, #268]	; (80012d0 <HAL_RCC_OscConfig+0x520>)
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011c8:	f7ff face 	bl	8000768 <HAL_GetTick>
 80011cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011d0:	f7ff faca 	bl	8000768 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e1ef      	b.n	80015c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011e2:	4b3b      	ldr	r3, [pc, #236]	; (80012d0 <HAL_RCC_OscConfig+0x520>)
 80011e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d0f0      	beq.n	80011d0 <HAL_RCC_OscConfig+0x420>
 80011ee:	e018      	b.n	8001222 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011f0:	4b37      	ldr	r3, [pc, #220]	; (80012d0 <HAL_RCC_OscConfig+0x520>)
 80011f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011f4:	4a36      	ldr	r2, [pc, #216]	; (80012d0 <HAL_RCC_OscConfig+0x520>)
 80011f6:	f023 0301 	bic.w	r3, r3, #1
 80011fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011fc:	f7ff fab4 	bl	8000768 <HAL_GetTick>
 8001200:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001204:	f7ff fab0 	bl	8000768 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e1d5      	b.n	80015c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001216:	4b2e      	ldr	r3, [pc, #184]	; (80012d0 <HAL_RCC_OscConfig+0x520>)
 8001218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1f0      	bne.n	8001204 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0320 	and.w	r3, r3, #32
 800122a:	2b00      	cmp	r3, #0
 800122c:	d036      	beq.n	800129c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d019      	beq.n	800126a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001236:	4b26      	ldr	r3, [pc, #152]	; (80012d0 <HAL_RCC_OscConfig+0x520>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a25      	ldr	r2, [pc, #148]	; (80012d0 <HAL_RCC_OscConfig+0x520>)
 800123c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001240:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001242:	f7ff fa91 	bl	8000768 <HAL_GetTick>
 8001246:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001248:	e008      	b.n	800125c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800124a:	f7ff fa8d 	bl	8000768 <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e1b2      	b.n	80015c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800125c:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <HAL_RCC_OscConfig+0x520>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0f0      	beq.n	800124a <HAL_RCC_OscConfig+0x49a>
 8001268:	e018      	b.n	800129c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800126a:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <HAL_RCC_OscConfig+0x520>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a18      	ldr	r2, [pc, #96]	; (80012d0 <HAL_RCC_OscConfig+0x520>)
 8001270:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001274:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001276:	f7ff fa77 	bl	8000768 <HAL_GetTick>
 800127a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800127e:	f7ff fa73 	bl	8000768 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e198      	b.n	80015c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001290:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <HAL_RCC_OscConfig+0x520>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1f0      	bne.n	800127e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 8085 	beq.w	80013b4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HAL_RCC_OscConfig+0x524>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a09      	ldr	r2, [pc, #36]	; (80012d4 <HAL_RCC_OscConfig+0x524>)
 80012b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80012b6:	f7ff fa57 	bl	8000768 <HAL_GetTick>
 80012ba:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80012bc:	e00c      	b.n	80012d8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80012be:	f7ff fa53 	bl	8000768 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b64      	cmp	r3, #100	; 0x64
 80012ca:	d905      	bls.n	80012d8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e178      	b.n	80015c2 <HAL_RCC_OscConfig+0x812>
 80012d0:	58024400 	.word	0x58024400
 80012d4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80012d8:	4b96      	ldr	r3, [pc, #600]	; (8001534 <HAL_RCC_OscConfig+0x784>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0ec      	beq.n	80012be <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d106      	bne.n	80012fa <HAL_RCC_OscConfig+0x54a>
 80012ec:	4b92      	ldr	r3, [pc, #584]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 80012ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f0:	4a91      	ldr	r2, [pc, #580]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	6713      	str	r3, [r2, #112]	; 0x70
 80012f8:	e02d      	b.n	8001356 <HAL_RCC_OscConfig+0x5a6>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d10c      	bne.n	800131c <HAL_RCC_OscConfig+0x56c>
 8001302:	4b8d      	ldr	r3, [pc, #564]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 8001304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001306:	4a8c      	ldr	r2, [pc, #560]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 8001308:	f023 0301 	bic.w	r3, r3, #1
 800130c:	6713      	str	r3, [r2, #112]	; 0x70
 800130e:	4b8a      	ldr	r3, [pc, #552]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 8001310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001312:	4a89      	ldr	r2, [pc, #548]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 8001314:	f023 0304 	bic.w	r3, r3, #4
 8001318:	6713      	str	r3, [r2, #112]	; 0x70
 800131a:	e01c      	b.n	8001356 <HAL_RCC_OscConfig+0x5a6>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	2b05      	cmp	r3, #5
 8001322:	d10c      	bne.n	800133e <HAL_RCC_OscConfig+0x58e>
 8001324:	4b84      	ldr	r3, [pc, #528]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 8001326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001328:	4a83      	ldr	r2, [pc, #524]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 800132a:	f043 0304 	orr.w	r3, r3, #4
 800132e:	6713      	str	r3, [r2, #112]	; 0x70
 8001330:	4b81      	ldr	r3, [pc, #516]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 8001332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001334:	4a80      	ldr	r2, [pc, #512]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	6713      	str	r3, [r2, #112]	; 0x70
 800133c:	e00b      	b.n	8001356 <HAL_RCC_OscConfig+0x5a6>
 800133e:	4b7e      	ldr	r3, [pc, #504]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 8001340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001342:	4a7d      	ldr	r2, [pc, #500]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 8001344:	f023 0301 	bic.w	r3, r3, #1
 8001348:	6713      	str	r3, [r2, #112]	; 0x70
 800134a:	4b7b      	ldr	r3, [pc, #492]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 800134c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800134e:	4a7a      	ldr	r2, [pc, #488]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 8001350:	f023 0304 	bic.w	r3, r3, #4
 8001354:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d015      	beq.n	800138a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800135e:	f7ff fa03 	bl	8000768 <HAL_GetTick>
 8001362:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001364:	e00a      	b.n	800137c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001366:	f7ff f9ff 	bl	8000768 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	f241 3288 	movw	r2, #5000	; 0x1388
 8001374:	4293      	cmp	r3, r2
 8001376:	d901      	bls.n	800137c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e122      	b.n	80015c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800137c:	4b6e      	ldr	r3, [pc, #440]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 800137e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d0ee      	beq.n	8001366 <HAL_RCC_OscConfig+0x5b6>
 8001388:	e014      	b.n	80013b4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800138a:	f7ff f9ed 	bl	8000768 <HAL_GetTick>
 800138e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001390:	e00a      	b.n	80013a8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001392:	f7ff f9e9 	bl	8000768 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e10c      	b.n	80015c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80013a8:	4b63      	ldr	r3, [pc, #396]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 80013aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1ee      	bne.n	8001392 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 8101 	beq.w	80015c0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80013be:	4b5e      	ldr	r3, [pc, #376]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013c6:	2b18      	cmp	r3, #24
 80013c8:	f000 80bc 	beq.w	8001544 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	f040 8095 	bne.w	8001500 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013d6:	4b58      	ldr	r3, [pc, #352]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a57      	ldr	r2, [pc, #348]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 80013dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e2:	f7ff f9c1 	bl	8000768 <HAL_GetTick>
 80013e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ea:	f7ff f9bd 	bl	8000768 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e0e2      	b.n	80015c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80013fc:	4b4e      	ldr	r3, [pc, #312]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1f0      	bne.n	80013ea <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001408:	4b4b      	ldr	r3, [pc, #300]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 800140a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800140c:	4b4b      	ldr	r3, [pc, #300]	; (800153c <HAL_RCC_OscConfig+0x78c>)
 800140e:	4013      	ands	r3, r2
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001418:	0112      	lsls	r2, r2, #4
 800141a:	430a      	orrs	r2, r1
 800141c:	4946      	ldr	r1, [pc, #280]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 800141e:	4313      	orrs	r3, r2
 8001420:	628b      	str	r3, [r1, #40]	; 0x28
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	3b01      	subs	r3, #1
 8001428:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001430:	3b01      	subs	r3, #1
 8001432:	025b      	lsls	r3, r3, #9
 8001434:	b29b      	uxth	r3, r3
 8001436:	431a      	orrs	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800143c:	3b01      	subs	r3, #1
 800143e:	041b      	lsls	r3, r3, #16
 8001440:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001444:	431a      	orrs	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800144a:	3b01      	subs	r3, #1
 800144c:	061b      	lsls	r3, r3, #24
 800144e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001452:	4939      	ldr	r1, [pc, #228]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 8001454:	4313      	orrs	r3, r2
 8001456:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001458:	4b37      	ldr	r3, [pc, #220]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 800145a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145c:	4a36      	ldr	r2, [pc, #216]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 800145e:	f023 0301 	bic.w	r3, r3, #1
 8001462:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001464:	4b34      	ldr	r3, [pc, #208]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 8001466:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001468:	4b35      	ldr	r3, [pc, #212]	; (8001540 <HAL_RCC_OscConfig+0x790>)
 800146a:	4013      	ands	r3, r2
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001470:	00d2      	lsls	r2, r2, #3
 8001472:	4931      	ldr	r1, [pc, #196]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 8001474:	4313      	orrs	r3, r2
 8001476:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001478:	4b2f      	ldr	r3, [pc, #188]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 800147a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147c:	f023 020c 	bic.w	r2, r3, #12
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	492c      	ldr	r1, [pc, #176]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 8001486:	4313      	orrs	r3, r2
 8001488:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800148a:	4b2b      	ldr	r3, [pc, #172]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 800148c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148e:	f023 0202 	bic.w	r2, r3, #2
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	4928      	ldr	r1, [pc, #160]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 8001498:	4313      	orrs	r3, r2
 800149a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800149c:	4b26      	ldr	r3, [pc, #152]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 800149e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a0:	4a25      	ldr	r2, [pc, #148]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 80014a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80014a8:	4b23      	ldr	r3, [pc, #140]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 80014aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ac:	4a22      	ldr	r2, [pc, #136]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 80014ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80014b4:	4b20      	ldr	r3, [pc, #128]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 80014b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b8:	4a1f      	ldr	r2, [pc, #124]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 80014ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80014c0:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 80014c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c4:	4a1c      	ldr	r2, [pc, #112]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014cc:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a19      	ldr	r2, [pc, #100]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 80014d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d8:	f7ff f946 	bl	8000768 <HAL_GetTick>
 80014dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014e0:	f7ff f942 	bl	8000768 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e067      	b.n	80015c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80014f2:	4b11      	ldr	r3, [pc, #68]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f0      	beq.n	80014e0 <HAL_RCC_OscConfig+0x730>
 80014fe:	e05f      	b.n	80015c0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001500:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a0c      	ldr	r2, [pc, #48]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 8001506:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800150a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150c:	f7ff f92c 	bl	8000768 <HAL_GetTick>
 8001510:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001514:	f7ff f928 	bl	8000768 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e04d      	b.n	80015c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001526:	4b04      	ldr	r3, [pc, #16]	; (8001538 <HAL_RCC_OscConfig+0x788>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f0      	bne.n	8001514 <HAL_RCC_OscConfig+0x764>
 8001532:	e045      	b.n	80015c0 <HAL_RCC_OscConfig+0x810>
 8001534:	58024800 	.word	0x58024800
 8001538:	58024400 	.word	0x58024400
 800153c:	fffffc0c 	.word	0xfffffc0c
 8001540:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001544:	4b21      	ldr	r3, [pc, #132]	; (80015cc <HAL_RCC_OscConfig+0x81c>)
 8001546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001548:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800154a:	4b20      	ldr	r3, [pc, #128]	; (80015cc <HAL_RCC_OscConfig+0x81c>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001554:	2b01      	cmp	r3, #1
 8001556:	d031      	beq.n	80015bc <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	f003 0203 	and.w	r2, r3, #3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001562:	429a      	cmp	r2, r3
 8001564:	d12a      	bne.n	80015bc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	091b      	lsrs	r3, r3, #4
 800156a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001572:	429a      	cmp	r2, r3
 8001574:	d122      	bne.n	80015bc <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001580:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001582:	429a      	cmp	r2, r3
 8001584:	d11a      	bne.n	80015bc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	0a5b      	lsrs	r3, r3, #9
 800158a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001592:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001594:	429a      	cmp	r2, r3
 8001596:	d111      	bne.n	80015bc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	0c1b      	lsrs	r3, r3, #16
 800159c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d108      	bne.n	80015bc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	0e1b      	lsrs	r3, r3, #24
 80015ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d001      	beq.n	80015c0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e000      	b.n	80015c2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3730      	adds	r7, #48	; 0x30
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	58024400 	.word	0x58024400

080015d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d101      	bne.n	80015e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e19c      	b.n	800191e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015e4:	4b8a      	ldr	r3, [pc, #552]	; (8001810 <HAL_RCC_ClockConfig+0x240>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 030f 	and.w	r3, r3, #15
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d910      	bls.n	8001614 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015f2:	4b87      	ldr	r3, [pc, #540]	; (8001810 <HAL_RCC_ClockConfig+0x240>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f023 020f 	bic.w	r2, r3, #15
 80015fa:	4985      	ldr	r1, [pc, #532]	; (8001810 <HAL_RCC_ClockConfig+0x240>)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	4313      	orrs	r3, r2
 8001600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001602:	4b83      	ldr	r3, [pc, #524]	; (8001810 <HAL_RCC_ClockConfig+0x240>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	429a      	cmp	r2, r3
 800160e:	d001      	beq.n	8001614 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e184      	b.n	800191e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	2b00      	cmp	r3, #0
 800161e:	d010      	beq.n	8001642 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	691a      	ldr	r2, [r3, #16]
 8001624:	4b7b      	ldr	r3, [pc, #492]	; (8001814 <HAL_RCC_ClockConfig+0x244>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800162c:	429a      	cmp	r2, r3
 800162e:	d908      	bls.n	8001642 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001630:	4b78      	ldr	r3, [pc, #480]	; (8001814 <HAL_RCC_ClockConfig+0x244>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	4975      	ldr	r1, [pc, #468]	; (8001814 <HAL_RCC_ClockConfig+0x244>)
 800163e:	4313      	orrs	r3, r2
 8001640:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	2b00      	cmp	r3, #0
 800164c:	d010      	beq.n	8001670 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	695a      	ldr	r2, [r3, #20]
 8001652:	4b70      	ldr	r3, [pc, #448]	; (8001814 <HAL_RCC_ClockConfig+0x244>)
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800165a:	429a      	cmp	r2, r3
 800165c:	d908      	bls.n	8001670 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800165e:	4b6d      	ldr	r3, [pc, #436]	; (8001814 <HAL_RCC_ClockConfig+0x244>)
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	496a      	ldr	r1, [pc, #424]	; (8001814 <HAL_RCC_ClockConfig+0x244>)
 800166c:	4313      	orrs	r3, r2
 800166e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0310 	and.w	r3, r3, #16
 8001678:	2b00      	cmp	r3, #0
 800167a:	d010      	beq.n	800169e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	699a      	ldr	r2, [r3, #24]
 8001680:	4b64      	ldr	r3, [pc, #400]	; (8001814 <HAL_RCC_ClockConfig+0x244>)
 8001682:	69db      	ldr	r3, [r3, #28]
 8001684:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001688:	429a      	cmp	r2, r3
 800168a:	d908      	bls.n	800169e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800168c:	4b61      	ldr	r3, [pc, #388]	; (8001814 <HAL_RCC_ClockConfig+0x244>)
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	495e      	ldr	r1, [pc, #376]	; (8001814 <HAL_RCC_ClockConfig+0x244>)
 800169a:	4313      	orrs	r3, r2
 800169c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0320 	and.w	r3, r3, #32
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d010      	beq.n	80016cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69da      	ldr	r2, [r3, #28]
 80016ae:	4b59      	ldr	r3, [pc, #356]	; (8001814 <HAL_RCC_ClockConfig+0x244>)
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d908      	bls.n	80016cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80016ba:	4b56      	ldr	r3, [pc, #344]	; (8001814 <HAL_RCC_ClockConfig+0x244>)
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	4953      	ldr	r1, [pc, #332]	; (8001814 <HAL_RCC_ClockConfig+0x244>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d010      	beq.n	80016fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68da      	ldr	r2, [r3, #12]
 80016dc:	4b4d      	ldr	r3, [pc, #308]	; (8001814 <HAL_RCC_ClockConfig+0x244>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	f003 030f 	and.w	r3, r3, #15
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d908      	bls.n	80016fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e8:	4b4a      	ldr	r3, [pc, #296]	; (8001814 <HAL_RCC_ClockConfig+0x244>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	f023 020f 	bic.w	r2, r3, #15
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	4947      	ldr	r1, [pc, #284]	; (8001814 <HAL_RCC_ClockConfig+0x244>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	2b00      	cmp	r3, #0
 8001704:	d055      	beq.n	80017b2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001706:	4b43      	ldr	r3, [pc, #268]	; (8001814 <HAL_RCC_ClockConfig+0x244>)
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	4940      	ldr	r1, [pc, #256]	; (8001814 <HAL_RCC_ClockConfig+0x244>)
 8001714:	4313      	orrs	r3, r2
 8001716:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2b02      	cmp	r3, #2
 800171e:	d107      	bne.n	8001730 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001720:	4b3c      	ldr	r3, [pc, #240]	; (8001814 <HAL_RCC_ClockConfig+0x244>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d121      	bne.n	8001770 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e0f6      	b.n	800191e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2b03      	cmp	r3, #3
 8001736:	d107      	bne.n	8001748 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001738:	4b36      	ldr	r3, [pc, #216]	; (8001814 <HAL_RCC_ClockConfig+0x244>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d115      	bne.n	8001770 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e0ea      	b.n	800191e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d107      	bne.n	8001760 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001750:	4b30      	ldr	r3, [pc, #192]	; (8001814 <HAL_RCC_ClockConfig+0x244>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001758:	2b00      	cmp	r3, #0
 800175a:	d109      	bne.n	8001770 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0de      	b.n	800191e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001760:	4b2c      	ldr	r3, [pc, #176]	; (8001814 <HAL_RCC_ClockConfig+0x244>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	2b00      	cmp	r3, #0
 800176a:	d101      	bne.n	8001770 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e0d6      	b.n	800191e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001770:	4b28      	ldr	r3, [pc, #160]	; (8001814 <HAL_RCC_ClockConfig+0x244>)
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	f023 0207 	bic.w	r2, r3, #7
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	4925      	ldr	r1, [pc, #148]	; (8001814 <HAL_RCC_ClockConfig+0x244>)
 800177e:	4313      	orrs	r3, r2
 8001780:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001782:	f7fe fff1 	bl	8000768 <HAL_GetTick>
 8001786:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001788:	e00a      	b.n	80017a0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800178a:	f7fe ffed 	bl	8000768 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	f241 3288 	movw	r2, #5000	; 0x1388
 8001798:	4293      	cmp	r3, r2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e0be      	b.n	800191e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017a0:	4b1c      	ldr	r3, [pc, #112]	; (8001814 <HAL_RCC_ClockConfig+0x244>)
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d1eb      	bne.n	800178a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d010      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68da      	ldr	r2, [r3, #12]
 80017c2:	4b14      	ldr	r3, [pc, #80]	; (8001814 <HAL_RCC_ClockConfig+0x244>)
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d208      	bcs.n	80017e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ce:	4b11      	ldr	r3, [pc, #68]	; (8001814 <HAL_RCC_ClockConfig+0x244>)
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	f023 020f 	bic.w	r2, r3, #15
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	490e      	ldr	r1, [pc, #56]	; (8001814 <HAL_RCC_ClockConfig+0x244>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <HAL_RCC_ClockConfig+0x240>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 030f 	and.w	r3, r3, #15
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d214      	bcs.n	8001818 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ee:	4b08      	ldr	r3, [pc, #32]	; (8001810 <HAL_RCC_ClockConfig+0x240>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f023 020f 	bic.w	r2, r3, #15
 80017f6:	4906      	ldr	r1, [pc, #24]	; (8001810 <HAL_RCC_ClockConfig+0x240>)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fe:	4b04      	ldr	r3, [pc, #16]	; (8001810 <HAL_RCC_ClockConfig+0x240>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d005      	beq.n	8001818 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e086      	b.n	800191e <HAL_RCC_ClockConfig+0x34e>
 8001810:	52002000 	.word	0x52002000
 8001814:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	2b00      	cmp	r3, #0
 8001822:	d010      	beq.n	8001846 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	691a      	ldr	r2, [r3, #16]
 8001828:	4b3f      	ldr	r3, [pc, #252]	; (8001928 <HAL_RCC_ClockConfig+0x358>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001830:	429a      	cmp	r2, r3
 8001832:	d208      	bcs.n	8001846 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001834:	4b3c      	ldr	r3, [pc, #240]	; (8001928 <HAL_RCC_ClockConfig+0x358>)
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	4939      	ldr	r1, [pc, #228]	; (8001928 <HAL_RCC_ClockConfig+0x358>)
 8001842:	4313      	orrs	r3, r2
 8001844:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	2b00      	cmp	r3, #0
 8001850:	d010      	beq.n	8001874 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	695a      	ldr	r2, [r3, #20]
 8001856:	4b34      	ldr	r3, [pc, #208]	; (8001928 <HAL_RCC_ClockConfig+0x358>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800185e:	429a      	cmp	r2, r3
 8001860:	d208      	bcs.n	8001874 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001862:	4b31      	ldr	r3, [pc, #196]	; (8001928 <HAL_RCC_ClockConfig+0x358>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	492e      	ldr	r1, [pc, #184]	; (8001928 <HAL_RCC_ClockConfig+0x358>)
 8001870:	4313      	orrs	r3, r2
 8001872:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0310 	and.w	r3, r3, #16
 800187c:	2b00      	cmp	r3, #0
 800187e:	d010      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	699a      	ldr	r2, [r3, #24]
 8001884:	4b28      	ldr	r3, [pc, #160]	; (8001928 <HAL_RCC_ClockConfig+0x358>)
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800188c:	429a      	cmp	r2, r3
 800188e:	d208      	bcs.n	80018a2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001890:	4b25      	ldr	r3, [pc, #148]	; (8001928 <HAL_RCC_ClockConfig+0x358>)
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	4922      	ldr	r1, [pc, #136]	; (8001928 <HAL_RCC_ClockConfig+0x358>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0320 	and.w	r3, r3, #32
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d010      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69da      	ldr	r2, [r3, #28]
 80018b2:	4b1d      	ldr	r3, [pc, #116]	; (8001928 <HAL_RCC_ClockConfig+0x358>)
 80018b4:	6a1b      	ldr	r3, [r3, #32]
 80018b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d208      	bcs.n	80018d0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80018be:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <HAL_RCC_ClockConfig+0x358>)
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	4917      	ldr	r1, [pc, #92]	; (8001928 <HAL_RCC_ClockConfig+0x358>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018d0:	f000 f834 	bl	800193c <HAL_RCC_GetSysClockFreq>
 80018d4:	4602      	mov	r2, r0
 80018d6:	4b14      	ldr	r3, [pc, #80]	; (8001928 <HAL_RCC_ClockConfig+0x358>)
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	0a1b      	lsrs	r3, r3, #8
 80018dc:	f003 030f 	and.w	r3, r3, #15
 80018e0:	4912      	ldr	r1, [pc, #72]	; (800192c <HAL_RCC_ClockConfig+0x35c>)
 80018e2:	5ccb      	ldrb	r3, [r1, r3]
 80018e4:	f003 031f 	and.w	r3, r3, #31
 80018e8:	fa22 f303 	lsr.w	r3, r2, r3
 80018ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80018ee:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <HAL_RCC_ClockConfig+0x358>)
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	4a0d      	ldr	r2, [pc, #52]	; (800192c <HAL_RCC_ClockConfig+0x35c>)
 80018f8:	5cd3      	ldrb	r3, [r2, r3]
 80018fa:	f003 031f 	and.w	r3, r3, #31
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	fa22 f303 	lsr.w	r3, r2, r3
 8001904:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <HAL_RCC_ClockConfig+0x360>)
 8001906:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001908:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <HAL_RCC_ClockConfig+0x364>)
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800190e:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <HAL_RCC_ClockConfig+0x368>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f7fe fede 	bl	80006d4 <HAL_InitTick>
 8001918:	4603      	mov	r3, r0
 800191a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800191c:	7bfb      	ldrb	r3, [r7, #15]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	58024400 	.word	0x58024400
 800192c:	08001ca0 	.word	0x08001ca0
 8001930:	20000004 	.word	0x20000004
 8001934:	20000000 	.word	0x20000000
 8001938:	20000008 	.word	0x20000008

0800193c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800193c:	b480      	push	{r7}
 800193e:	b089      	sub	sp, #36	; 0x24
 8001940:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001942:	4bb3      	ldr	r3, [pc, #716]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800194a:	2b18      	cmp	r3, #24
 800194c:	f200 8155 	bhi.w	8001bfa <HAL_RCC_GetSysClockFreq+0x2be>
 8001950:	a201      	add	r2, pc, #4	; (adr r2, 8001958 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001956:	bf00      	nop
 8001958:	080019bd 	.word	0x080019bd
 800195c:	08001bfb 	.word	0x08001bfb
 8001960:	08001bfb 	.word	0x08001bfb
 8001964:	08001bfb 	.word	0x08001bfb
 8001968:	08001bfb 	.word	0x08001bfb
 800196c:	08001bfb 	.word	0x08001bfb
 8001970:	08001bfb 	.word	0x08001bfb
 8001974:	08001bfb 	.word	0x08001bfb
 8001978:	080019e3 	.word	0x080019e3
 800197c:	08001bfb 	.word	0x08001bfb
 8001980:	08001bfb 	.word	0x08001bfb
 8001984:	08001bfb 	.word	0x08001bfb
 8001988:	08001bfb 	.word	0x08001bfb
 800198c:	08001bfb 	.word	0x08001bfb
 8001990:	08001bfb 	.word	0x08001bfb
 8001994:	08001bfb 	.word	0x08001bfb
 8001998:	080019e9 	.word	0x080019e9
 800199c:	08001bfb 	.word	0x08001bfb
 80019a0:	08001bfb 	.word	0x08001bfb
 80019a4:	08001bfb 	.word	0x08001bfb
 80019a8:	08001bfb 	.word	0x08001bfb
 80019ac:	08001bfb 	.word	0x08001bfb
 80019b0:	08001bfb 	.word	0x08001bfb
 80019b4:	08001bfb 	.word	0x08001bfb
 80019b8:	080019ef 	.word	0x080019ef
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80019bc:	4b94      	ldr	r3, [pc, #592]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0320 	and.w	r3, r3, #32
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d009      	beq.n	80019dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80019c8:	4b91      	ldr	r3, [pc, #580]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	08db      	lsrs	r3, r3, #3
 80019ce:	f003 0303 	and.w	r3, r3, #3
 80019d2:	4a90      	ldr	r2, [pc, #576]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80019d4:	fa22 f303 	lsr.w	r3, r2, r3
 80019d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80019da:	e111      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80019dc:	4b8d      	ldr	r3, [pc, #564]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80019de:	61bb      	str	r3, [r7, #24]
    break;
 80019e0:	e10e      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80019e2:	4b8d      	ldr	r3, [pc, #564]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80019e4:	61bb      	str	r3, [r7, #24]
    break;
 80019e6:	e10b      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80019e8:	4b8c      	ldr	r3, [pc, #560]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80019ea:	61bb      	str	r3, [r7, #24]
    break;
 80019ec:	e108      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80019ee:	4b88      	ldr	r3, [pc, #544]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f2:	f003 0303 	and.w	r3, r3, #3
 80019f6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80019f8:	4b85      	ldr	r3, [pc, #532]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fc:	091b      	lsrs	r3, r3, #4
 80019fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a02:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001a04:	4b82      	ldr	r3, [pc, #520]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001a0e:	4b80      	ldr	r3, [pc, #512]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a12:	08db      	lsrs	r3, r3, #3
 8001a14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	fb02 f303 	mul.w	r3, r2, r3
 8001a1e:	ee07 3a90 	vmov	s15, r3
 8001a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a26:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 80e1 	beq.w	8001bf4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	f000 8083 	beq.w	8001b40 <HAL_RCC_GetSysClockFreq+0x204>
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	f200 80a1 	bhi.w	8001b84 <HAL_RCC_GetSysClockFreq+0x248>
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <HAL_RCC_GetSysClockFreq+0x114>
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d056      	beq.n	8001afc <HAL_RCC_GetSysClockFreq+0x1c0>
 8001a4e:	e099      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001a50:	4b6f      	ldr	r3, [pc, #444]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0320 	and.w	r3, r3, #32
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d02d      	beq.n	8001ab8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001a5c:	4b6c      	ldr	r3, [pc, #432]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	08db      	lsrs	r3, r3, #3
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	4a6b      	ldr	r2, [pc, #428]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001a68:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	ee07 3a90 	vmov	s15, r3
 8001a74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	ee07 3a90 	vmov	s15, r3
 8001a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a86:	4b62      	ldr	r3, [pc, #392]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a8e:	ee07 3a90 	vmov	s15, r3
 8001a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a96:	ed97 6a02 	vldr	s12, [r7, #8]
 8001a9a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001c20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001aa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001ab6:	e087      	b.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	ee07 3a90 	vmov	s15, r3
 8001abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ac2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001c24 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001aca:	4b51      	ldr	r3, [pc, #324]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ad2:	ee07 3a90 	vmov	s15, r3
 8001ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ada:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ade:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001c20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001aea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001afa:	e065      	b.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	ee07 3a90 	vmov	s15, r3
 8001b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b06:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001c28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b0e:	4b40      	ldr	r3, [pc, #256]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b16:	ee07 3a90 	vmov	s15, r3
 8001b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001b22:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001c20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001b3e:	e043      	b.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	ee07 3a90 	vmov	s15, r3
 8001b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b4a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001c2c <HAL_RCC_GetSysClockFreq+0x2f0>
 8001b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b52:	4b2f      	ldr	r3, [pc, #188]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b5a:	ee07 3a90 	vmov	s15, r3
 8001b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b62:	ed97 6a02 	vldr	s12, [r7, #8]
 8001b66:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001c20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001b82:	e021      	b.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	ee07 3a90 	vmov	s15, r3
 8001b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b8e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001c28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b96:	4b1e      	ldr	r3, [pc, #120]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b9e:	ee07 3a90 	vmov	s15, r3
 8001ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ba6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001baa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001c20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001bb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001bc6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001bc8:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bcc:	0a5b      	lsrs	r3, r3, #9
 8001bce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	ee07 3a90 	vmov	s15, r3
 8001bdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001be0:	edd7 6a07 	vldr	s13, [r7, #28]
 8001be4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bec:	ee17 3a90 	vmov	r3, s15
 8001bf0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001bf2:	e005      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61bb      	str	r3, [r7, #24]
    break;
 8001bf8:	e002      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8001bfa:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001bfc:	61bb      	str	r3, [r7, #24]
    break;
 8001bfe:	bf00      	nop
  }

  return sysclockfreq;
 8001c00:	69bb      	ldr	r3, [r7, #24]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3724      	adds	r7, #36	; 0x24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	58024400 	.word	0x58024400
 8001c14:	03d09000 	.word	0x03d09000
 8001c18:	003d0900 	.word	0x003d0900
 8001c1c:	017d7840 	.word	0x017d7840
 8001c20:	46000000 	.word	0x46000000
 8001c24:	4c742400 	.word	0x4c742400
 8001c28:	4a742400 	.word	0x4a742400
 8001c2c:	4bbebc20 	.word	0x4bbebc20

08001c30 <__libc_init_array>:
 8001c30:	b570      	push	{r4, r5, r6, lr}
 8001c32:	4d0d      	ldr	r5, [pc, #52]	; (8001c68 <__libc_init_array+0x38>)
 8001c34:	4c0d      	ldr	r4, [pc, #52]	; (8001c6c <__libc_init_array+0x3c>)
 8001c36:	1b64      	subs	r4, r4, r5
 8001c38:	10a4      	asrs	r4, r4, #2
 8001c3a:	2600      	movs	r6, #0
 8001c3c:	42a6      	cmp	r6, r4
 8001c3e:	d109      	bne.n	8001c54 <__libc_init_array+0x24>
 8001c40:	4d0b      	ldr	r5, [pc, #44]	; (8001c70 <__libc_init_array+0x40>)
 8001c42:	4c0c      	ldr	r4, [pc, #48]	; (8001c74 <__libc_init_array+0x44>)
 8001c44:	f000 f820 	bl	8001c88 <_init>
 8001c48:	1b64      	subs	r4, r4, r5
 8001c4a:	10a4      	asrs	r4, r4, #2
 8001c4c:	2600      	movs	r6, #0
 8001c4e:	42a6      	cmp	r6, r4
 8001c50:	d105      	bne.n	8001c5e <__libc_init_array+0x2e>
 8001c52:	bd70      	pop	{r4, r5, r6, pc}
 8001c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c58:	4798      	blx	r3
 8001c5a:	3601      	adds	r6, #1
 8001c5c:	e7ee      	b.n	8001c3c <__libc_init_array+0xc>
 8001c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c62:	4798      	blx	r3
 8001c64:	3601      	adds	r6, #1
 8001c66:	e7f2      	b.n	8001c4e <__libc_init_array+0x1e>
 8001c68:	08001cb0 	.word	0x08001cb0
 8001c6c:	08001cb0 	.word	0x08001cb0
 8001c70:	08001cb0 	.word	0x08001cb0
 8001c74:	08001cb4 	.word	0x08001cb4

08001c78 <memset>:
 8001c78:	4402      	add	r2, r0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d100      	bne.n	8001c82 <memset+0xa>
 8001c80:	4770      	bx	lr
 8001c82:	f803 1b01 	strb.w	r1, [r3], #1
 8001c86:	e7f9      	b.n	8001c7c <memset+0x4>

08001c88 <_init>:
 8001c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c8a:	bf00      	nop
 8001c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c8e:	bc08      	pop	{r3}
 8001c90:	469e      	mov	lr, r3
 8001c92:	4770      	bx	lr

08001c94 <_fini>:
 8001c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c96:	bf00      	nop
 8001c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c9a:	bc08      	pop	{r3}
 8001c9c:	469e      	mov	lr, r3
 8001c9e:	4770      	bx	lr
