
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a6c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001d04  08001d04  00011d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001d14  08001d14  00011d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001d18  08001d18  00011d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08001d1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000010  08001d2c  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000030  08001d2c  00020030  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000cf99  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001985  00000000  00000000  0002cfd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000005f8  00000000  00000000  0002e960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000560  00000000  00000000  0002ef58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00033d09  00000000  00000000  0002f4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00006b8a  00000000  00000000  000631c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014b9e6  00000000  00000000  00069d4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001b5731  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000167c  00000000  00000000  001b5784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08001cec 	.word	0x08001cec

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	08001cec 	.word	0x08001cec

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002de:	f000 f9ef 	bl	80006c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e2:	f000 f829 	bl	8000338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e6:	f000 f891 	bl	800040c <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int pin_state = 0;
 80002ea:	2300      	movs	r3, #0
 80002ec:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */
	  pin_state = !pin_state; //Change the state of the LED's
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	bf0c      	ite	eq
 80002f4:	2301      	moveq	r3, #1
 80002f6:	2300      	movne	r3, #0
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	607b      	str	r3, [r7, #4]
	  int pin_state_2 = !pin_state;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	bf0c      	ite	eq
 8000302:	2301      	moveq	r3, #1
 8000304:	2300      	movne	r3, #0
 8000306:	b2db      	uxtb	r3, r3
 8000308:	603b      	str	r3, [r7, #0]
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, pin_state); //Write to LED_1
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	b2db      	uxtb	r3, r3
 800030e:	461a      	mov	r2, r3
 8000310:	2101      	movs	r1, #1
 8000312:	4807      	ldr	r0, [pc, #28]	; (8000330 <main+0x58>)
 8000314:	f000 fd2a 	bl	8000d6c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, pin_state_2); //Write to LED_2
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	b2db      	uxtb	r3, r3
 800031c:	461a      	mov	r2, r3
 800031e:	2102      	movs	r1, #2
 8000320:	4804      	ldr	r0, [pc, #16]	; (8000334 <main+0x5c>)
 8000322:	f000 fd23 	bl	8000d6c <HAL_GPIO_WritePin>
	  HAL_Delay(500); //Delay for 500ms
 8000326:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800032a:	f000 fa5b 	bl	80007e4 <HAL_Delay>
  {
 800032e:	e7de      	b.n	80002ee <main+0x16>
 8000330:	58020400 	.word	0x58020400
 8000334:	58021000 	.word	0x58021000

08000338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b09c      	sub	sp, #112	; 0x70
 800033c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000342:	224c      	movs	r2, #76	; 0x4c
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f001 fcc8 	bl	8001cdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	2220      	movs	r2, #32
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f001 fcc2 	bl	8001cdc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000358:	2002      	movs	r0, #2
 800035a:	f000 fd21 	bl	8000da0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800035e:	2300      	movs	r3, #0
 8000360:	603b      	str	r3, [r7, #0]
 8000362:	4b28      	ldr	r3, [pc, #160]	; (8000404 <SystemClock_Config+0xcc>)
 8000364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000366:	4a27      	ldr	r2, [pc, #156]	; (8000404 <SystemClock_Config+0xcc>)
 8000368:	f023 0301 	bic.w	r3, r3, #1
 800036c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800036e:	4b25      	ldr	r3, [pc, #148]	; (8000404 <SystemClock_Config+0xcc>)
 8000370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000372:	f003 0301 	and.w	r3, r3, #1
 8000376:	603b      	str	r3, [r7, #0]
 8000378:	4b23      	ldr	r3, [pc, #140]	; (8000408 <SystemClock_Config+0xd0>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000380:	4a21      	ldr	r2, [pc, #132]	; (8000408 <SystemClock_Config+0xd0>)
 8000382:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000386:	6193      	str	r3, [r2, #24]
 8000388:	4b1f      	ldr	r3, [pc, #124]	; (8000408 <SystemClock_Config+0xd0>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000390:	603b      	str	r3, [r7, #0]
 8000392:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000394:	bf00      	nop
 8000396:	4b1c      	ldr	r3, [pc, #112]	; (8000408 <SystemClock_Config+0xd0>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800039e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003a2:	d1f8      	bne.n	8000396 <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003a4:	2302      	movs	r3, #2
 80003a6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80003a8:	2301      	movs	r3, #1
 80003aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ac:	2340      	movs	r3, #64	; 0x40
 80003ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003b0:	2300      	movs	r3, #0
 80003b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003b8:	4618      	mov	r0, r3
 80003ba:	f000 fd2b 	bl	8000e14 <HAL_RCC_OscConfig>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80003c4:	f000 f87c 	bl	80004c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c8:	233f      	movs	r3, #63	; 0x3f
 80003ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003cc:	2300      	movs	r3, #0
 80003ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003d0:	2300      	movs	r3, #0
 80003d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003d4:	2300      	movs	r3, #0
 80003d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80003d8:	2300      	movs	r3, #0
 80003da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80003e0:	2300      	movs	r3, #0
 80003e2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80003e4:	2300      	movs	r3, #0
 80003e6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	2101      	movs	r1, #1
 80003ec:	4618      	mov	r0, r3
 80003ee:	f001 f921 	bl	8001634 <HAL_RCC_ClockConfig>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80003f8:	f000 f862 	bl	80004c0 <Error_Handler>
  }
}
 80003fc:	bf00      	nop
 80003fe:	3770      	adds	r7, #112	; 0x70
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	58000400 	.word	0x58000400
 8000408:	58024800 	.word	0x58024800

0800040c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b088      	sub	sp, #32
 8000410:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000412:	f107 030c 	add.w	r3, r7, #12
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
 800041a:	605a      	str	r2, [r3, #4]
 800041c:	609a      	str	r2, [r3, #8]
 800041e:	60da      	str	r2, [r3, #12]
 8000420:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000422:	4b24      	ldr	r3, [pc, #144]	; (80004b4 <MX_GPIO_Init+0xa8>)
 8000424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000428:	4a22      	ldr	r2, [pc, #136]	; (80004b4 <MX_GPIO_Init+0xa8>)
 800042a:	f043 0302 	orr.w	r3, r3, #2
 800042e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000432:	4b20      	ldr	r3, [pc, #128]	; (80004b4 <MX_GPIO_Init+0xa8>)
 8000434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000438:	f003 0302 	and.w	r3, r3, #2
 800043c:	60bb      	str	r3, [r7, #8]
 800043e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000440:	4b1c      	ldr	r3, [pc, #112]	; (80004b4 <MX_GPIO_Init+0xa8>)
 8000442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000446:	4a1b      	ldr	r2, [pc, #108]	; (80004b4 <MX_GPIO_Init+0xa8>)
 8000448:	f043 0310 	orr.w	r3, r3, #16
 800044c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000450:	4b18      	ldr	r3, [pc, #96]	; (80004b4 <MX_GPIO_Init+0xa8>)
 8000452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000456:	f003 0310 	and.w	r3, r3, #16
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800045e:	2200      	movs	r2, #0
 8000460:	2101      	movs	r1, #1
 8000462:	4815      	ldr	r0, [pc, #84]	; (80004b8 <MX_GPIO_Init+0xac>)
 8000464:	f000 fc82 	bl	8000d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000468:	2200      	movs	r2, #0
 800046a:	2102      	movs	r1, #2
 800046c:	4813      	ldr	r0, [pc, #76]	; (80004bc <MX_GPIO_Init+0xb0>)
 800046e:	f000 fc7d 	bl	8000d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000472:	2301      	movs	r3, #1
 8000474:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000476:	2301      	movs	r3, #1
 8000478:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047a:	2300      	movs	r3, #0
 800047c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047e:	2300      	movs	r3, #0
 8000480:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000482:	f107 030c 	add.w	r3, r7, #12
 8000486:	4619      	mov	r1, r3
 8000488:	480b      	ldr	r0, [pc, #44]	; (80004b8 <MX_GPIO_Init+0xac>)
 800048a:	f000 fabf 	bl	8000a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 800048e:	2302      	movs	r3, #2
 8000490:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000492:	2301      	movs	r3, #1
 8000494:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000496:	2300      	movs	r3, #0
 8000498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049a:	2300      	movs	r3, #0
 800049c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800049e:	f107 030c 	add.w	r3, r7, #12
 80004a2:	4619      	mov	r1, r3
 80004a4:	4805      	ldr	r0, [pc, #20]	; (80004bc <MX_GPIO_Init+0xb0>)
 80004a6:	f000 fab1 	bl	8000a0c <HAL_GPIO_Init>

}
 80004aa:	bf00      	nop
 80004ac:	3720      	adds	r7, #32
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	58024400 	.word	0x58024400
 80004b8:	58020400 	.word	0x58020400
 80004bc:	58021000 	.word	0x58021000

080004c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c4:	b672      	cpsid	i
}
 80004c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <Error_Handler+0x8>
	...

080004cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004d2:	4b0a      	ldr	r3, [pc, #40]	; (80004fc <HAL_MspInit+0x30>)
 80004d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80004d8:	4a08      	ldr	r2, [pc, #32]	; (80004fc <HAL_MspInit+0x30>)
 80004da:	f043 0302 	orr.w	r3, r3, #2
 80004de:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80004e2:	4b06      	ldr	r3, [pc, #24]	; (80004fc <HAL_MspInit+0x30>)
 80004e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80004e8:	f003 0302 	and.w	r3, r3, #2
 80004ec:	607b      	str	r3, [r7, #4]
 80004ee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004f0:	bf00      	nop
 80004f2:	370c      	adds	r7, #12
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	58024400 	.word	0x58024400

08000500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000504:	e7fe      	b.n	8000504 <NMI_Handler+0x4>

08000506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000506:	b480      	push	{r7}
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800050a:	e7fe      	b.n	800050a <HardFault_Handler+0x4>

0800050c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000510:	e7fe      	b.n	8000510 <MemManage_Handler+0x4>

08000512 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000516:	e7fe      	b.n	8000516 <BusFault_Handler+0x4>

08000518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800051c:	e7fe      	b.n	800051c <UsageFault_Handler+0x4>

0800051e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000522:	bf00      	nop
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr

0800053a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800053a:	b480      	push	{r7}
 800053c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800053e:	bf00      	nop
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800054c:	f000 f92a 	bl	80007a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000550:	bf00      	nop
 8000552:	bd80      	pop	{r7, pc}

08000554 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000558:	4b39      	ldr	r3, [pc, #228]	; (8000640 <SystemInit+0xec>)
 800055a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800055e:	4a38      	ldr	r2, [pc, #224]	; (8000640 <SystemInit+0xec>)
 8000560:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000564:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000568:	4b36      	ldr	r3, [pc, #216]	; (8000644 <SystemInit+0xf0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f003 030f 	and.w	r3, r3, #15
 8000570:	2b06      	cmp	r3, #6
 8000572:	d807      	bhi.n	8000584 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000574:	4b33      	ldr	r3, [pc, #204]	; (8000644 <SystemInit+0xf0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f023 030f 	bic.w	r3, r3, #15
 800057c:	4a31      	ldr	r2, [pc, #196]	; (8000644 <SystemInit+0xf0>)
 800057e:	f043 0307 	orr.w	r3, r3, #7
 8000582:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000584:	4b30      	ldr	r3, [pc, #192]	; (8000648 <SystemInit+0xf4>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a2f      	ldr	r2, [pc, #188]	; (8000648 <SystemInit+0xf4>)
 800058a:	f043 0301 	orr.w	r3, r3, #1
 800058e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000590:	4b2d      	ldr	r3, [pc, #180]	; (8000648 <SystemInit+0xf4>)
 8000592:	2200      	movs	r2, #0
 8000594:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000596:	4b2c      	ldr	r3, [pc, #176]	; (8000648 <SystemInit+0xf4>)
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	492b      	ldr	r1, [pc, #172]	; (8000648 <SystemInit+0xf4>)
 800059c:	4b2b      	ldr	r3, [pc, #172]	; (800064c <SystemInit+0xf8>)
 800059e:	4013      	ands	r3, r2
 80005a0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005a2:	4b28      	ldr	r3, [pc, #160]	; (8000644 <SystemInit+0xf0>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f003 0308 	and.w	r3, r3, #8
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d007      	beq.n	80005be <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005ae:	4b25      	ldr	r3, [pc, #148]	; (8000644 <SystemInit+0xf0>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f023 030f 	bic.w	r3, r3, #15
 80005b6:	4a23      	ldr	r2, [pc, #140]	; (8000644 <SystemInit+0xf0>)
 80005b8:	f043 0307 	orr.w	r3, r3, #7
 80005bc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80005be:	4b22      	ldr	r3, [pc, #136]	; (8000648 <SystemInit+0xf4>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80005c4:	4b20      	ldr	r3, [pc, #128]	; (8000648 <SystemInit+0xf4>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80005ca:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <SystemInit+0xf4>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80005d0:	4b1d      	ldr	r3, [pc, #116]	; (8000648 <SystemInit+0xf4>)
 80005d2:	4a1f      	ldr	r2, [pc, #124]	; (8000650 <SystemInit+0xfc>)
 80005d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80005d6:	4b1c      	ldr	r3, [pc, #112]	; (8000648 <SystemInit+0xf4>)
 80005d8:	4a1e      	ldr	r2, [pc, #120]	; (8000654 <SystemInit+0x100>)
 80005da:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80005dc:	4b1a      	ldr	r3, [pc, #104]	; (8000648 <SystemInit+0xf4>)
 80005de:	4a1e      	ldr	r2, [pc, #120]	; (8000658 <SystemInit+0x104>)
 80005e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80005e2:	4b19      	ldr	r3, [pc, #100]	; (8000648 <SystemInit+0xf4>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80005e8:	4b17      	ldr	r3, [pc, #92]	; (8000648 <SystemInit+0xf4>)
 80005ea:	4a1b      	ldr	r2, [pc, #108]	; (8000658 <SystemInit+0x104>)
 80005ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80005ee:	4b16      	ldr	r3, [pc, #88]	; (8000648 <SystemInit+0xf4>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80005f4:	4b14      	ldr	r3, [pc, #80]	; (8000648 <SystemInit+0xf4>)
 80005f6:	4a18      	ldr	r2, [pc, #96]	; (8000658 <SystemInit+0x104>)
 80005f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80005fa:	4b13      	ldr	r3, [pc, #76]	; (8000648 <SystemInit+0xf4>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <SystemInit+0xf4>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a10      	ldr	r2, [pc, #64]	; (8000648 <SystemInit+0xf4>)
 8000606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800060a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800060c:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <SystemInit+0xf4>)
 800060e:	2200      	movs	r2, #0
 8000610:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000612:	4b12      	ldr	r3, [pc, #72]	; (800065c <SystemInit+0x108>)
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	4b12      	ldr	r3, [pc, #72]	; (8000660 <SystemInit+0x10c>)
 8000618:	4013      	ands	r3, r2
 800061a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800061e:	d202      	bcs.n	8000626 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000620:	4b10      	ldr	r3, [pc, #64]	; (8000664 <SystemInit+0x110>)
 8000622:	2201      	movs	r2, #1
 8000624:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <SystemInit+0x114>)
 8000628:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800062c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <SystemInit+0xec>)
 8000630:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000634:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000636:	bf00      	nop
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	e000ed00 	.word	0xe000ed00
 8000644:	52002000 	.word	0x52002000
 8000648:	58024400 	.word	0x58024400
 800064c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000650:	02020200 	.word	0x02020200
 8000654:	01ff0000 	.word	0x01ff0000
 8000658:	01010280 	.word	0x01010280
 800065c:	5c001000 	.word	0x5c001000
 8000660:	ffff0000 	.word	0xffff0000
 8000664:	51008108 	.word	0x51008108
 8000668:	52004000 	.word	0x52004000

0800066c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800066c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000670:	f7ff ff70 	bl	8000554 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000674:	480c      	ldr	r0, [pc, #48]	; (80006a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000676:	490d      	ldr	r1, [pc, #52]	; (80006ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000678:	4a0d      	ldr	r2, [pc, #52]	; (80006b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800067a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800067c:	e002      	b.n	8000684 <LoopCopyDataInit>

0800067e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000682:	3304      	adds	r3, #4

08000684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000688:	d3f9      	bcc.n	800067e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800068a:	4a0a      	ldr	r2, [pc, #40]	; (80006b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800068c:	4c0a      	ldr	r4, [pc, #40]	; (80006b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800068e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000690:	e001      	b.n	8000696 <LoopFillZerobss>

08000692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000694:	3204      	adds	r2, #4

08000696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000698:	d3fb      	bcc.n	8000692 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800069a:	f001 fafb 	bl	8001c94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800069e:	f7ff fe1b 	bl	80002d8 <main>
  bx  lr
 80006a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80006a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ac:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80006b0:	08001d1c 	.word	0x08001d1c
  ldr r2, =_sbss
 80006b4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80006b8:	20000030 	.word	0x20000030

080006bc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006bc:	e7fe      	b.n	80006bc <ADC3_IRQHandler>
	...

080006c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006c6:	2003      	movs	r0, #3
 80006c8:	f000 f96e 	bl	80009a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80006cc:	f001 f968 	bl	80019a0 <HAL_RCC_GetSysClockFreq>
 80006d0:	4602      	mov	r2, r0
 80006d2:	4b15      	ldr	r3, [pc, #84]	; (8000728 <HAL_Init+0x68>)
 80006d4:	699b      	ldr	r3, [r3, #24]
 80006d6:	0a1b      	lsrs	r3, r3, #8
 80006d8:	f003 030f 	and.w	r3, r3, #15
 80006dc:	4913      	ldr	r1, [pc, #76]	; (800072c <HAL_Init+0x6c>)
 80006de:	5ccb      	ldrb	r3, [r1, r3]
 80006e0:	f003 031f 	and.w	r3, r3, #31
 80006e4:	fa22 f303 	lsr.w	r3, r2, r3
 80006e8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80006ea:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <HAL_Init+0x68>)
 80006ec:	699b      	ldr	r3, [r3, #24]
 80006ee:	f003 030f 	and.w	r3, r3, #15
 80006f2:	4a0e      	ldr	r2, [pc, #56]	; (800072c <HAL_Init+0x6c>)
 80006f4:	5cd3      	ldrb	r3, [r2, r3]
 80006f6:	f003 031f 	and.w	r3, r3, #31
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	fa22 f303 	lsr.w	r3, r2, r3
 8000700:	4a0b      	ldr	r2, [pc, #44]	; (8000730 <HAL_Init+0x70>)
 8000702:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000704:	4a0b      	ldr	r2, [pc, #44]	; (8000734 <HAL_Init+0x74>)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800070a:	2000      	movs	r0, #0
 800070c:	f000 f814 	bl	8000738 <HAL_InitTick>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000716:	2301      	movs	r3, #1
 8000718:	e002      	b.n	8000720 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800071a:	f7ff fed7 	bl	80004cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800071e:	2300      	movs	r3, #0
}
 8000720:	4618      	mov	r0, r3
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	58024400 	.word	0x58024400
 800072c:	08001d04 	.word	0x08001d04
 8000730:	20000004 	.word	0x20000004
 8000734:	20000000 	.word	0x20000000

08000738 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <HAL_InitTick+0x60>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d101      	bne.n	800074c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000748:	2301      	movs	r3, #1
 800074a:	e021      	b.n	8000790 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800074c:	4b13      	ldr	r3, [pc, #76]	; (800079c <HAL_InitTick+0x64>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <HAL_InitTick+0x60>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	4619      	mov	r1, r3
 8000756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075a:	fbb3 f3f1 	udiv	r3, r3, r1
 800075e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000762:	4618      	mov	r0, r3
 8000764:	f000 f945 	bl	80009f2 <HAL_SYSTICK_Config>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800076e:	2301      	movs	r3, #1
 8000770:	e00e      	b.n	8000790 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2b0f      	cmp	r3, #15
 8000776:	d80a      	bhi.n	800078e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000778:	2200      	movs	r2, #0
 800077a:	6879      	ldr	r1, [r7, #4]
 800077c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000780:	f000 f91d 	bl	80009be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000784:	4a06      	ldr	r2, [pc, #24]	; (80007a0 <HAL_InitTick+0x68>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800078a:	2300      	movs	r3, #0
 800078c:	e000      	b.n	8000790 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800078e:	2301      	movs	r3, #1
}
 8000790:	4618      	mov	r0, r3
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	2000000c 	.word	0x2000000c
 800079c:	20000000 	.word	0x20000000
 80007a0:	20000008 	.word	0x20000008

080007a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <HAL_IncTick+0x20>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_IncTick+0x24>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4413      	add	r3, r2
 80007b4:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <HAL_IncTick+0x24>)
 80007b6:	6013      	str	r3, [r2, #0]
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	2000000c 	.word	0x2000000c
 80007c8:	2000002c 	.word	0x2000002c

080007cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  return uwTick;
 80007d0:	4b03      	ldr	r3, [pc, #12]	; (80007e0 <HAL_GetTick+0x14>)
 80007d2:	681b      	ldr	r3, [r3, #0]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	2000002c 	.word	0x2000002c

080007e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007ec:	f7ff ffee 	bl	80007cc <HAL_GetTick>
 80007f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80007fc:	d005      	beq.n	800080a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007fe:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <HAL_Delay+0x44>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	461a      	mov	r2, r3
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	4413      	add	r3, r2
 8000808:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800080a:	bf00      	nop
 800080c:	f7ff ffde 	bl	80007cc <HAL_GetTick>
 8000810:	4602      	mov	r2, r0
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	1ad3      	subs	r3, r2, r3
 8000816:	68fa      	ldr	r2, [r7, #12]
 8000818:	429a      	cmp	r2, r3
 800081a:	d8f7      	bhi.n	800080c <HAL_Delay+0x28>
  {
  }
}
 800081c:	bf00      	nop
 800081e:	bf00      	nop
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	2000000c 	.word	0x2000000c

0800082c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000830:	4b03      	ldr	r3, [pc, #12]	; (8000840 <HAL_GetREVID+0x14>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	0c1b      	lsrs	r3, r3, #16
}
 8000836:	4618      	mov	r0, r3
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	5c001000 	.word	0x5c001000

08000844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f003 0307 	and.w	r3, r3, #7
 8000852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000854:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <__NVIC_SetPriorityGrouping+0x40>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800085a:	68ba      	ldr	r2, [r7, #8]
 800085c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000860:	4013      	ands	r3, r2
 8000862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <__NVIC_SetPriorityGrouping+0x44>)
 800086e:	4313      	orrs	r3, r2
 8000870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000872:	4a04      	ldr	r2, [pc, #16]	; (8000884 <__NVIC_SetPriorityGrouping+0x40>)
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	60d3      	str	r3, [r2, #12]
}
 8000878:	bf00      	nop
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	e000ed00 	.word	0xe000ed00
 8000888:	05fa0000 	.word	0x05fa0000

0800088c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000890:	4b04      	ldr	r3, [pc, #16]	; (80008a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	0a1b      	lsrs	r3, r3, #8
 8000896:	f003 0307 	and.w	r3, r3, #7
}
 800089a:	4618      	mov	r0, r3
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	6039      	str	r1, [r7, #0]
 80008b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80008b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	db0a      	blt.n	80008d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	490c      	ldr	r1, [pc, #48]	; (80008f4 <__NVIC_SetPriority+0x4c>)
 80008c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008c6:	0112      	lsls	r2, r2, #4
 80008c8:	b2d2      	uxtb	r2, r2
 80008ca:	440b      	add	r3, r1
 80008cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008d0:	e00a      	b.n	80008e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4908      	ldr	r1, [pc, #32]	; (80008f8 <__NVIC_SetPriority+0x50>)
 80008d8:	88fb      	ldrh	r3, [r7, #6]
 80008da:	f003 030f 	and.w	r3, r3, #15
 80008de:	3b04      	subs	r3, #4
 80008e0:	0112      	lsls	r2, r2, #4
 80008e2:	b2d2      	uxtb	r2, r2
 80008e4:	440b      	add	r3, r1
 80008e6:	761a      	strb	r2, [r3, #24]
}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	e000e100 	.word	0xe000e100
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b089      	sub	sp, #36	; 0x24
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	f003 0307 	and.w	r3, r3, #7
 800090e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	f1c3 0307 	rsb	r3, r3, #7
 8000916:	2b04      	cmp	r3, #4
 8000918:	bf28      	it	cs
 800091a:	2304      	movcs	r3, #4
 800091c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	3304      	adds	r3, #4
 8000922:	2b06      	cmp	r3, #6
 8000924:	d902      	bls.n	800092c <NVIC_EncodePriority+0x30>
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	3b03      	subs	r3, #3
 800092a:	e000      	b.n	800092e <NVIC_EncodePriority+0x32>
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000930:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000934:	69bb      	ldr	r3, [r7, #24]
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	43da      	mvns	r2, r3
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	401a      	ands	r2, r3
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000944:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	fa01 f303 	lsl.w	r3, r1, r3
 800094e:	43d9      	mvns	r1, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000954:	4313      	orrs	r3, r2
         );
}
 8000956:	4618      	mov	r0, r3
 8000958:	3724      	adds	r7, #36	; 0x24
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
	...

08000964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3b01      	subs	r3, #1
 8000970:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000974:	d301      	bcc.n	800097a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000976:	2301      	movs	r3, #1
 8000978:	e00f      	b.n	800099a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800097a:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <SysTick_Config+0x40>)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3b01      	subs	r3, #1
 8000980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000982:	210f      	movs	r1, #15
 8000984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000988:	f7ff ff8e 	bl	80008a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <SysTick_Config+0x40>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000992:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <SysTick_Config+0x40>)
 8000994:	2207      	movs	r2, #7
 8000996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	e000e010 	.word	0xe000e010

080009a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f7ff ff47 	bl	8000844 <__NVIC_SetPriorityGrouping>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b086      	sub	sp, #24
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	4603      	mov	r3, r0
 80009c6:	60b9      	str	r1, [r7, #8]
 80009c8:	607a      	str	r2, [r7, #4]
 80009ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009cc:	f7ff ff5e 	bl	800088c <__NVIC_GetPriorityGrouping>
 80009d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	68b9      	ldr	r1, [r7, #8]
 80009d6:	6978      	ldr	r0, [r7, #20]
 80009d8:	f7ff ff90 	bl	80008fc <NVIC_EncodePriority>
 80009dc:	4602      	mov	r2, r0
 80009de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009e2:	4611      	mov	r1, r2
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff ff5f 	bl	80008a8 <__NVIC_SetPriority>
}
 80009ea:	bf00      	nop
 80009ec:	3718      	adds	r7, #24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b082      	sub	sp, #8
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f7ff ffb2 	bl	8000964 <SysTick_Config>
 8000a00:	4603      	mov	r3, r0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b089      	sub	sp, #36	; 0x24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000a1a:	4b89      	ldr	r3, [pc, #548]	; (8000c40 <HAL_GPIO_Init+0x234>)
 8000a1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000a1e:	e194      	b.n	8000d4a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	2101      	movs	r1, #1
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	f000 8186 	beq.w	8000d44 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d00b      	beq.n	8000a58 <HAL_GPIO_Init+0x4c>
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	2b02      	cmp	r3, #2
 8000a46:	d007      	beq.n	8000a58 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a4c:	2b11      	cmp	r3, #17
 8000a4e:	d003      	beq.n	8000a58 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	2b12      	cmp	r3, #18
 8000a56:	d130      	bne.n	8000aba <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	2203      	movs	r2, #3
 8000a64:	fa02 f303 	lsl.w	r3, r2, r3
 8000a68:	43db      	mvns	r3, r3
 8000a6a:	69ba      	ldr	r2, [r7, #24]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	68da      	ldr	r2, [r3, #12]
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	69ba      	ldr	r2, [r7, #24]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	69ba      	ldr	r2, [r7, #24]
 8000a86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a8e:	2201      	movs	r2, #1
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	43db      	mvns	r3, r3
 8000a98:	69ba      	ldr	r2, [r7, #24]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	091b      	lsrs	r3, r3, #4
 8000aa4:	f003 0201 	and.w	r2, r3, #1
 8000aa8:	69fb      	ldr	r3, [r7, #28]
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	69ba      	ldr	r2, [r7, #24]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	69ba      	ldr	r2, [r7, #24]
 8000ab8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	68db      	ldr	r3, [r3, #12]
 8000abe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	2203      	movs	r2, #3
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	43db      	mvns	r3, r3
 8000acc:	69ba      	ldr	r2, [r7, #24]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	689a      	ldr	r2, [r3, #8]
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	69ba      	ldr	r2, [r7, #24]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	69ba      	ldr	r2, [r7, #24]
 8000ae8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d003      	beq.n	8000afa <HAL_GPIO_Init+0xee>
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	2b12      	cmp	r3, #18
 8000af8:	d123      	bne.n	8000b42 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	08da      	lsrs	r2, r3, #3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	3208      	adds	r2, #8
 8000b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	220f      	movs	r2, #15
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	43db      	mvns	r3, r3
 8000b18:	69ba      	ldr	r2, [r7, #24]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	691a      	ldr	r2, [r3, #16]
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	f003 0307 	and.w	r3, r3, #7
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	69ba      	ldr	r2, [r7, #24]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	08da      	lsrs	r2, r3, #3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3208      	adds	r2, #8
 8000b3c:	69b9      	ldr	r1, [r7, #24]
 8000b3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	2203      	movs	r2, #3
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43db      	mvns	r3, r3
 8000b54:	69ba      	ldr	r2, [r7, #24]
 8000b56:	4013      	ands	r3, r2
 8000b58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f003 0203 	and.w	r2, r3, #3
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	69ba      	ldr	r2, [r7, #24]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	69ba      	ldr	r2, [r7, #24]
 8000b74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f000 80e0 	beq.w	8000d44 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b84:	4b2f      	ldr	r3, [pc, #188]	; (8000c44 <HAL_GPIO_Init+0x238>)
 8000b86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b8a:	4a2e      	ldr	r2, [pc, #184]	; (8000c44 <HAL_GPIO_Init+0x238>)
 8000b8c:	f043 0302 	orr.w	r3, r3, #2
 8000b90:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b94:	4b2b      	ldr	r3, [pc, #172]	; (8000c44 <HAL_GPIO_Init+0x238>)
 8000b96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b9a:	f003 0302 	and.w	r3, r3, #2
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ba2:	4a29      	ldr	r2, [pc, #164]	; (8000c48 <HAL_GPIO_Init+0x23c>)
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	089b      	lsrs	r3, r3, #2
 8000ba8:	3302      	adds	r3, #2
 8000baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	f003 0303 	and.w	r3, r3, #3
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	220f      	movs	r2, #15
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	69ba      	ldr	r2, [r7, #24]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a20      	ldr	r2, [pc, #128]	; (8000c4c <HAL_GPIO_Init+0x240>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d052      	beq.n	8000c74 <HAL_GPIO_Init+0x268>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a1f      	ldr	r2, [pc, #124]	; (8000c50 <HAL_GPIO_Init+0x244>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d031      	beq.n	8000c3a <HAL_GPIO_Init+0x22e>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a1e      	ldr	r2, [pc, #120]	; (8000c54 <HAL_GPIO_Init+0x248>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d02b      	beq.n	8000c36 <HAL_GPIO_Init+0x22a>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a1d      	ldr	r2, [pc, #116]	; (8000c58 <HAL_GPIO_Init+0x24c>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d025      	beq.n	8000c32 <HAL_GPIO_Init+0x226>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a1c      	ldr	r2, [pc, #112]	; (8000c5c <HAL_GPIO_Init+0x250>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d01f      	beq.n	8000c2e <HAL_GPIO_Init+0x222>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a1b      	ldr	r2, [pc, #108]	; (8000c60 <HAL_GPIO_Init+0x254>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d019      	beq.n	8000c2a <HAL_GPIO_Init+0x21e>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a1a      	ldr	r2, [pc, #104]	; (8000c64 <HAL_GPIO_Init+0x258>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d013      	beq.n	8000c26 <HAL_GPIO_Init+0x21a>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a19      	ldr	r2, [pc, #100]	; (8000c68 <HAL_GPIO_Init+0x25c>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d00d      	beq.n	8000c22 <HAL_GPIO_Init+0x216>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a18      	ldr	r2, [pc, #96]	; (8000c6c <HAL_GPIO_Init+0x260>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d007      	beq.n	8000c1e <HAL_GPIO_Init+0x212>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a17      	ldr	r2, [pc, #92]	; (8000c70 <HAL_GPIO_Init+0x264>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d101      	bne.n	8000c1a <HAL_GPIO_Init+0x20e>
 8000c16:	2309      	movs	r3, #9
 8000c18:	e02d      	b.n	8000c76 <HAL_GPIO_Init+0x26a>
 8000c1a:	230a      	movs	r3, #10
 8000c1c:	e02b      	b.n	8000c76 <HAL_GPIO_Init+0x26a>
 8000c1e:	2308      	movs	r3, #8
 8000c20:	e029      	b.n	8000c76 <HAL_GPIO_Init+0x26a>
 8000c22:	2307      	movs	r3, #7
 8000c24:	e027      	b.n	8000c76 <HAL_GPIO_Init+0x26a>
 8000c26:	2306      	movs	r3, #6
 8000c28:	e025      	b.n	8000c76 <HAL_GPIO_Init+0x26a>
 8000c2a:	2305      	movs	r3, #5
 8000c2c:	e023      	b.n	8000c76 <HAL_GPIO_Init+0x26a>
 8000c2e:	2304      	movs	r3, #4
 8000c30:	e021      	b.n	8000c76 <HAL_GPIO_Init+0x26a>
 8000c32:	2303      	movs	r3, #3
 8000c34:	e01f      	b.n	8000c76 <HAL_GPIO_Init+0x26a>
 8000c36:	2302      	movs	r3, #2
 8000c38:	e01d      	b.n	8000c76 <HAL_GPIO_Init+0x26a>
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e01b      	b.n	8000c76 <HAL_GPIO_Init+0x26a>
 8000c3e:	bf00      	nop
 8000c40:	58000080 	.word	0x58000080
 8000c44:	58024400 	.word	0x58024400
 8000c48:	58000400 	.word	0x58000400
 8000c4c:	58020000 	.word	0x58020000
 8000c50:	58020400 	.word	0x58020400
 8000c54:	58020800 	.word	0x58020800
 8000c58:	58020c00 	.word	0x58020c00
 8000c5c:	58021000 	.word	0x58021000
 8000c60:	58021400 	.word	0x58021400
 8000c64:	58021800 	.word	0x58021800
 8000c68:	58021c00 	.word	0x58021c00
 8000c6c:	58022000 	.word	0x58022000
 8000c70:	58022400 	.word	0x58022400
 8000c74:	2300      	movs	r3, #0
 8000c76:	69fa      	ldr	r2, [r7, #28]
 8000c78:	f002 0203 	and.w	r2, r2, #3
 8000c7c:	0092      	lsls	r2, r2, #2
 8000c7e:	4093      	lsls	r3, r2
 8000c80:	69ba      	ldr	r2, [r7, #24]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c86:	4938      	ldr	r1, [pc, #224]	; (8000d68 <HAL_GPIO_Init+0x35c>)
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	089b      	lsrs	r3, r3, #2
 8000c8c:	3302      	adds	r3, #2
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	69ba      	ldr	r2, [r7, #24]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d003      	beq.n	8000cb8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d003      	beq.n	8000ce2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d003      	beq.n	8000d0e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000d0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	43db      	mvns	r3, r3
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	4013      	ands	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d003      	beq.n	8000d3c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000d3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	3301      	adds	r3, #1
 8000d48:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	fa22 f303 	lsr.w	r3, r2, r3
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	f47f ae63 	bne.w	8000a20 <HAL_GPIO_Init+0x14>
  }
}
 8000d5a:	bf00      	nop
 8000d5c:	bf00      	nop
 8000d5e:	3724      	adds	r7, #36	; 0x24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	58000400 	.word	0x58000400

08000d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	460b      	mov	r3, r1
 8000d76:	807b      	strh	r3, [r7, #2]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d7c:	787b      	ldrb	r3, [r7, #1]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d003      	beq.n	8000d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d82:	887a      	ldrh	r2, [r7, #2]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000d88:	e003      	b.n	8000d92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000d8a:	887b      	ldrh	r3, [r7, #2]
 8000d8c:	041a      	lsls	r2, r3, #16
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	619a      	str	r2, [r3, #24]
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000da8:	4b19      	ldr	r3, [pc, #100]	; (8000e10 <HAL_PWREx_ConfigSupply+0x70>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	f003 0304 	and.w	r3, r3, #4
 8000db0:	2b04      	cmp	r3, #4
 8000db2:	d00a      	beq.n	8000dca <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000db4:	4b16      	ldr	r3, [pc, #88]	; (8000e10 <HAL_PWREx_ConfigSupply+0x70>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	f003 0307 	and.w	r3, r3, #7
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d001      	beq.n	8000dc6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e01f      	b.n	8000e06 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e01d      	b.n	8000e06 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000dca:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <HAL_PWREx_ConfigSupply+0x70>)
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	f023 0207 	bic.w	r2, r3, #7
 8000dd2:	490f      	ldr	r1, [pc, #60]	; (8000e10 <HAL_PWREx_ConfigSupply+0x70>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000dda:	f7ff fcf7 	bl	80007cc <HAL_GetTick>
 8000dde:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000de0:	e009      	b.n	8000df6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000de2:	f7ff fcf3 	bl	80007cc <HAL_GetTick>
 8000de6:	4602      	mov	r2, r0
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000df0:	d901      	bls.n	8000df6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e007      	b.n	8000e06 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_PWREx_ConfigSupply+0x70>)
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e02:	d1ee      	bne.n	8000de2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	58024800 	.word	0x58024800

08000e14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08c      	sub	sp, #48	; 0x30
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d101      	bne.n	8000e26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e3ff      	b.n	8001626 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f000 8087 	beq.w	8000f42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e34:	4b99      	ldr	r3, [pc, #612]	; (800109c <HAL_RCC_OscConfig+0x288>)
 8000e36:	691b      	ldr	r3, [r3, #16]
 8000e38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000e3e:	4b97      	ldr	r3, [pc, #604]	; (800109c <HAL_RCC_OscConfig+0x288>)
 8000e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e42:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e46:	2b10      	cmp	r3, #16
 8000e48:	d007      	beq.n	8000e5a <HAL_RCC_OscConfig+0x46>
 8000e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e4c:	2b18      	cmp	r3, #24
 8000e4e:	d110      	bne.n	8000e72 <HAL_RCC_OscConfig+0x5e>
 8000e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e52:	f003 0303 	and.w	r3, r3, #3
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d10b      	bne.n	8000e72 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e5a:	4b90      	ldr	r3, [pc, #576]	; (800109c <HAL_RCC_OscConfig+0x288>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d06c      	beq.n	8000f40 <HAL_RCC_OscConfig+0x12c>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d168      	bne.n	8000f40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e3d9      	b.n	8001626 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e7a:	d106      	bne.n	8000e8a <HAL_RCC_OscConfig+0x76>
 8000e7c:	4b87      	ldr	r3, [pc, #540]	; (800109c <HAL_RCC_OscConfig+0x288>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a86      	ldr	r2, [pc, #536]	; (800109c <HAL_RCC_OscConfig+0x288>)
 8000e82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e86:	6013      	str	r3, [r2, #0]
 8000e88:	e02e      	b.n	8000ee8 <HAL_RCC_OscConfig+0xd4>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d10c      	bne.n	8000eac <HAL_RCC_OscConfig+0x98>
 8000e92:	4b82      	ldr	r3, [pc, #520]	; (800109c <HAL_RCC_OscConfig+0x288>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a81      	ldr	r2, [pc, #516]	; (800109c <HAL_RCC_OscConfig+0x288>)
 8000e98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e9c:	6013      	str	r3, [r2, #0]
 8000e9e:	4b7f      	ldr	r3, [pc, #508]	; (800109c <HAL_RCC_OscConfig+0x288>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a7e      	ldr	r2, [pc, #504]	; (800109c <HAL_RCC_OscConfig+0x288>)
 8000ea4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ea8:	6013      	str	r3, [r2, #0]
 8000eaa:	e01d      	b.n	8000ee8 <HAL_RCC_OscConfig+0xd4>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000eb4:	d10c      	bne.n	8000ed0 <HAL_RCC_OscConfig+0xbc>
 8000eb6:	4b79      	ldr	r3, [pc, #484]	; (800109c <HAL_RCC_OscConfig+0x288>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a78      	ldr	r2, [pc, #480]	; (800109c <HAL_RCC_OscConfig+0x288>)
 8000ebc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ec0:	6013      	str	r3, [r2, #0]
 8000ec2:	4b76      	ldr	r3, [pc, #472]	; (800109c <HAL_RCC_OscConfig+0x288>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a75      	ldr	r2, [pc, #468]	; (800109c <HAL_RCC_OscConfig+0x288>)
 8000ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ecc:	6013      	str	r3, [r2, #0]
 8000ece:	e00b      	b.n	8000ee8 <HAL_RCC_OscConfig+0xd4>
 8000ed0:	4b72      	ldr	r3, [pc, #456]	; (800109c <HAL_RCC_OscConfig+0x288>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a71      	ldr	r2, [pc, #452]	; (800109c <HAL_RCC_OscConfig+0x288>)
 8000ed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eda:	6013      	str	r3, [r2, #0]
 8000edc:	4b6f      	ldr	r3, [pc, #444]	; (800109c <HAL_RCC_OscConfig+0x288>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a6e      	ldr	r2, [pc, #440]	; (800109c <HAL_RCC_OscConfig+0x288>)
 8000ee2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ee6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d013      	beq.n	8000f18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ef0:	f7ff fc6c 	bl	80007cc <HAL_GetTick>
 8000ef4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ef6:	e008      	b.n	8000f0a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ef8:	f7ff fc68 	bl	80007cc <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	2b64      	cmp	r3, #100	; 0x64
 8000f04:	d901      	bls.n	8000f0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e38d      	b.n	8001626 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f0a:	4b64      	ldr	r3, [pc, #400]	; (800109c <HAL_RCC_OscConfig+0x288>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d0f0      	beq.n	8000ef8 <HAL_RCC_OscConfig+0xe4>
 8000f16:	e014      	b.n	8000f42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f18:	f7ff fc58 	bl	80007cc <HAL_GetTick>
 8000f1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f1e:	e008      	b.n	8000f32 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f20:	f7ff fc54 	bl	80007cc <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	2b64      	cmp	r3, #100	; 0x64
 8000f2c:	d901      	bls.n	8000f32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e379      	b.n	8001626 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f32:	4b5a      	ldr	r3, [pc, #360]	; (800109c <HAL_RCC_OscConfig+0x288>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d1f0      	bne.n	8000f20 <HAL_RCC_OscConfig+0x10c>
 8000f3e:	e000      	b.n	8000f42 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	f000 80ae 	beq.w	80010ac <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f50:	4b52      	ldr	r3, [pc, #328]	; (800109c <HAL_RCC_OscConfig+0x288>)
 8000f52:	691b      	ldr	r3, [r3, #16]
 8000f54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000f58:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000f5a:	4b50      	ldr	r3, [pc, #320]	; (800109c <HAL_RCC_OscConfig+0x288>)
 8000f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000f60:	6a3b      	ldr	r3, [r7, #32]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d007      	beq.n	8000f76 <HAL_RCC_OscConfig+0x162>
 8000f66:	6a3b      	ldr	r3, [r7, #32]
 8000f68:	2b18      	cmp	r3, #24
 8000f6a:	d13a      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x1ce>
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d135      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f76:	4b49      	ldr	r3, [pc, #292]	; (800109c <HAL_RCC_OscConfig+0x288>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0304 	and.w	r3, r3, #4
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d005      	beq.n	8000f8e <HAL_RCC_OscConfig+0x17a>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d101      	bne.n	8000f8e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e34b      	b.n	8001626 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f8e:	f7ff fc4d 	bl	800082c <HAL_GetREVID>
 8000f92:	4603      	mov	r3, r0
 8000f94:	f241 0203 	movw	r2, #4099	; 0x1003
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d817      	bhi.n	8000fcc <HAL_RCC_OscConfig+0x1b8>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	691b      	ldr	r3, [r3, #16]
 8000fa0:	2b40      	cmp	r3, #64	; 0x40
 8000fa2:	d108      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x1a2>
 8000fa4:	4b3d      	ldr	r3, [pc, #244]	; (800109c <HAL_RCC_OscConfig+0x288>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000fac:	4a3b      	ldr	r2, [pc, #236]	; (800109c <HAL_RCC_OscConfig+0x288>)
 8000fae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fb4:	e07a      	b.n	80010ac <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb6:	4b39      	ldr	r3, [pc, #228]	; (800109c <HAL_RCC_OscConfig+0x288>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	691b      	ldr	r3, [r3, #16]
 8000fc2:	031b      	lsls	r3, r3, #12
 8000fc4:	4935      	ldr	r1, [pc, #212]	; (800109c <HAL_RCC_OscConfig+0x288>)
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fca:	e06f      	b.n	80010ac <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fcc:	4b33      	ldr	r3, [pc, #204]	; (800109c <HAL_RCC_OscConfig+0x288>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	061b      	lsls	r3, r3, #24
 8000fda:	4930      	ldr	r1, [pc, #192]	; (800109c <HAL_RCC_OscConfig+0x288>)
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fe0:	e064      	b.n	80010ac <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d045      	beq.n	8001076 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000fea:	4b2c      	ldr	r3, [pc, #176]	; (800109c <HAL_RCC_OscConfig+0x288>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f023 0219 	bic.w	r2, r3, #25
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	4929      	ldr	r1, [pc, #164]	; (800109c <HAL_RCC_OscConfig+0x288>)
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ffc:	f7ff fbe6 	bl	80007cc <HAL_GetTick>
 8001000:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001002:	e008      	b.n	8001016 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001004:	f7ff fbe2 	bl	80007cc <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b02      	cmp	r3, #2
 8001010:	d901      	bls.n	8001016 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e307      	b.n	8001626 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001016:	4b21      	ldr	r3, [pc, #132]	; (800109c <HAL_RCC_OscConfig+0x288>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0304 	and.w	r3, r3, #4
 800101e:	2b00      	cmp	r3, #0
 8001020:	d0f0      	beq.n	8001004 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001022:	f7ff fc03 	bl	800082c <HAL_GetREVID>
 8001026:	4603      	mov	r3, r0
 8001028:	f241 0203 	movw	r2, #4099	; 0x1003
 800102c:	4293      	cmp	r3, r2
 800102e:	d817      	bhi.n	8001060 <HAL_RCC_OscConfig+0x24c>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	691b      	ldr	r3, [r3, #16]
 8001034:	2b40      	cmp	r3, #64	; 0x40
 8001036:	d108      	bne.n	800104a <HAL_RCC_OscConfig+0x236>
 8001038:	4b18      	ldr	r3, [pc, #96]	; (800109c <HAL_RCC_OscConfig+0x288>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001040:	4a16      	ldr	r2, [pc, #88]	; (800109c <HAL_RCC_OscConfig+0x288>)
 8001042:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001046:	6053      	str	r3, [r2, #4]
 8001048:	e030      	b.n	80010ac <HAL_RCC_OscConfig+0x298>
 800104a:	4b14      	ldr	r3, [pc, #80]	; (800109c <HAL_RCC_OscConfig+0x288>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	691b      	ldr	r3, [r3, #16]
 8001056:	031b      	lsls	r3, r3, #12
 8001058:	4910      	ldr	r1, [pc, #64]	; (800109c <HAL_RCC_OscConfig+0x288>)
 800105a:	4313      	orrs	r3, r2
 800105c:	604b      	str	r3, [r1, #4]
 800105e:	e025      	b.n	80010ac <HAL_RCC_OscConfig+0x298>
 8001060:	4b0e      	ldr	r3, [pc, #56]	; (800109c <HAL_RCC_OscConfig+0x288>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	691b      	ldr	r3, [r3, #16]
 800106c:	061b      	lsls	r3, r3, #24
 800106e:	490b      	ldr	r1, [pc, #44]	; (800109c <HAL_RCC_OscConfig+0x288>)
 8001070:	4313      	orrs	r3, r2
 8001072:	604b      	str	r3, [r1, #4]
 8001074:	e01a      	b.n	80010ac <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <HAL_RCC_OscConfig+0x288>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a08      	ldr	r2, [pc, #32]	; (800109c <HAL_RCC_OscConfig+0x288>)
 800107c:	f023 0301 	bic.w	r3, r3, #1
 8001080:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001082:	f7ff fba3 	bl	80007cc <HAL_GetTick>
 8001086:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001088:	e00a      	b.n	80010a0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800108a:	f7ff fb9f 	bl	80007cc <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	2b02      	cmp	r3, #2
 8001096:	d903      	bls.n	80010a0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001098:	2303      	movs	r3, #3
 800109a:	e2c4      	b.n	8001626 <HAL_RCC_OscConfig+0x812>
 800109c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80010a0:	4ba4      	ldr	r3, [pc, #656]	; (8001334 <HAL_RCC_OscConfig+0x520>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0304 	and.w	r3, r3, #4
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d1ee      	bne.n	800108a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0310 	and.w	r3, r3, #16
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f000 80a9 	beq.w	800120c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010ba:	4b9e      	ldr	r3, [pc, #632]	; (8001334 <HAL_RCC_OscConfig+0x520>)
 80010bc:	691b      	ldr	r3, [r3, #16]
 80010be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80010c2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80010c4:	4b9b      	ldr	r3, [pc, #620]	; (8001334 <HAL_RCC_OscConfig+0x520>)
 80010c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	2b08      	cmp	r3, #8
 80010ce:	d007      	beq.n	80010e0 <HAL_RCC_OscConfig+0x2cc>
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	2b18      	cmp	r3, #24
 80010d4:	d13a      	bne.n	800114c <HAL_RCC_OscConfig+0x338>
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d135      	bne.n	800114c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80010e0:	4b94      	ldr	r3, [pc, #592]	; (8001334 <HAL_RCC_OscConfig+0x520>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d005      	beq.n	80010f8 <HAL_RCC_OscConfig+0x2e4>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	2b80      	cmp	r3, #128	; 0x80
 80010f2:	d001      	beq.n	80010f8 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e296      	b.n	8001626 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80010f8:	f7ff fb98 	bl	800082c <HAL_GetREVID>
 80010fc:	4603      	mov	r3, r0
 80010fe:	f241 0203 	movw	r2, #4099	; 0x1003
 8001102:	4293      	cmp	r3, r2
 8001104:	d817      	bhi.n	8001136 <HAL_RCC_OscConfig+0x322>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6a1b      	ldr	r3, [r3, #32]
 800110a:	2b20      	cmp	r3, #32
 800110c:	d108      	bne.n	8001120 <HAL_RCC_OscConfig+0x30c>
 800110e:	4b89      	ldr	r3, [pc, #548]	; (8001334 <HAL_RCC_OscConfig+0x520>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001116:	4a87      	ldr	r2, [pc, #540]	; (8001334 <HAL_RCC_OscConfig+0x520>)
 8001118:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800111c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800111e:	e075      	b.n	800120c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001120:	4b84      	ldr	r3, [pc, #528]	; (8001334 <HAL_RCC_OscConfig+0x520>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	069b      	lsls	r3, r3, #26
 800112e:	4981      	ldr	r1, [pc, #516]	; (8001334 <HAL_RCC_OscConfig+0x520>)
 8001130:	4313      	orrs	r3, r2
 8001132:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001134:	e06a      	b.n	800120c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001136:	4b7f      	ldr	r3, [pc, #508]	; (8001334 <HAL_RCC_OscConfig+0x520>)
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a1b      	ldr	r3, [r3, #32]
 8001142:	061b      	lsls	r3, r3, #24
 8001144:	497b      	ldr	r1, [pc, #492]	; (8001334 <HAL_RCC_OscConfig+0x520>)
 8001146:	4313      	orrs	r3, r2
 8001148:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800114a:	e05f      	b.n	800120c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69db      	ldr	r3, [r3, #28]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d042      	beq.n	80011da <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001154:	4b77      	ldr	r3, [pc, #476]	; (8001334 <HAL_RCC_OscConfig+0x520>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a76      	ldr	r2, [pc, #472]	; (8001334 <HAL_RCC_OscConfig+0x520>)
 800115a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800115e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001160:	f7ff fb34 	bl	80007cc <HAL_GetTick>
 8001164:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001166:	e008      	b.n	800117a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001168:	f7ff fb30 	bl	80007cc <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b02      	cmp	r3, #2
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e255      	b.n	8001626 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800117a:	4b6e      	ldr	r3, [pc, #440]	; (8001334 <HAL_RCC_OscConfig+0x520>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001182:	2b00      	cmp	r3, #0
 8001184:	d0f0      	beq.n	8001168 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001186:	f7ff fb51 	bl	800082c <HAL_GetREVID>
 800118a:	4603      	mov	r3, r0
 800118c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001190:	4293      	cmp	r3, r2
 8001192:	d817      	bhi.n	80011c4 <HAL_RCC_OscConfig+0x3b0>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a1b      	ldr	r3, [r3, #32]
 8001198:	2b20      	cmp	r3, #32
 800119a:	d108      	bne.n	80011ae <HAL_RCC_OscConfig+0x39a>
 800119c:	4b65      	ldr	r3, [pc, #404]	; (8001334 <HAL_RCC_OscConfig+0x520>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80011a4:	4a63      	ldr	r2, [pc, #396]	; (8001334 <HAL_RCC_OscConfig+0x520>)
 80011a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80011aa:	6053      	str	r3, [r2, #4]
 80011ac:	e02e      	b.n	800120c <HAL_RCC_OscConfig+0x3f8>
 80011ae:	4b61      	ldr	r3, [pc, #388]	; (8001334 <HAL_RCC_OscConfig+0x520>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a1b      	ldr	r3, [r3, #32]
 80011ba:	069b      	lsls	r3, r3, #26
 80011bc:	495d      	ldr	r1, [pc, #372]	; (8001334 <HAL_RCC_OscConfig+0x520>)
 80011be:	4313      	orrs	r3, r2
 80011c0:	604b      	str	r3, [r1, #4]
 80011c2:	e023      	b.n	800120c <HAL_RCC_OscConfig+0x3f8>
 80011c4:	4b5b      	ldr	r3, [pc, #364]	; (8001334 <HAL_RCC_OscConfig+0x520>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	061b      	lsls	r3, r3, #24
 80011d2:	4958      	ldr	r1, [pc, #352]	; (8001334 <HAL_RCC_OscConfig+0x520>)
 80011d4:	4313      	orrs	r3, r2
 80011d6:	60cb      	str	r3, [r1, #12]
 80011d8:	e018      	b.n	800120c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80011da:	4b56      	ldr	r3, [pc, #344]	; (8001334 <HAL_RCC_OscConfig+0x520>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a55      	ldr	r2, [pc, #340]	; (8001334 <HAL_RCC_OscConfig+0x520>)
 80011e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80011e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e6:	f7ff faf1 	bl	80007cc <HAL_GetTick>
 80011ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80011ec:	e008      	b.n	8001200 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80011ee:	f7ff faed 	bl	80007cc <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e212      	b.n	8001626 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001200:	4b4c      	ldr	r3, [pc, #304]	; (8001334 <HAL_RCC_OscConfig+0x520>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1f0      	bne.n	80011ee <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0308 	and.w	r3, r3, #8
 8001214:	2b00      	cmp	r3, #0
 8001216:	d036      	beq.n	8001286 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d019      	beq.n	8001254 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001220:	4b44      	ldr	r3, [pc, #272]	; (8001334 <HAL_RCC_OscConfig+0x520>)
 8001222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001224:	4a43      	ldr	r2, [pc, #268]	; (8001334 <HAL_RCC_OscConfig+0x520>)
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800122c:	f7ff face 	bl	80007cc <HAL_GetTick>
 8001230:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001234:	f7ff faca 	bl	80007cc <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e1ef      	b.n	8001626 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001246:	4b3b      	ldr	r3, [pc, #236]	; (8001334 <HAL_RCC_OscConfig+0x520>)
 8001248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0f0      	beq.n	8001234 <HAL_RCC_OscConfig+0x420>
 8001252:	e018      	b.n	8001286 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001254:	4b37      	ldr	r3, [pc, #220]	; (8001334 <HAL_RCC_OscConfig+0x520>)
 8001256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001258:	4a36      	ldr	r2, [pc, #216]	; (8001334 <HAL_RCC_OscConfig+0x520>)
 800125a:	f023 0301 	bic.w	r3, r3, #1
 800125e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001260:	f7ff fab4 	bl	80007cc <HAL_GetTick>
 8001264:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001268:	f7ff fab0 	bl	80007cc <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e1d5      	b.n	8001626 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800127a:	4b2e      	ldr	r3, [pc, #184]	; (8001334 <HAL_RCC_OscConfig+0x520>)
 800127c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1f0      	bne.n	8001268 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0320 	and.w	r3, r3, #32
 800128e:	2b00      	cmp	r3, #0
 8001290:	d036      	beq.n	8001300 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d019      	beq.n	80012ce <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800129a:	4b26      	ldr	r3, [pc, #152]	; (8001334 <HAL_RCC_OscConfig+0x520>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a25      	ldr	r2, [pc, #148]	; (8001334 <HAL_RCC_OscConfig+0x520>)
 80012a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80012a6:	f7ff fa91 	bl	80007cc <HAL_GetTick>
 80012aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80012ac:	e008      	b.n	80012c0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80012ae:	f7ff fa8d 	bl	80007cc <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d901      	bls.n	80012c0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e1b2      	b.n	8001626 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80012c0:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <HAL_RCC_OscConfig+0x520>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d0f0      	beq.n	80012ae <HAL_RCC_OscConfig+0x49a>
 80012cc:	e018      	b.n	8001300 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80012ce:	4b19      	ldr	r3, [pc, #100]	; (8001334 <HAL_RCC_OscConfig+0x520>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a18      	ldr	r2, [pc, #96]	; (8001334 <HAL_RCC_OscConfig+0x520>)
 80012d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80012da:	f7ff fa77 	bl	80007cc <HAL_GetTick>
 80012de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80012e2:	f7ff fa73 	bl	80007cc <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e198      	b.n	8001626 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80012f4:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <HAL_RCC_OscConfig+0x520>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1f0      	bne.n	80012e2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0304 	and.w	r3, r3, #4
 8001308:	2b00      	cmp	r3, #0
 800130a:	f000 8085 	beq.w	8001418 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800130e:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <HAL_RCC_OscConfig+0x524>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a09      	ldr	r2, [pc, #36]	; (8001338 <HAL_RCC_OscConfig+0x524>)
 8001314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001318:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800131a:	f7ff fa57 	bl	80007cc <HAL_GetTick>
 800131e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001320:	e00c      	b.n	800133c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001322:	f7ff fa53 	bl	80007cc <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b64      	cmp	r3, #100	; 0x64
 800132e:	d905      	bls.n	800133c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e178      	b.n	8001626 <HAL_RCC_OscConfig+0x812>
 8001334:	58024400 	.word	0x58024400
 8001338:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800133c:	4b96      	ldr	r3, [pc, #600]	; (8001598 <HAL_RCC_OscConfig+0x784>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001344:	2b00      	cmp	r3, #0
 8001346:	d0ec      	beq.n	8001322 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d106      	bne.n	800135e <HAL_RCC_OscConfig+0x54a>
 8001350:	4b92      	ldr	r3, [pc, #584]	; (800159c <HAL_RCC_OscConfig+0x788>)
 8001352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001354:	4a91      	ldr	r2, [pc, #580]	; (800159c <HAL_RCC_OscConfig+0x788>)
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	6713      	str	r3, [r2, #112]	; 0x70
 800135c:	e02d      	b.n	80013ba <HAL_RCC_OscConfig+0x5a6>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d10c      	bne.n	8001380 <HAL_RCC_OscConfig+0x56c>
 8001366:	4b8d      	ldr	r3, [pc, #564]	; (800159c <HAL_RCC_OscConfig+0x788>)
 8001368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800136a:	4a8c      	ldr	r2, [pc, #560]	; (800159c <HAL_RCC_OscConfig+0x788>)
 800136c:	f023 0301 	bic.w	r3, r3, #1
 8001370:	6713      	str	r3, [r2, #112]	; 0x70
 8001372:	4b8a      	ldr	r3, [pc, #552]	; (800159c <HAL_RCC_OscConfig+0x788>)
 8001374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001376:	4a89      	ldr	r2, [pc, #548]	; (800159c <HAL_RCC_OscConfig+0x788>)
 8001378:	f023 0304 	bic.w	r3, r3, #4
 800137c:	6713      	str	r3, [r2, #112]	; 0x70
 800137e:	e01c      	b.n	80013ba <HAL_RCC_OscConfig+0x5a6>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	2b05      	cmp	r3, #5
 8001386:	d10c      	bne.n	80013a2 <HAL_RCC_OscConfig+0x58e>
 8001388:	4b84      	ldr	r3, [pc, #528]	; (800159c <HAL_RCC_OscConfig+0x788>)
 800138a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800138c:	4a83      	ldr	r2, [pc, #524]	; (800159c <HAL_RCC_OscConfig+0x788>)
 800138e:	f043 0304 	orr.w	r3, r3, #4
 8001392:	6713      	str	r3, [r2, #112]	; 0x70
 8001394:	4b81      	ldr	r3, [pc, #516]	; (800159c <HAL_RCC_OscConfig+0x788>)
 8001396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001398:	4a80      	ldr	r2, [pc, #512]	; (800159c <HAL_RCC_OscConfig+0x788>)
 800139a:	f043 0301 	orr.w	r3, r3, #1
 800139e:	6713      	str	r3, [r2, #112]	; 0x70
 80013a0:	e00b      	b.n	80013ba <HAL_RCC_OscConfig+0x5a6>
 80013a2:	4b7e      	ldr	r3, [pc, #504]	; (800159c <HAL_RCC_OscConfig+0x788>)
 80013a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a6:	4a7d      	ldr	r2, [pc, #500]	; (800159c <HAL_RCC_OscConfig+0x788>)
 80013a8:	f023 0301 	bic.w	r3, r3, #1
 80013ac:	6713      	str	r3, [r2, #112]	; 0x70
 80013ae:	4b7b      	ldr	r3, [pc, #492]	; (800159c <HAL_RCC_OscConfig+0x788>)
 80013b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b2:	4a7a      	ldr	r2, [pc, #488]	; (800159c <HAL_RCC_OscConfig+0x788>)
 80013b4:	f023 0304 	bic.w	r3, r3, #4
 80013b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d015      	beq.n	80013ee <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c2:	f7ff fa03 	bl	80007cc <HAL_GetTick>
 80013c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013c8:	e00a      	b.n	80013e0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ca:	f7ff f9ff 	bl	80007cc <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d8:	4293      	cmp	r3, r2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e122      	b.n	8001626 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013e0:	4b6e      	ldr	r3, [pc, #440]	; (800159c <HAL_RCC_OscConfig+0x788>)
 80013e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0ee      	beq.n	80013ca <HAL_RCC_OscConfig+0x5b6>
 80013ec:	e014      	b.n	8001418 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ee:	f7ff f9ed 	bl	80007cc <HAL_GetTick>
 80013f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80013f4:	e00a      	b.n	800140c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013f6:	f7ff f9e9 	bl	80007cc <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	f241 3288 	movw	r2, #5000	; 0x1388
 8001404:	4293      	cmp	r3, r2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e10c      	b.n	8001626 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800140c:	4b63      	ldr	r3, [pc, #396]	; (800159c <HAL_RCC_OscConfig+0x788>)
 800140e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1ee      	bne.n	80013f6 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141c:	2b00      	cmp	r3, #0
 800141e:	f000 8101 	beq.w	8001624 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001422:	4b5e      	ldr	r3, [pc, #376]	; (800159c <HAL_RCC_OscConfig+0x788>)
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800142a:	2b18      	cmp	r3, #24
 800142c:	f000 80bc 	beq.w	80015a8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001434:	2b02      	cmp	r3, #2
 8001436:	f040 8095 	bne.w	8001564 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800143a:	4b58      	ldr	r3, [pc, #352]	; (800159c <HAL_RCC_OscConfig+0x788>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a57      	ldr	r2, [pc, #348]	; (800159c <HAL_RCC_OscConfig+0x788>)
 8001440:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001444:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001446:	f7ff f9c1 	bl	80007cc <HAL_GetTick>
 800144a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800144e:	f7ff f9bd 	bl	80007cc <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e0e2      	b.n	8001626 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001460:	4b4e      	ldr	r3, [pc, #312]	; (800159c <HAL_RCC_OscConfig+0x788>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1f0      	bne.n	800144e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800146c:	4b4b      	ldr	r3, [pc, #300]	; (800159c <HAL_RCC_OscConfig+0x788>)
 800146e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001470:	4b4b      	ldr	r3, [pc, #300]	; (80015a0 <HAL_RCC_OscConfig+0x78c>)
 8001472:	4013      	ands	r3, r2
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800147c:	0112      	lsls	r2, r2, #4
 800147e:	430a      	orrs	r2, r1
 8001480:	4946      	ldr	r1, [pc, #280]	; (800159c <HAL_RCC_OscConfig+0x788>)
 8001482:	4313      	orrs	r3, r2
 8001484:	628b      	str	r3, [r1, #40]	; 0x28
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	3b01      	subs	r3, #1
 800148c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001494:	3b01      	subs	r3, #1
 8001496:	025b      	lsls	r3, r3, #9
 8001498:	b29b      	uxth	r3, r3
 800149a:	431a      	orrs	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a0:	3b01      	subs	r3, #1
 80014a2:	041b      	lsls	r3, r3, #16
 80014a4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80014a8:	431a      	orrs	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ae:	3b01      	subs	r3, #1
 80014b0:	061b      	lsls	r3, r3, #24
 80014b2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80014b6:	4939      	ldr	r1, [pc, #228]	; (800159c <HAL_RCC_OscConfig+0x788>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80014bc:	4b37      	ldr	r3, [pc, #220]	; (800159c <HAL_RCC_OscConfig+0x788>)
 80014be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c0:	4a36      	ldr	r2, [pc, #216]	; (800159c <HAL_RCC_OscConfig+0x788>)
 80014c2:	f023 0301 	bic.w	r3, r3, #1
 80014c6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80014c8:	4b34      	ldr	r3, [pc, #208]	; (800159c <HAL_RCC_OscConfig+0x788>)
 80014ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014cc:	4b35      	ldr	r3, [pc, #212]	; (80015a4 <HAL_RCC_OscConfig+0x790>)
 80014ce:	4013      	ands	r3, r2
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80014d4:	00d2      	lsls	r2, r2, #3
 80014d6:	4931      	ldr	r1, [pc, #196]	; (800159c <HAL_RCC_OscConfig+0x788>)
 80014d8:	4313      	orrs	r3, r2
 80014da:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80014dc:	4b2f      	ldr	r3, [pc, #188]	; (800159c <HAL_RCC_OscConfig+0x788>)
 80014de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e0:	f023 020c 	bic.w	r2, r3, #12
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	492c      	ldr	r1, [pc, #176]	; (800159c <HAL_RCC_OscConfig+0x788>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80014ee:	4b2b      	ldr	r3, [pc, #172]	; (800159c <HAL_RCC_OscConfig+0x788>)
 80014f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f2:	f023 0202 	bic.w	r2, r3, #2
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	4928      	ldr	r1, [pc, #160]	; (800159c <HAL_RCC_OscConfig+0x788>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001500:	4b26      	ldr	r3, [pc, #152]	; (800159c <HAL_RCC_OscConfig+0x788>)
 8001502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001504:	4a25      	ldr	r2, [pc, #148]	; (800159c <HAL_RCC_OscConfig+0x788>)
 8001506:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800150a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800150c:	4b23      	ldr	r3, [pc, #140]	; (800159c <HAL_RCC_OscConfig+0x788>)
 800150e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001510:	4a22      	ldr	r2, [pc, #136]	; (800159c <HAL_RCC_OscConfig+0x788>)
 8001512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001516:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001518:	4b20      	ldr	r3, [pc, #128]	; (800159c <HAL_RCC_OscConfig+0x788>)
 800151a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151c:	4a1f      	ldr	r2, [pc, #124]	; (800159c <HAL_RCC_OscConfig+0x788>)
 800151e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001522:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001524:	4b1d      	ldr	r3, [pc, #116]	; (800159c <HAL_RCC_OscConfig+0x788>)
 8001526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001528:	4a1c      	ldr	r2, [pc, #112]	; (800159c <HAL_RCC_OscConfig+0x788>)
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001530:	4b1a      	ldr	r3, [pc, #104]	; (800159c <HAL_RCC_OscConfig+0x788>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a19      	ldr	r2, [pc, #100]	; (800159c <HAL_RCC_OscConfig+0x788>)
 8001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800153a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153c:	f7ff f946 	bl	80007cc <HAL_GetTick>
 8001540:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001544:	f7ff f942 	bl	80007cc <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e067      	b.n	8001626 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001556:	4b11      	ldr	r3, [pc, #68]	; (800159c <HAL_RCC_OscConfig+0x788>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0f0      	beq.n	8001544 <HAL_RCC_OscConfig+0x730>
 8001562:	e05f      	b.n	8001624 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001564:	4b0d      	ldr	r3, [pc, #52]	; (800159c <HAL_RCC_OscConfig+0x788>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0c      	ldr	r2, [pc, #48]	; (800159c <HAL_RCC_OscConfig+0x788>)
 800156a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800156e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001570:	f7ff f92c 	bl	80007cc <HAL_GetTick>
 8001574:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001578:	f7ff f928 	bl	80007cc <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e04d      	b.n	8001626 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800158a:	4b04      	ldr	r3, [pc, #16]	; (800159c <HAL_RCC_OscConfig+0x788>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1f0      	bne.n	8001578 <HAL_RCC_OscConfig+0x764>
 8001596:	e045      	b.n	8001624 <HAL_RCC_OscConfig+0x810>
 8001598:	58024800 	.word	0x58024800
 800159c:	58024400 	.word	0x58024400
 80015a0:	fffffc0c 	.word	0xfffffc0c
 80015a4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80015a8:	4b21      	ldr	r3, [pc, #132]	; (8001630 <HAL_RCC_OscConfig+0x81c>)
 80015aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80015ae:	4b20      	ldr	r3, [pc, #128]	; (8001630 <HAL_RCC_OscConfig+0x81c>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d031      	beq.n	8001620 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	f003 0203 	and.w	r2, r3, #3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d12a      	bne.n	8001620 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	091b      	lsrs	r3, r3, #4
 80015ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d122      	bne.n	8001620 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d11a      	bne.n	8001620 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	0a5b      	lsrs	r3, r3, #9
 80015ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d111      	bne.n	8001620 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	0c1b      	lsrs	r3, r3, #16
 8001600:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001608:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800160a:	429a      	cmp	r2, r3
 800160c:	d108      	bne.n	8001620 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	0e1b      	lsrs	r3, r3, #24
 8001612:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800161a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800161c:	429a      	cmp	r2, r3
 800161e:	d001      	beq.n	8001624 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e000      	b.n	8001626 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3730      	adds	r7, #48	; 0x30
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	58024400 	.word	0x58024400

08001634 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e19c      	b.n	8001982 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001648:	4b8a      	ldr	r3, [pc, #552]	; (8001874 <HAL_RCC_ClockConfig+0x240>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 030f 	and.w	r3, r3, #15
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	d910      	bls.n	8001678 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001656:	4b87      	ldr	r3, [pc, #540]	; (8001874 <HAL_RCC_ClockConfig+0x240>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f023 020f 	bic.w	r2, r3, #15
 800165e:	4985      	ldr	r1, [pc, #532]	; (8001874 <HAL_RCC_ClockConfig+0x240>)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	4313      	orrs	r3, r2
 8001664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001666:	4b83      	ldr	r3, [pc, #524]	; (8001874 <HAL_RCC_ClockConfig+0x240>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	429a      	cmp	r2, r3
 8001672:	d001      	beq.n	8001678 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e184      	b.n	8001982 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b00      	cmp	r3, #0
 8001682:	d010      	beq.n	80016a6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	691a      	ldr	r2, [r3, #16]
 8001688:	4b7b      	ldr	r3, [pc, #492]	; (8001878 <HAL_RCC_ClockConfig+0x244>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001690:	429a      	cmp	r2, r3
 8001692:	d908      	bls.n	80016a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001694:	4b78      	ldr	r3, [pc, #480]	; (8001878 <HAL_RCC_ClockConfig+0x244>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	4975      	ldr	r1, [pc, #468]	; (8001878 <HAL_RCC_ClockConfig+0x244>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d010      	beq.n	80016d4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695a      	ldr	r2, [r3, #20]
 80016b6:	4b70      	ldr	r3, [pc, #448]	; (8001878 <HAL_RCC_ClockConfig+0x244>)
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80016be:	429a      	cmp	r2, r3
 80016c0:	d908      	bls.n	80016d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80016c2:	4b6d      	ldr	r3, [pc, #436]	; (8001878 <HAL_RCC_ClockConfig+0x244>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	496a      	ldr	r1, [pc, #424]	; (8001878 <HAL_RCC_ClockConfig+0x244>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0310 	and.w	r3, r3, #16
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d010      	beq.n	8001702 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	699a      	ldr	r2, [r3, #24]
 80016e4:	4b64      	ldr	r3, [pc, #400]	; (8001878 <HAL_RCC_ClockConfig+0x244>)
 80016e6:	69db      	ldr	r3, [r3, #28]
 80016e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d908      	bls.n	8001702 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80016f0:	4b61      	ldr	r3, [pc, #388]	; (8001878 <HAL_RCC_ClockConfig+0x244>)
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	495e      	ldr	r1, [pc, #376]	; (8001878 <HAL_RCC_ClockConfig+0x244>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0320 	and.w	r3, r3, #32
 800170a:	2b00      	cmp	r3, #0
 800170c:	d010      	beq.n	8001730 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69da      	ldr	r2, [r3, #28]
 8001712:	4b59      	ldr	r3, [pc, #356]	; (8001878 <HAL_RCC_ClockConfig+0x244>)
 8001714:	6a1b      	ldr	r3, [r3, #32]
 8001716:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800171a:	429a      	cmp	r2, r3
 800171c:	d908      	bls.n	8001730 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800171e:	4b56      	ldr	r3, [pc, #344]	; (8001878 <HAL_RCC_ClockConfig+0x244>)
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	4953      	ldr	r1, [pc, #332]	; (8001878 <HAL_RCC_ClockConfig+0x244>)
 800172c:	4313      	orrs	r3, r2
 800172e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d010      	beq.n	800175e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68da      	ldr	r2, [r3, #12]
 8001740:	4b4d      	ldr	r3, [pc, #308]	; (8001878 <HAL_RCC_ClockConfig+0x244>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	f003 030f 	and.w	r3, r3, #15
 8001748:	429a      	cmp	r2, r3
 800174a:	d908      	bls.n	800175e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800174c:	4b4a      	ldr	r3, [pc, #296]	; (8001878 <HAL_RCC_ClockConfig+0x244>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	f023 020f 	bic.w	r2, r3, #15
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	4947      	ldr	r1, [pc, #284]	; (8001878 <HAL_RCC_ClockConfig+0x244>)
 800175a:	4313      	orrs	r3, r2
 800175c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d055      	beq.n	8001816 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800176a:	4b43      	ldr	r3, [pc, #268]	; (8001878 <HAL_RCC_ClockConfig+0x244>)
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	4940      	ldr	r1, [pc, #256]	; (8001878 <HAL_RCC_ClockConfig+0x244>)
 8001778:	4313      	orrs	r3, r2
 800177a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b02      	cmp	r3, #2
 8001782:	d107      	bne.n	8001794 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001784:	4b3c      	ldr	r3, [pc, #240]	; (8001878 <HAL_RCC_ClockConfig+0x244>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d121      	bne.n	80017d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e0f6      	b.n	8001982 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b03      	cmp	r3, #3
 800179a:	d107      	bne.n	80017ac <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800179c:	4b36      	ldr	r3, [pc, #216]	; (8001878 <HAL_RCC_ClockConfig+0x244>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d115      	bne.n	80017d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e0ea      	b.n	8001982 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d107      	bne.n	80017c4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80017b4:	4b30      	ldr	r3, [pc, #192]	; (8001878 <HAL_RCC_ClockConfig+0x244>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d109      	bne.n	80017d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e0de      	b.n	8001982 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017c4:	4b2c      	ldr	r3, [pc, #176]	; (8001878 <HAL_RCC_ClockConfig+0x244>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e0d6      	b.n	8001982 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017d4:	4b28      	ldr	r3, [pc, #160]	; (8001878 <HAL_RCC_ClockConfig+0x244>)
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	f023 0207 	bic.w	r2, r3, #7
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	4925      	ldr	r1, [pc, #148]	; (8001878 <HAL_RCC_ClockConfig+0x244>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e6:	f7fe fff1 	bl	80007cc <HAL_GetTick>
 80017ea:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ec:	e00a      	b.n	8001804 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ee:	f7fe ffed 	bl	80007cc <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e0be      	b.n	8001982 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001804:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <HAL_RCC_ClockConfig+0x244>)
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	429a      	cmp	r2, r3
 8001814:	d1eb      	bne.n	80017ee <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d010      	beq.n	8001844 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	68da      	ldr	r2, [r3, #12]
 8001826:	4b14      	ldr	r3, [pc, #80]	; (8001878 <HAL_RCC_ClockConfig+0x244>)
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	429a      	cmp	r2, r3
 8001830:	d208      	bcs.n	8001844 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001832:	4b11      	ldr	r3, [pc, #68]	; (8001878 <HAL_RCC_ClockConfig+0x244>)
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	f023 020f 	bic.w	r2, r3, #15
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	490e      	ldr	r1, [pc, #56]	; (8001878 <HAL_RCC_ClockConfig+0x244>)
 8001840:	4313      	orrs	r3, r2
 8001842:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001844:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <HAL_RCC_ClockConfig+0x240>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 030f 	and.w	r3, r3, #15
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d214      	bcs.n	800187c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001852:	4b08      	ldr	r3, [pc, #32]	; (8001874 <HAL_RCC_ClockConfig+0x240>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f023 020f 	bic.w	r2, r3, #15
 800185a:	4906      	ldr	r1, [pc, #24]	; (8001874 <HAL_RCC_ClockConfig+0x240>)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	4313      	orrs	r3, r2
 8001860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001862:	4b04      	ldr	r3, [pc, #16]	; (8001874 <HAL_RCC_ClockConfig+0x240>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	429a      	cmp	r2, r3
 800186e:	d005      	beq.n	800187c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e086      	b.n	8001982 <HAL_RCC_ClockConfig+0x34e>
 8001874:	52002000 	.word	0x52002000
 8001878:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d010      	beq.n	80018aa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	691a      	ldr	r2, [r3, #16]
 800188c:	4b3f      	ldr	r3, [pc, #252]	; (800198c <HAL_RCC_ClockConfig+0x358>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001894:	429a      	cmp	r2, r3
 8001896:	d208      	bcs.n	80018aa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001898:	4b3c      	ldr	r3, [pc, #240]	; (800198c <HAL_RCC_ClockConfig+0x358>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	4939      	ldr	r1, [pc, #228]	; (800198c <HAL_RCC_ClockConfig+0x358>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d010      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	695a      	ldr	r2, [r3, #20]
 80018ba:	4b34      	ldr	r3, [pc, #208]	; (800198c <HAL_RCC_ClockConfig+0x358>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d208      	bcs.n	80018d8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80018c6:	4b31      	ldr	r3, [pc, #196]	; (800198c <HAL_RCC_ClockConfig+0x358>)
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	492e      	ldr	r1, [pc, #184]	; (800198c <HAL_RCC_ClockConfig+0x358>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0310 	and.w	r3, r3, #16
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d010      	beq.n	8001906 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	699a      	ldr	r2, [r3, #24]
 80018e8:	4b28      	ldr	r3, [pc, #160]	; (800198c <HAL_RCC_ClockConfig+0x358>)
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d208      	bcs.n	8001906 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80018f4:	4b25      	ldr	r3, [pc, #148]	; (800198c <HAL_RCC_ClockConfig+0x358>)
 80018f6:	69db      	ldr	r3, [r3, #28]
 80018f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	4922      	ldr	r1, [pc, #136]	; (800198c <HAL_RCC_ClockConfig+0x358>)
 8001902:	4313      	orrs	r3, r2
 8001904:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0320 	and.w	r3, r3, #32
 800190e:	2b00      	cmp	r3, #0
 8001910:	d010      	beq.n	8001934 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69da      	ldr	r2, [r3, #28]
 8001916:	4b1d      	ldr	r3, [pc, #116]	; (800198c <HAL_RCC_ClockConfig+0x358>)
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800191e:	429a      	cmp	r2, r3
 8001920:	d208      	bcs.n	8001934 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001922:	4b1a      	ldr	r3, [pc, #104]	; (800198c <HAL_RCC_ClockConfig+0x358>)
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	4917      	ldr	r1, [pc, #92]	; (800198c <HAL_RCC_ClockConfig+0x358>)
 8001930:	4313      	orrs	r3, r2
 8001932:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001934:	f000 f834 	bl	80019a0 <HAL_RCC_GetSysClockFreq>
 8001938:	4602      	mov	r2, r0
 800193a:	4b14      	ldr	r3, [pc, #80]	; (800198c <HAL_RCC_ClockConfig+0x358>)
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	0a1b      	lsrs	r3, r3, #8
 8001940:	f003 030f 	and.w	r3, r3, #15
 8001944:	4912      	ldr	r1, [pc, #72]	; (8001990 <HAL_RCC_ClockConfig+0x35c>)
 8001946:	5ccb      	ldrb	r3, [r1, r3]
 8001948:	f003 031f 	and.w	r3, r3, #31
 800194c:	fa22 f303 	lsr.w	r3, r2, r3
 8001950:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001952:	4b0e      	ldr	r3, [pc, #56]	; (800198c <HAL_RCC_ClockConfig+0x358>)
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	4a0d      	ldr	r2, [pc, #52]	; (8001990 <HAL_RCC_ClockConfig+0x35c>)
 800195c:	5cd3      	ldrb	r3, [r2, r3]
 800195e:	f003 031f 	and.w	r3, r3, #31
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	fa22 f303 	lsr.w	r3, r2, r3
 8001968:	4a0a      	ldr	r2, [pc, #40]	; (8001994 <HAL_RCC_ClockConfig+0x360>)
 800196a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800196c:	4a0a      	ldr	r2, [pc, #40]	; (8001998 <HAL_RCC_ClockConfig+0x364>)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001972:	4b0a      	ldr	r3, [pc, #40]	; (800199c <HAL_RCC_ClockConfig+0x368>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe fede 	bl	8000738 <HAL_InitTick>
 800197c:	4603      	mov	r3, r0
 800197e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001980:	7bfb      	ldrb	r3, [r7, #15]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	58024400 	.word	0x58024400
 8001990:	08001d04 	.word	0x08001d04
 8001994:	20000004 	.word	0x20000004
 8001998:	20000000 	.word	0x20000000
 800199c:	20000008 	.word	0x20000008

080019a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b089      	sub	sp, #36	; 0x24
 80019a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019a6:	4bb3      	ldr	r3, [pc, #716]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019ae:	2b18      	cmp	r3, #24
 80019b0:	f200 8155 	bhi.w	8001c5e <HAL_RCC_GetSysClockFreq+0x2be>
 80019b4:	a201      	add	r2, pc, #4	; (adr r2, 80019bc <HAL_RCC_GetSysClockFreq+0x1c>)
 80019b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ba:	bf00      	nop
 80019bc:	08001a21 	.word	0x08001a21
 80019c0:	08001c5f 	.word	0x08001c5f
 80019c4:	08001c5f 	.word	0x08001c5f
 80019c8:	08001c5f 	.word	0x08001c5f
 80019cc:	08001c5f 	.word	0x08001c5f
 80019d0:	08001c5f 	.word	0x08001c5f
 80019d4:	08001c5f 	.word	0x08001c5f
 80019d8:	08001c5f 	.word	0x08001c5f
 80019dc:	08001a47 	.word	0x08001a47
 80019e0:	08001c5f 	.word	0x08001c5f
 80019e4:	08001c5f 	.word	0x08001c5f
 80019e8:	08001c5f 	.word	0x08001c5f
 80019ec:	08001c5f 	.word	0x08001c5f
 80019f0:	08001c5f 	.word	0x08001c5f
 80019f4:	08001c5f 	.word	0x08001c5f
 80019f8:	08001c5f 	.word	0x08001c5f
 80019fc:	08001a4d 	.word	0x08001a4d
 8001a00:	08001c5f 	.word	0x08001c5f
 8001a04:	08001c5f 	.word	0x08001c5f
 8001a08:	08001c5f 	.word	0x08001c5f
 8001a0c:	08001c5f 	.word	0x08001c5f
 8001a10:	08001c5f 	.word	0x08001c5f
 8001a14:	08001c5f 	.word	0x08001c5f
 8001a18:	08001c5f 	.word	0x08001c5f
 8001a1c:	08001a53 	.word	0x08001a53
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001a20:	4b94      	ldr	r3, [pc, #592]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0320 	and.w	r3, r3, #32
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d009      	beq.n	8001a40 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001a2c:	4b91      	ldr	r3, [pc, #580]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	08db      	lsrs	r3, r3, #3
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	4a90      	ldr	r2, [pc, #576]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001a38:	fa22 f303 	lsr.w	r3, r2, r3
 8001a3c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001a3e:	e111      	b.n	8001c64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001a40:	4b8d      	ldr	r3, [pc, #564]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001a42:	61bb      	str	r3, [r7, #24]
    break;
 8001a44:	e10e      	b.n	8001c64 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001a46:	4b8d      	ldr	r3, [pc, #564]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001a48:	61bb      	str	r3, [r7, #24]
    break;
 8001a4a:	e10b      	b.n	8001c64 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001a4c:	4b8c      	ldr	r3, [pc, #560]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001a4e:	61bb      	str	r3, [r7, #24]
    break;
 8001a50:	e108      	b.n	8001c64 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001a52:	4b88      	ldr	r3, [pc, #544]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001a5c:	4b85      	ldr	r3, [pc, #532]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a60:	091b      	lsrs	r3, r3, #4
 8001a62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a66:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001a68:	4b82      	ldr	r3, [pc, #520]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001a72:	4b80      	ldr	r3, [pc, #512]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a76:	08db      	lsrs	r3, r3, #3
 8001a78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	fb02 f303 	mul.w	r3, r2, r3
 8001a82:	ee07 3a90 	vmov	s15, r3
 8001a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a8a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 80e1 	beq.w	8001c58 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	f000 8083 	beq.w	8001ba4 <HAL_RCC_GetSysClockFreq+0x204>
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	f200 80a1 	bhi.w	8001be8 <HAL_RCC_GetSysClockFreq+0x248>
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d003      	beq.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x114>
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d056      	beq.n	8001b60 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001ab2:	e099      	b.n	8001be8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ab4:	4b6f      	ldr	r3, [pc, #444]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0320 	and.w	r3, r3, #32
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d02d      	beq.n	8001b1c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001ac0:	4b6c      	ldr	r3, [pc, #432]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	08db      	lsrs	r3, r3, #3
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	4a6b      	ldr	r2, [pc, #428]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001acc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	ee07 3a90 	vmov	s15, r3
 8001ad8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	ee07 3a90 	vmov	s15, r3
 8001ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001aea:	4b62      	ldr	r3, [pc, #392]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001af2:	ee07 3a90 	vmov	s15, r3
 8001af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001afa:	ed97 6a02 	vldr	s12, [r7, #8]
 8001afe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001c84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b16:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001b1a:	e087      	b.n	8001c2c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	ee07 3a90 	vmov	s15, r3
 8001b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b26:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001c88 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b2e:	4b51      	ldr	r3, [pc, #324]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b36:	ee07 3a90 	vmov	s15, r3
 8001b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001b42:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001c84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001b5e:	e065      	b.n	8001c2c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	ee07 3a90 	vmov	s15, r3
 8001b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b6a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001c8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8001b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b72:	4b40      	ldr	r3, [pc, #256]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b7a:	ee07 3a90 	vmov	s15, r3
 8001b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b82:	ed97 6a02 	vldr	s12, [r7, #8]
 8001b86:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001c84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001ba2:	e043      	b.n	8001c2c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	ee07 3a90 	vmov	s15, r3
 8001baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bae:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001c90 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001bb6:	4b2f      	ldr	r3, [pc, #188]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bbe:	ee07 3a90 	vmov	s15, r3
 8001bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001bc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001bca:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001c84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001bd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001be2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001be6:	e021      	b.n	8001c2c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	ee07 3a90 	vmov	s15, r3
 8001bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bf2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001c8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8001bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001bfa:	4b1e      	ldr	r3, [pc, #120]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c02:	ee07 3a90 	vmov	s15, r3
 8001c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c0e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001c84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001c2a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001c2c:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c30:	0a5b      	lsrs	r3, r3, #9
 8001c32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c36:	3301      	adds	r3, #1
 8001c38:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	ee07 3a90 	vmov	s15, r3
 8001c40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c44:	edd7 6a07 	vldr	s13, [r7, #28]
 8001c48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c50:	ee17 3a90 	vmov	r3, s15
 8001c54:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001c56:	e005      	b.n	8001c64 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61bb      	str	r3, [r7, #24]
    break;
 8001c5c:	e002      	b.n	8001c64 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001c60:	61bb      	str	r3, [r7, #24]
    break;
 8001c62:	bf00      	nop
  }

  return sysclockfreq;
 8001c64:	69bb      	ldr	r3, [r7, #24]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3724      	adds	r7, #36	; 0x24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	58024400 	.word	0x58024400
 8001c78:	03d09000 	.word	0x03d09000
 8001c7c:	003d0900 	.word	0x003d0900
 8001c80:	017d7840 	.word	0x017d7840
 8001c84:	46000000 	.word	0x46000000
 8001c88:	4c742400 	.word	0x4c742400
 8001c8c:	4a742400 	.word	0x4a742400
 8001c90:	4bbebc20 	.word	0x4bbebc20

08001c94 <__libc_init_array>:
 8001c94:	b570      	push	{r4, r5, r6, lr}
 8001c96:	4d0d      	ldr	r5, [pc, #52]	; (8001ccc <__libc_init_array+0x38>)
 8001c98:	4c0d      	ldr	r4, [pc, #52]	; (8001cd0 <__libc_init_array+0x3c>)
 8001c9a:	1b64      	subs	r4, r4, r5
 8001c9c:	10a4      	asrs	r4, r4, #2
 8001c9e:	2600      	movs	r6, #0
 8001ca0:	42a6      	cmp	r6, r4
 8001ca2:	d109      	bne.n	8001cb8 <__libc_init_array+0x24>
 8001ca4:	4d0b      	ldr	r5, [pc, #44]	; (8001cd4 <__libc_init_array+0x40>)
 8001ca6:	4c0c      	ldr	r4, [pc, #48]	; (8001cd8 <__libc_init_array+0x44>)
 8001ca8:	f000 f820 	bl	8001cec <_init>
 8001cac:	1b64      	subs	r4, r4, r5
 8001cae:	10a4      	asrs	r4, r4, #2
 8001cb0:	2600      	movs	r6, #0
 8001cb2:	42a6      	cmp	r6, r4
 8001cb4:	d105      	bne.n	8001cc2 <__libc_init_array+0x2e>
 8001cb6:	bd70      	pop	{r4, r5, r6, pc}
 8001cb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cbc:	4798      	blx	r3
 8001cbe:	3601      	adds	r6, #1
 8001cc0:	e7ee      	b.n	8001ca0 <__libc_init_array+0xc>
 8001cc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cc6:	4798      	blx	r3
 8001cc8:	3601      	adds	r6, #1
 8001cca:	e7f2      	b.n	8001cb2 <__libc_init_array+0x1e>
 8001ccc:	08001d14 	.word	0x08001d14
 8001cd0:	08001d14 	.word	0x08001d14
 8001cd4:	08001d14 	.word	0x08001d14
 8001cd8:	08001d18 	.word	0x08001d18

08001cdc <memset>:
 8001cdc:	4402      	add	r2, r0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d100      	bne.n	8001ce6 <memset+0xa>
 8001ce4:	4770      	bx	lr
 8001ce6:	f803 1b01 	strb.w	r1, [r3], #1
 8001cea:	e7f9      	b.n	8001ce0 <memset+0x4>

08001cec <_init>:
 8001cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cee:	bf00      	nop
 8001cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cf2:	bc08      	pop	{r3}
 8001cf4:	469e      	mov	lr, r3
 8001cf6:	4770      	bx	lr

08001cf8 <_fini>:
 8001cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cfa:	bf00      	nop
 8001cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cfe:	bc08      	pop	{r3}
 8001d00:	469e      	mov	lr, r3
 8001d02:	4770      	bx	lr
